
proc filterWccpEnhancedBasicFunction { args } {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         "ping" 
    set opt(filterType) "IP"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) ""
    set opt(itfBind) ""
    set opt(case)    ""
    set opt(dest1RC)    ""
    set opt(dest2RC)    ""
    set opt(dest3RC)    ""
    set opt(dest4RC)    ""
    set opt(quick)      "true"
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn rvpls L2Service grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
   

    ## randomly choose initial setupType of duts A,B,C
    if {$opt(setupType) == ""} {
        if { $opt(svcType) == "vprn" } {
            log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
            if {$opt(itfBind) == "serviceAware"} {
                set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
            } else {
                set setupType [RP_VrfTo_getSetupType $opt(filterType)]
            }
        } elseif { $opt(svcType) == "L2Service" } {
            log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
            set setupType [RP_L2Service_getSetupType $opt(filterType)]
        } elseif { $opt(svcType) == "rvpls" } {
            log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
            set setupType [RP_RVPLS_getSetupType $opt(filterType)]
        } else {
            log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
            set setupType [RP_GrtTo_getSetupType $opt(filterType)]
        }
    } else {
        set setupType $opt(setupType)
        log_msg NOTICE "User defined setupType: $setupType"
        if {[regexp {rvpls} $setupType]} { 
            set opt(svcType) "rvpls"
        } elseif {[regexp {vprn} $setupType]} { 
            set opt(svcType) "vprn" 
        } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
            set opt(svcType) "L2Service"
        } else { 
            set opt(svcType) "grt"
        }        
    }
    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    }
    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }    
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
 
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
    
 
    gash_interpreter
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    after 2000    
    # start memory leak checks
    set CliTim [ Dut-$dut3 cget -cli_timeout ]
    set Tim [ Dut-$dut3 cget -timeout ]
    Dut-$dut3 configure -cli_timeout 200
    Dut-$dut3 configure -timeout 200
   
    filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}

    if {[Dut-$dut3 cget -redundantSystem] != "false"} {
        # start memory leak checks on standby CPM
        filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}
    }

    gash_interpreter
    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr $IngrEgr  ] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    #egress filter
    if {$IngrEgr == "true"} {
        set r [filterTCAM_applyFilter $setupType Egress 100]
    }
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }
     # if { [RP_applyFilter_Cli $dut6 ingress 61 -RC GRT -intf FD_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut6 ingress 62 -RC VRF -intf FE_intf -sap $topoMap(Dut-$dut6,1/1/2)] != "OK" } {set Result "FAILED"}   
     # if { [RP_applyFilter_Cli $dut5 ingress 52 -RC GRT -intf EC_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut5 ingress 502 -RC GRT -intf EF_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut4 ingress 41 -RC GRT -intf DC_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut4 ingress 401 -RC GRT -intf DF_intf ] != "OK" } {set Result "FAILED"}
    #End of setup, filter config
   gash_interpreter
    
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true" } {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"}    {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"}   {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"}   {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"}   {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
     
    gash_interpreter      
    ##########################################################################################################################################
    #### 1st part - Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP
    ########################################################################################################################################## 
    
    set description [boxifyText "Step 1 - Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP"]
    log_msg INFO "\n$description \n"
    
    log_msg INFO "verification of streams with padding without any RP setup"
    log_msg INFO "--------------------------------------------"
  

  if {$opt(quick) != "true"} {
    #start stream check to webserver
    foreach stream $streamIdList {
        log_msg INFO "Starting Ixia stream $stream"
        filterTCAM_ixStartTraffic $stream -direction ingress

        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }
        
        log_msg INFO "Stoping Ixia stream $stream"
        filterTCAM_ixStopTraffic $stream -direction ingress
        after 1000
    }
    RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    log_msg INFO "--------------------------------------------\n"
 }

    set description [boxifyText "Configure destinations with $opt(HT) health test defined"]
    log_msg INFO "\n$description"
    #CLI and SNMP methods
       
    #Create destinations
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
     
     
    #if CLI if SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router Base"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp router $opt(RProuter)"        
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    } elseif {$method == "SNMP"} { 
         #set r [Dut-$dut3 setTFilterRPRowStatus wccp createAndGo]
          #   set testResultFlag [RP_CompareOutputString "noError" $r] 
        set r [Dut-$dut3 setTFilterRPVrtrId wccp 1 ]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFilterRPAdminState wccp 2]
            set testResultFlag [RP_CompareOutputString "noError" $r]                   
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]            
        if {$opt(HT)== "ping"} {
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
        } else {
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]                
        }
        if {$opt(RProuter) != "Base"} { 
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
        }
        set testResultFlag [RP_CompareOutputString "noError" $r]
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest1Addr] inService
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] inService
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService
        
    }    
        
    cliCne Dut-$dut3 "/configure filter log 101 destination memory 5000"
    cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 entry 1 log 101"
    
    
gash_interpreter    
    Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-setup.cfg" -extendedTimeout 60  -extendedMatchString "#"
    Dut-$dut3 sendCliCommand "/admin save detail $config_dir/Dut-$dut3-setup_detail.cfg" -extendedTimeout 60  -extendedMatchString "#"
    
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp no destination [ipConvert $family $dest3Addr]"
    } else {
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] destroy]
        set testResultFlag [RP_CompareOutputString "noError" $r]            
    }
    
  
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
        
    #check active dests
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    log_msg INFO "\n"
    
    
    #set streamDestBit  for stremas with IP options / hop by hop
    set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]  
    
#quick    
#if { 0 } {   

   log_msg INFO "Configured traffic stream bits: $streamDestBit"
    log_msg INFO "Verification of streams, also with Ip options"
 
 
 
    #verification of streams ingress
    log_msg INFO "verification of streams with RP setup - active dest [ipConvert $family $dest1Addr]"
    log_msg INFO "----------------------------------------------------------------------------------"
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit $streamIdList dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
    if {$IngrEgr == "true"} {
        #verification egres traffic
        RP_verifyTrafficFlowCheck $streamDestBit $streamIdList dest1 -direction egress
    }
    

    log_msg INFO "1 stream running on background"
    log_msg INFO "--------------------------------------------\n"
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    log_msg INFO "verification with RP setup - destinations will be unreachable"
    log_msg INFO "--------------------------------------------------------------"
    
    gash_interpreter
    #need to deactivate destinations before ixia streams change
    if {$opt(HT) != "ping" } {
        log_msg INFO "Deconfigure remote subnets to make destinations unreachable"
        RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method subnet 
        RP_deact_dest dest2 -dest2RC $opt(dest2RC) -method subnet
        RP_routeCheck del [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
    } else {
        log_msg INFO "Shutdown destinations to be unreachable"
        RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method dest_interface
        RP_deact_dest dest2 -dest2RC $opt(dest2RC) -method dest_interface
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC) -method negative
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest2RC) -method negative
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
    }
    
    #check that dest are unreachable
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp 0.0.0.0 -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp None -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT) 
    log_msg INFO "\n"
    
    #check action forward - no active dest is reachable
    log_msg INFO "Verification of action forward - no active destinations"
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } 
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            

    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"
    
    #change of streams - no Ip options
    set description [boxifyText "configuration of streams without Ip options/Hop_by_hop with RP setup"]
    log_msg INFO "\n$description"
    set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
    RP_set_dut
    
    #set streamDestBit for stremas without IP options / hop by hop
    set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) -IP_options false]    
    log_msg INFO "Configured traffic stream bits: $streamDestBit"
     
    #let 1 background stream running
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    log_msg INFO "Destinations will be reachable again - [ipConvert $family $dest1Addr] should be active again"
    log_msg INFO "Adding remote subnets to activate destinations"
    RP_act_dest dest1 -dest1RC $opt(dest1RC)
    after 1000
    RP_act_dest dest2 -dest2RC $opt(dest2RC)
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    after 1000
    
    #check active dests
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    log_msg INFO "\n"
    
        
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if {$opt(HT) == "ping"} { 
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
        }
        log_msg INFO "\n"
    }
    # unicast has some packet loss
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    log_msg INFO "verification of streams without Ip options/Hop_by_hop with RP setup - active dest [ipConvert $family $dest1Addr]"
    log_msg INFO "----------------------------------------------------------------------------------------------------------------"

    log_msg INFO "Traffic verification"
         if {[RP_verifyTrafficFlow $streamDestBit $streamIdList dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    if {$IngrEgr == "true"} {
        #verification egres traffic
        RP_verifyTrafficFlowCheck $streamDestBit $streamIdList dest1 -direction egress
    }
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    log_msg INFO "--------------------------------------------------------------\n"
    log_msg INFO "1 stream is running on background"
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    
    log_msg INFO "\Deletion of Health tests - active destination [ipConvert $family $dest1Addr]"
    # delete test - check Active dest are active without health test
    
    # CLI - SNMP
    set method [RP_lrandom "CLI SNMP"]
    log_msg INFO "Deconfigure $opt(HT) health test from destinations"
    
    if {$method == "CLI"} {
        if { $opt(HT) == "ping" } {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no ping-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no ping-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        } elseif { $opt(HT) == "unicast" } {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no unicast-rt-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no unicast-rt-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        }
    } else {
        if { $opt(HT) == "ping" } {
            set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] destroy]
                set testResultFlag [RP_CompareOutputString "noError" $r]
            set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] destroy]
                set testResultFlag [RP_CompareOutputString "noError" $r]                
        } elseif { $opt(HT) == "unicast" } {
            set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] destroy]
                set testResultFlag [RP_CompareOutputString "noError" $r]
            set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] destroy]
                set testResultFlag [RP_CompareOutputString "noError" $r]        
        }   
    }     
        
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
     
    #check active dests
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] None $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] None $opt(HT) 
      
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"

    #set another Router , create HTs, verify no active HT and then set required router for smooth run
    if { ($opt(dest1RC) != "GRT" &&  $opt(dest2RC) != "GRT") && ($opt(dest1RC) == $opt(dest2RC)) }  { 
        log_msg INFO "1 stream is running on background"
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set stats1 [RP_CollectStats 1]
        filterTCAM_ixStartTraffic 1 -direction ingress
        log_msg INFO "Set incorrect Router within RP setup ... No active destination is expected"
        
        #CLI - SNMP
        set method [RP_lrandom "CLI SNMP"]
        if {$method == "CLI"} {
            set cmd "/configure filter redirect-policy wccp router Base"   
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            if { $opt(HT) == "ping" } {
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] ping-test"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] ping-test"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            } elseif { $opt(HT) == "unicast" } {
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] unicast-rt-test"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] unicast-rt-test"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            }
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1 ]
            set testResultFlag [RP_CompareOutputString "noError" $r]
    
            if {$opt(HT)== "ping"} {
                    set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                        set testResultFlag [RP_CompareOutputString "noError" $r]
                    set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                        set testResultFlag [RP_CompareOutputString "noError" $r]
            } else {
                    set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                        set testResultFlag [RP_CompareOutputString "noError" $r]
                    set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                        set testResultFlag [RP_CompareOutputString "noError" $r]
            }              
        }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
        
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp 0.0.0.0 -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp None -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        # Check if Last Action for test is: disable
        RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT)    
        RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT)
        
        #check action forward - no active dest is reachable
        log_msg INFO "Verification of action forward - no active destinations"
        log_msg INFO "Check all packets should be forwarded to Ixia webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
                } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }
           
                
        filterTCAM_ixStopTraffic 1 -direction ingress
        set stats2 [RP_CollectStats 2]
        #:if {$opt(HT) != "ping"} { RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
       
    }   
    #CLI - SNMP   
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    } else {
        if {$opt(RProuter) != "Base"} { 
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
        }
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    
    if { ($opt(dest1RC) == "GRT" &&  $opt(dest2RC) == "GRT") }  { 
        #CLI - SNMP 
        set method [RP_lrandom "CLI SNMP"]
        log_msg INFO "Configure Health tests again - check active dest"
        if {$method == "CLI" } {
            if { $opt(HT) == "ping" } {
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] ping-test"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] ping-test"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            } elseif { $opt(HT) == "unicast" } {
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] unicast-rt-test"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] unicast-rt-test"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            }
        } else {
            if {$opt(HT)== "ping"} {
                    set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                        set testResultFlag [RP_CompareOutputString "noError" $r]
                    set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                        set testResultFlag [RP_CompareOutputString "noError" $r]
            } else {
                    set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                        set testResultFlag [RP_CompareOutputString "noError" $r]
                    set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                        set testResultFlag [RP_CompareOutputString "noError" $r]
            }              
        }
    }
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
        
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr]  -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
    
    #let 1 background stream running 
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    log_msg INFO "Traffic verification"
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}

    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }     
     
     
    #delete RP
    log_msg INFO "Deleting RP destinations and verification"
    
    #CLI or SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmd "/configure filter redirect-policy wccp no destination [ipConvert $family $dest1Addr]"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set cmd "/configure filter redirect-policy wccp no destination [ipConvert $family $dest2Addr]"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
    } else {
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] destroy]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] destroy]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    
    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]

    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp 0.0.0.0 -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp None  -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] None $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] None $opt(HT)
    
    #CLI or SNMP
    log_msg INFO "Deleting of applied RP - should be forbidden"
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmd "/configure filter no redirect-policy wccp"
        set r1 [cookCliData [Dut-C sendCliCommand $cmd]]      
        if { [regexp "Cannot delete redirect policy because it is in use" $r1] == 0 } {
            log_msg ERROR "unexpected behavior - Rp can not be deleted when i tit in use"; set Result "FAILED"
        }
    } else {
        set r [Dut-$dut3 setTFilterRPRowStatus wccp destroy]
        set testResultFlag [RP_CompareOutputString "wrongValue" $r]
    }
    
    #CLI or SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        log_msg INFO "Change filter action to forward"        
        #cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward redirect-policy wccp"
        cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward"
        if {$IngrEgr == "true"} {
            cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 3 create action forward" 
        }
        log_msg INFO "Deleting of non applied RP"
        set cmd "/configure filter no redirect-policy wccp"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" 
            } else {log_msg INFO "RP deconfigured successfully \n"}
    } else {
        log_msg INFO "Change filter action to forward"  
        set r [Dut-$dut3 setT[getVar3 $filterType]FilterParamsForwardRedPlcy 100 1 ""]
        if {$IngrEgr == "true"} {
            set r [Dut-$dut3 setT[getVar3 $filterType]FilterParamsForwardRedPlcy 100 3 ""]
        }
        set testResultFlag [RP_CompareOutputString "noError" $r]
        log_msg INFO "Deleting of non applied RP"
        set r [Dut-$dut3 setTFilterRPRowStatus wccp destroy]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    
    log_msg INFO "Verification of action forward - no RP"
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    log_msg INFO "Traffic verification"
        if {[RP_verifyTrafficFlow $streamDestBit 1 webserver] != "OK"} {set Result "FAILED"}
        
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"
     
        
    ##########################################################################################################################################
    #### 2nd part - added 3rd direct destination - check priorities, actions  
    ##########################################################################################################################################

    set description [boxifyText "Step 2 - Added 3rd direct destination - check priorities, actions of destinations with HTs"]
    log_msg INFO "\n$description \n"
    
    gash_interpreter
     #if CLI if SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router Base"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp router $opt(RProuter)"        
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    } elseif {$method == "SNMP"} { 
        set r [Dut-$dut3 setTFilterRPRowStatus wccp createAndGo]
             set testResultFlag [RP_CompareOutputString "noError" $r] 
        set r [Dut-$dut3 setTFilterRPVrtrId wccp 1 ]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFilterRPAdminState wccp 2]
            set testResultFlag [RP_CompareOutputString "noError" $r]                   
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]            
        if {$opt(HT)== "ping"} {
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
        } else {
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]                
        }
        if {$opt(RProuter) != "Base"} { 
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
        }
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest1Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        
    }    
    
    set method [RP_lrandom "CLI SNMP"]
    log_msg INFO "Change filter action to forward redirect-policy"  
    if {$method == "CLI"} {         
        cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward redirect-policy wccp"
        if {$IngrEgr == "true"} {
            cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 3 create action forward redirect-policy wccp" 
        }
    } else {   
        set r [Dut-$dut3 setT[getVar3 $filterType]FilterParamsForwardRedPlcy 100 1 wccp]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        if {$IngrEgr == "true"} {
            set r [Dut-$dut3 setT[getVar3 $filterType]FilterParamsForwardRedPlcy 100 3 wccp]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        }
    }
    
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
        

    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] priority 120"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"
        foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }    
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] outOfService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest3Addr] 120]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    
    RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    
    #check active dests
    log_msg INFO "\nDest 3 should be active now:"
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
         
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]   
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    #check action redirect - active dest 3 is reachable with higher priority 120
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 3"
        if {[RP_verifyDest "dest3" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest3: PASSED"
        } else { log_msg ERROR " => Traffic to destination 3: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
    
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"
        
        
    #change router Base, change priority of dest2 and verify after router is set back into working instance
    if { ($opt(dest1RC) != "GRT" &&  $opt(dest2RC) != "GRT") && ($opt(dest1RC) == $opt(dest2RC)) }  { 
        #CLI or SNMP
        set method [RP_lrandom "CLI SNMP"]
        if {$method == "CLI"} {
            set cmd "/configure filter redirect-policy wccp router Base"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        }
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
        
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp 0.0.0.0 -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp None -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        # Check if Last Action for test is: enable
        RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest3Addr] disable $opt(HT) 
        
        #CLI or SNMP
        set method [RP_lrandom "CLI SNMP"]
        if {$method == "CLI"} {
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 220"]
            set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        } else {
            set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest2Addr] 220]
            set testResultFlag [RP_CompareOutputString "noError" $r]
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        }
    }  else {
        #CLI or SNMP
        set method [RP_lrandom "CLI SNMP"]
        if {$method == "CLI"} {
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 220"]
        } else {
            set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest2Addr] 220]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        }        
    }         
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
         
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]   
    filterTCAM_ixStartTraffic 1 -direction ingress 
    
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 2"
        if {[RP_verifyDest "dest2" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest2: PASSED"
        } else { log_msg ERROR " => Traffic to destination 2: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
    
    
    #shut dest2
    #dest3 should be active
    log_msg INFO "Shutdown the active dest2"
    #CLI or SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] shutdown"]
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] outOfService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)    
            
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 3"
        if {[RP_verifyDest "dest3" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest3: PASSED"
        } else { log_msg ERROR " => Traffic to destination 3: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
            
                 
    #decrease prior of dest3, dest1 should be active
    #CLI or SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] priority 90"]
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest3Addr] 90]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }    
    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)      
            
   if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 1"
        if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
        } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
            
            
    #decrease prio od dest2, and up dest2
    #CLI or SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] priority 90"]
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] no shutdown"]
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest2Addr] 90]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
        
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 1"
        if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
        } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
    
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {    
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] priority 100"]
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] priority 100"]
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest2Addr] 100]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest3Addr] 100]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
     
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"
    
    
    
    ##########################################################################################################################################
    #### 3rd part - verify priorities, actions without HTs 
    ##########################################################################################################################################
    
    set description [boxifyText "Step 3 - check priorities, actions of destinations without HTs"]
    log_msg INFO "\n$description \n"
    log_msg INFO "deconfigure HTs, dest 3 should be active"
    
    #CLI or SNMP 
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
           
        if {$opt(HT)== "ping"} {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no ping-test"
        } else { 
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no unicast-rt-test"
        }
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }   
        if {$opt(HT)== "ping"} {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no ping-test"
        } else {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no unicast-rt-test"
        }
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
        if {$opt(HT)== "ping"} {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no ping-test"
        } else {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no unicast-rt-test"
        }
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] priority 120"]
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"] 
    } else {
         if {$opt(HT)== "ping"} {
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] destroy]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] destroy]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] destroy]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
        } else {
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] destroy]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] destroy]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] destroy]
                    set testResultFlag [RP_CompareOutputString "noError" $r]                
        }
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest3Addr] 120]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        
    }
    
    
    
    
    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
        
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "\n"
      
     RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest3] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    log_msg INFO "\n" 
    
    #change router Base - no HT -so active dest stay active, change priority of dest2 and verify after router is set back into working instance
    if { ($opt(dest1RC) != "GRT" &&  $opt(dest2RC) != "GRT") && ($opt(dest1RC) == $opt(dest2RC)) }  { 
        #CLI or SNMP
        set method [RP_lrandom "CLI SNMP"]
        if {$method == "CLI"} {
            set cmd "/configure filter redirect-policy wccp router Base"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        }
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
        
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
          
        #CLI or SNMP 
        set method [RP_lrandom "CLI SNMP"]
        if {$method == "CLI"} {
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 220"]
            set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        } else {
            set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest2Addr] 220]
            set testResultFlag [RP_CompareOutputString "noError" $r]
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        }
    }  else {
        set method [RP_lrandom "CLI SNMP"]
        if {$method == "CLI"} {
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 220"]
        } else {
            set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest2Addr] 220]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        }
    }   
    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
     
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]   
    filterTCAM_ixStartTraffic 1 -direction ingress
 
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 2"
        if {[RP_verifyDest "dest2" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest2: PASSED"
        } else { log_msg ERROR " => Traffic to destination 2: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
    
    
    #shut dest2
    log_msg INFO "dest3 should be active"
    
    #CLI or SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] shutdown"]
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] outOfService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
          
            
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 3"
        if {[RP_verifyDest "dest3" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest3: PASSED"
        } else { log_msg ERROR " => Traffic to destination 3: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
            
                 
    log_msg INFO "Decrease priority of dest3, dest1 should be active"
    #CLI or SNMP 
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] priority 90"]
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest3Addr] 90]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
      

    if { [lindex $streamDestBit 0] == "x" } {
    log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
    if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
    } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "1" } {
    log_msg INFO "Check all packets should be forwarded to destination 1"
    if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
    } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "0" } {
    log_msg INFO "Check all packets should be forwarded to webserver"
    if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
    } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
            
            
    log_msg INFO "decrease prio od dest2, and up dest2"
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] priority 90"]
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] no shutdown"]
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest2Addr] 90]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)

    if { [lindex $streamDestBit 0] == "x" } {
    log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
    if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
    } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "1" } {
    log_msg INFO "Check all packets should be forwarded to destination 1"
    if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
    } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "0" } {
    log_msg INFO "Check all packets should be forwarded to webserver"
    if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
    } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }

    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] priority 100"]
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] priority 100"]
    } else {
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest2Addr] 100]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest3Addr] 100]
        set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
 
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""
        if {$opt(HT)== "ping"} {
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] ping-test"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] ping-test"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test"
        } else {
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] unicast-rt-test"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] unicast-rt-test"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] unicast-rt-test"
        }
        foreach cmd $cmdList {
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        }
    } else {
        if {$opt(HT)== "ping"} {
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
        } else {
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]                
        }

    }    
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"  
    
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
    
 
 
#end of quick 
#}     

    
    



    # if {$itfBind == "subsap"} { 
        # log_msg INFO "Clear hosts"
        # if {$filterType == "IPv6"} { Dut-$dut3 sendCliCommand "/clear service id 1 dhcp6 lease-state all" }
        # if {$filterType == "IP"} { Dut-$dut3 sendCliCommand "/clear service id 1 dhcp lease-state all" }
    # } 
    log_msg INFO "Clearing filter config"  
    gash_interpreter    
        
    if {[RP_filterDeconfig $setupType $opt(svcType) $svc1 $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) -IngrEgr $IngrEgr] != "OK" } {set Result "FAILED"}
    set r [cookCliData [Dut-$dut3 sendCliCommand "/configure filter"]]
    set r [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    log_msg DEBUG "/config filter info: \n$r"
    
        #check for memory leaks
        log_msg INFO "Check for memory leaks"
        set check [filterScale_memLeakChecks $dut3 check -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}]
        if {$check != "OK"} {
            log_msg ERROR "Memory leak detected after cleanup, found $check"
            set Result "FAILED"
        }
        if {[Dut-$dut3 cget -redundantSystem] != "false"} {
            set check_stb [filterScale_memLeakChecks $dut3 check -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}]
            if {$check_stb != "OK"} {
                log_msg ERROR "Memory leak detected after cleanup on standby CPM, found $check_stb"
                set Result "FAILED"
            }
        }

    Dut-$dut3 configure -cli_timeout $CliTim
    Dut-$dut3 configure -timeout $Tim
        
gash_interpreter
    
    # need to delete host on sla profile before execution of config
    # clear host in order to be able assign filter to sla-profile - otherwise you get snmp error: SLA profile is in use by one or more active subscribers
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }

    after 2000
    log_msg INFO "=> Executing saved config file $config_dir/Dut-$dut3-setup.cfg after cleaning up"
        set CLI [ cookCliData [ Dut-$dut3 sendCliCommand "exec $config_dir/Dut-$dut3-setup.cfg" -extendedTimeout 300  -extendedMatchString "#" ]]
        set SC [ string first "Executed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Exec of $config_dir/Dut-$dut3-setup.cfg FAILED - Was $SC And Should Be >= 1"
            set Result FAILED
        }
        Dut-$dut3 sendCliCommand "exit all"
 
     
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    after 2000
    
    
    #recreation host on sla profile after execution of config
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        filter_subinsert_radius_recreateHost $subhostIp $srcMac_13 -numStreams $numStreams -hostType $hostType -slaName sla2 -hostSucceed true -clearFirst true
    }

    #binding filters via proc - to ensure that host will be on sla1
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    #egress filter
    if {$IngrEgr == "true"} {
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
    }
    
    
  log_msg DEBUG "\n\n\n EXTENSIVE part"  
  
  gash_interpreter  
  if {$opt(quick) != "true"} {  
    ##gash_interpreter
    ##########################################################################################################################################
    #### 4th part - destinations unreachable  + ICMP packets checks + various dest's shutdowns"
    ##########################################################################################################################################
    
    set description [boxifyText "Step 4 - destinations unreachable + ICMP packets checks + various dest's shutdowns"]
    log_msg INFO "\n$description \n"    

     
     
    #gash_interpreter
     
    #try on CEth1 interface various IPs
    ##################################################################################   
    #dest is systemIP - CPM should drop it, if it is TCP,  UDP is forwarded !!! - stress CPm test needed

    set description [boxifyText "Verify system ip [ipConvert $family $C_systemip] as RP destination:"]
    log_msg INFO "\n$description"

    #CLI or SNMP
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp router Base" ]
    if {$opt(HT)== "ping"} {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $C_systemip] create ping-test"
    } else {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $C_systemip] create unicast-rt-test"
    }
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $C_systemip] priority 140"]
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $C_systemip] no shutdown"]
       
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $C_systemip]]] wccp -method [RP_lrandom "CLI SNMP"]   
    after 2000
    #check active dests
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $C_systemip] -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $C_systemip] -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $C_systemip] enable $opt(HT) 
    if {$opt(RProuter)!= "Base"} {
        RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT)
        RP_LastActionCheck [ipConvert $family $dest3Addr] disable $opt(HT)
    } else {
        RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
        RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT)
    }    
     
    #gash_interpreter 
    
    if {$filterType == "IP"} {
        set Stream 1
        set destToVerify "none"
        if { ( ($iom3 == "false") && ($case == "positive") ) || ($svcType == "L2Service")} {set destToVerify "webserver"}
    } else {
        set Stream 4; 
        set destToVerify "none"
        if { ( ($iom3 == "false") && ($case == "positive") ) || ($svcType == "L2Service")} {set destToVerify "webserver"}
    }
    #possible IPv6 issue 
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set cpmStats1 [RP_CollectCPMStats 1]
    set stats1 [RP_CollectStats 1]   
    
    set cpmCount1A  -1
    set cpmCount1N  -1
    regexp -line IP_EXP_TCP_A.* [lindex $cpmStats1 1] match
    set cpmCount1A [lindex $match 2]
    regexp -line IP_EXP_TCP_N.* [lindex $cpmStats1 1] match
    set cpmCount1N [lindex $match 2]
    filterTCAM_ixStartTraffic $Stream -direction ingress
  
    #check action redirect - active dest 3 is reachable
    log_msg INFO "Check all packets are dropped on CPM"
    if {[RP_verifyDest $destToVerify $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
    } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }  
    
    filterTCAM_ixStopTraffic $Stream -direction ingress
    set cpmStats2 [RP_CollectCPMStats 2]
    set stats2 [RP_CollectStats 2]  
    
    set hostCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsIngressHitCount 100 1]
    set cpmCount2A  -1
    set cpmCount2N  -1
    regexp -line IP_EXP_TCP_A.* [ lindex $cpmStats2 1] match
    set cpmCount2A [lindex $match 2]
    regexp -line IP_EXP_TCP_N.* [ lindex $cpmStats2 1] match
    set cpmCount2N [lindex $match 2]
    
    if {$destToVerify == "webserver"} {
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
            RP_PrintCPMStats $cpmStats1 $cpmStats2
        }
    } else {
        if { ($hostCount == [expr $cpmCount2A -$cpmCount1A]) || ($hostCount == [expr $cpmCount2N -$cpmCount1N])} {
                log_msg INFO "=> Traffic: PASSED , all packets dropped on CPM"
                log_msg INFO "hostCount= $hostCount, initialCpmCountA=$cpmCount1A, finalCpmCount=$cpmCount2A,  deltaA= [expr $cpmCount2A -$cpmCount1A], initialCpmCountN=$cpmCount1N, finalCpmCount=$cpmCount2N,  deltaN= [expr $cpmCount2N -$cpmCount1N] "
        } else { 
             log_msg ERROR "Traffic: FAILED, not all packets were dropped on CPM"
             log_msg ERROR "hostCount= $hostCount, initialCpmCountA=$cpmCount1A, finalCpmCount=$cpmCount2A,  deltaA= [expr $cpmCount2A -$cpmCount1A], initialCpmCountN=$cpmCount1N, finalCpmCount=$cpmCount2N,  deltaN= [expr $cpmCount2N -$cpmCount1N] "
             set Result "FAILED" 
        } 
    }
    
    #CLI or SNMP
    set cmd "/configure filter redirect-policy wccp no destination [ipConvert $family $C_systemip]"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT) 
    

    if {$opt(dest3RC) == "VRF1"} {
        set description [boxifyText "Verify VRF1 loopback [ipConvert $family $loopBackAddrVrf1] as RP destination:"]
        log_msg INFO "\n$description"
        
        #CLI or SNMP
        if {$opt(HT)== "ping"} {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $loopBackAddrVrf1] create ping-test"
        } else {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $loopBackAddrVrf1] create unicast-rt-test"
        }
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $loopBackAddrVrf1] priority 140"]
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $loopBackAddrVrf1] no shutdown"]
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }    
         
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $loopBackAddrVrf1]]] wccp -method [RP_lrandom "CLI SNMP"]   
        #check active dests
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $loopBackAddrVrf1] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $loopBackAddrVrf1] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        RP_LastActionCheck [ipConvert $family $loopBackAddrVrf1] enable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
        RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT)
        log_msg INFO "\n"
        
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set cpmStats1 [RP_CollectCPMStats 1]
        set stats1 [RP_CollectStats 1]   
        
        set cpmCount1A  -1
        set cpmCount1N  -1
        regexp -line IP_EXP_TCP_A.* [lindex $cpmStats1 1] match
        set cpmCount1A [lindex $match 2]
        regexp -line IP_EXP_TCP_N.* [lindex $cpmStats1 1] match
        set cpmCount1N [lindex $match 2]
        filterTCAM_ixStartTraffic $Stream -direction ingress
      
            # #check action redirect - active dest 3 is reachable
        log_msg INFO "Check all packets are dropped on CPM"
        if {[RP_verifyDest $destToVerify $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }  
        
        filterTCAM_ixStopTraffic $Stream -direction ingress
        set cpmStats2 [RP_CollectCPMStats 2]
        set stats2 [RP_CollectStats 2]  
        
        set hostCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsIngressHitCount 100 1]
        set cpmCount2A  -1
        set cpmCount2N  -1
        regexp -line IP_EXP_TCP_A.* [ lindex $cpmStats2 1] match
        set cpmCount2A [lindex $match 2]
        regexp -line IP_EXP_TCP_N.* [ lindex $cpmStats2 1] match
        set cpmCount2N [lindex $match 2]
        
        if {$destToVerify == "webserver"} {
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2
                RP_PrintCPMStats $cpmStats1 $cpmStats2
            }
        } else {
            if { ($hostCount == [expr $cpmCount2A -$cpmCount1A]) || ($hostCount == [expr $cpmCount2N -$cpmCount1N])} {
                    log_msg INFO "=> Traffic: PASSED , all packets dropped on CPM"
                    log_msg INFO "hostCount= $hostCount, initialCpmCountA=$cpmCount1A, finalCpmCount=$cpmCount2A,  deltaA= [expr $cpmCount2A -$cpmCount1A], initialCpmCountN=$cpmCount1N, finalCpmCount=$cpmCount2N,  deltaN= [expr $cpmCount2N -$cpmCount1N] "
            } else { 
                 log_msg ERROR "Traffic: FAILED, not all packets were dropped on CPM"
                 log_msg ERROR "hostCount= $hostCount, initialCpmCountA=$cpmCount1A, finalCpmCount=$cpmCount2A,  deltaA= [expr $cpmCount2A -$cpmCount1A], initialCpmCountN=$cpmCount1N, finalCpmCount=$cpmCount2N,  deltaN= [expr $cpmCount2N -$cpmCount1N] "
                 set Result "FAILED" 
            } 
        }        
    
        set cmd "/configure filter redirect-policy wccp no destination [ipConvert $family $loopBackAddrVrf1]"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
    
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
        RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT) 
        
        
        
    } elseif {$opt(dest3RC) == "VRF2"} {
        set description [boxifyText "Verify VRF2 loopback [ipConvert $family $loopBackAddrVrf2] as RP destination:"]
        log_msg INFO "\n$description"
        #SNMP or CLI
        if {$opt(HT)== "ping"} {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $loopBackAddrVrf2] create ping-test"
        } else {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $loopBackAddrVrf2] create unicast-rt-test"
        }
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $loopBackAddrVrf2] priority 140"]
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $loopBackAddrVrf2] no shutdown"]
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
          
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $loopBackAddrVrf2]]] wccp -method [RP_lrandom "CLI SNMP"]   

        #check active dests
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $loopBackAddrVrf2] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $loopBackAddrVrf2] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        RP_LastActionCheck [ipConvert $family $loopBackAddrVrf2] enable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
        RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT)    
        log_msg INFO "\n"
        
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set cpmStats1 [RP_CollectCPMStats 1]
        set stats1 [RP_CollectStats 1]   
        
        set cpmCount1A  -1
        set cpmCount1N  -1
        regexp -line IP_EXP_TCP_A.* [lindex $cpmStats1 1] match
        set cpmCount1A [lindex $match 2]
        regexp -line IP_EXP_TCP_N.* [lindex $cpmStats1 1] match
        set cpmCount1N [lindex $match 2]
        filterTCAM_ixStartTraffic $Stream -direction ingress
      
            # #check action redirect - active dest 3 is reachable
        log_msg INFO "Check all packets are dropped on CPM"
        if {[RP_verifyDest $destToVerify $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }  
        
        filterTCAM_ixStopTraffic $Stream -direction ingress
        set cpmStats2 [RP_CollectCPMStats 2]
        set stats2 [RP_CollectStats 2]  
        
        set hostCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsIngressHitCount 100 1]
        set cpmCount2A  -1
        set cpmCount2N  -1
        regexp -line IP_EXP_TCP_A.* [ lindex $cpmStats2 1] match
        set cpmCount2A [lindex $match 2]
        regexp -line IP_EXP_TCP_N.* [ lindex $cpmStats2 1] match
        set cpmCount2N [lindex $match 2]
        
        if {$destToVerify == "webserver"} {
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2
                RP_PrintCPMStats $cpmStats1 $cpmStats2
            }
        } else {
            if { ($hostCount == [expr $cpmCount2A -$cpmCount1A]) || ($hostCount == [expr $cpmCount2N -$cpmCount1N])} {
                    log_msg INFO "=> Traffic: PASSED , all packets dropped on CPM"
                    log_msg INFO "hostCount= $hostCount, initialCpmCountA=$cpmCount1A, finalCpmCount=$cpmCount2A,  deltaA= [expr $cpmCount2A -$cpmCount1A], initialCpmCountN=$cpmCount1N, finalCpmCount=$cpmCount2N,  deltaN= [expr $cpmCount2N -$cpmCount1N] "
            } else { 
                 log_msg ERROR "Traffic: FAILED, not all packets were dropped on CPM"
                 log_msg ERROR "hostCount= $hostCount, initialCpmCountA=$cpmCount1A, finalCpmCount=$cpmCount2A,  deltaA= [expr $cpmCount2A -$cpmCount1A], initialCpmCountN=$cpmCount1N, finalCpmCount=$cpmCount2N,  deltaN= [expr $cpmCount2N -$cpmCount1N] "
                 set Result "FAILED" 
            } 
        }        
    
        set cmd "/configure filter redirect-policy wccp no destination [ipConvert $family $loopBackAddrVrf2]"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
    
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
        RP_LastActionCheck [ipConvert $family $dest3Addr] enable $opt(HT) 
    }
        
        
        ##################################################################################
        #  dest is 80.1.0.0
        #find and change Ip address  --- > also linux routing
        
        
        # set dest3AddrTmp   "80.1.0.0"
        # set destMaskTmp    14      
        # set CEth1_AddrTmp  "80.1.0.1"
        # set subnetMaskTmp  14
        # set description [boxifyText "Verify subnet type IP [ipConvert $family $dest3AddrTmp] as RP destination:"]
        # log_msg INFO "\n$description"
        
        # #config linux
        # if {[RP_linuxRoutes -dest3Addr $dest3AddrTmp -destMask $destMaskTmp -CEth1_Addr $CEth1_AddrTmp] != "OK"} {set Result "Failed"}
        
        # #config interface on dut3
        # if {$opt(dest3RC)== "GRT"} {
            # set r1 [cliCne Dut-$dut3 "/configure router interface CEth1_intf [string tolower [getVar2 $filterType]] no address [ipConvert $family $CEth1_Addr]/[RP_maskConvert $family $subnetMask]" ]
            # set r1 [cliCne Dut-$dut3 "/configure router interface CEth1_intf [string tolower [getVar2 $filterType]] address [ipConvert $family $CEth1_AddrTmp]/[RP_maskConvert $family $subnetMaskTmp]" ]
            # if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        # }
        # if {$opt(dest3RC)== "VRF1"} {
            # set r1 [cliCne Dut-$dut3 "/configure service vprn $vprnId interface CEth1_intf [string tolower [getVar2 $filterType]] no address [ipConvert $family $CEth1_Addr]/[RP_maskConvert $family $subnetMask]" ]
            # set r1 [cliCne Dut-$dut3 "/configure service vprn $vprnId interface CEth1_intf [string tolower [getVar2 $filterType]] address [ipConvert $family $CEth1_AddrTmp]/[RP_maskConvert $family $subnetMaskTmp]" ]
            # if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        # }
        # if {$opt(dest3RC)== "VRF2"} {
            # set r1 [cliCne Dut-$dut3 "/configure service vprn $vprn2Id interface CEth1_intf [string tolower [getVar2 $filterType]] no address [ipConvert $family $CEth1_Addr]/[RP_maskConvert $family $subnetMask]" ]
            # set r1 [cliCne Dut-$dut3 "/configure service vprn $vprn2Id interface CEth1_intf [string tolower [getVar2 $filterType]] address [ipConvert $family $CEth1_AddrTmp]/[RP_maskConvert $family $subnetMaskTmp]" ]
            # if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        # }
        
       #     if {$opt(dest3support) == "true"} { 
           # if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
          #  }   
        
        # #config RP
        
        # if {$opt(HT)== "ping"} {
            # set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3AddrTmp] create ping-test"
        # } else {
            # set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3AddrTmp] create unicast-rt-test"
        # }
        # set r1 [cliCne Dut-$dut3 $cmd]
        # if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        # set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3AddrTmp] priority 160"]
        # set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3AddrTmp] no shutdown"]
        # #check of packets
        # # # Dut-C sendCliCommand "shell cpmqstats"
        # # # Dut-C sendCliCommand "shell pipShowPacketStats"
        # # # Dut-C sendCliCommand "shell cardcmd 1 distats"
        # # # Dut-C sendCliCommand "shell cardcmd 1 destats"
        # # # Dut-C sendCliCommand "shell cardcmd 1 dqstats"

        # after 1500
        # #check active dests
        # log_msg INFO "Verify the active destination via SNMP"
        # RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3AddrTmp] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # log_msg INFO "Verify the active destination via CLI"
        # RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3AddrTmp] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # # Check if Last Action for test is: enable
        # log_msg INFO "Verify the last action via SNMP"
        # RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3AddrTmp] enable $opt(HT)
        # log_msg INFO "Verify the last action via CLI"
        # RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3AddrTmp] Enable
        # log_msg INFO "\n"
        
        
        # RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        # filterTCAM_ixStartTraffic 1 -direction ingress
        # #:if {$opt(HT) != "ping"} { RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)}
        
       

        # #check action redirect - active dest 3 is reachable
        # if { [lindex $streamDestBit 0] == "x" } {
            # log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
            # if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
            # } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
        
        # } elseif { [lindex $streamDestBit 0] == "1" } {
            # log_msg INFO "Check all packets should be forwarded to destination 3"
            # if {[RP_verifyDest "dest3" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest3: PASSED"
            # } else { log_msg ERROR " => Traffic to destination 3: FAILED"; set Result "FAILED" }
            
        # } elseif { [lindex $streamDestBit 0] == "0" } {
            # log_msg INFO "Check all packets should be forwarded to webserver"
            # if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
            # } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
        # }
        
        # filterTCAM_ixStopTraffic 1 -direction ingress
        # RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
        # set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create no destination [ipConvert $family $dest3AddrTmp]" ]
        
        # if {[RP_linuxRoutes ] != "OK"} {set Result "Failed"}
        
        # #config interface on dut3
        # if {$opt(dest3RC)== "GRT"} {
            # set r1 [cliCne Dut-$dut3 "/configure router interface CEth1_intf [string tolower [getVar2 $filterType]] no address [ipConvert $family $CEth1_AddrTmp]/[RP_maskConvert $family $subnetMaskTmp]" ]
            # set r1 [cliCne Dut-$dut3 "/configure router interface CEth1_intf [string tolower [getVar2 $filterType]] address [ipConvert $family $CEth1_Addr]/[RP_maskConvert $family $subnetMask]" ]
            # if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        # }
        # if {$opt(dest3RC)== "VRF1"} {
            # set r1 [cliCne Dut-$dut3 "/configure service vprn $vprnId interface CEth1_intf [string tolower [getVar2 $filterType]] no address [ipConvert $family $CEth1_AddrTmp]/[RP_maskConvert $family $subnetMaskTmp]" ]
            # set r1 [cliCne Dut-$dut3 "/configure service vprn $vprnId interface CEth1_intf [string tolower [getVar2 $filterType]] address [ipConvert $family $CEth1_Addr]/[RP_maskConvert $family $subnetMask]" ]
            # if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        # }
        # if {$opt(dest3RC)== "VRF2"} {
            # set r1 [cliCne Dut-$dut3 "/configure service vprn $vprn2Id interface CEth1_intf [string tolower [getVar2 $filterType]] no address [ipConvert $family $CEth1_AddrTmp]/[RP_maskConvert $family $subnetMaskTmp]" ]
            # set r1 [cliCne Dut-$dut3 "/configure service vprn $vprn2Id interface CEth1_intf [string tolower [getVar2 $filterType]] address [ipConvert $family $CEth1_Addr]/[RP_maskConvert $family $subnetMask]" ]
            # if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        # }
        ##################################################################################
        #lets go to shutdown dests - 
        
       ###gash_interpreter
       
      
    
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] outOfService]
        set testResultFlag [RP_CompareOutputString "noError" $r]

        
        
        set description [boxifyText "Destination 3 with IP [ipConvert $family $dest3Addr] will be unreachable using various methods - verify ICMP packets"]
        log_msg INFO "\n$description"
        
        set method [RP_lrandom "CLI SNMP"]
        if {$method == "CLI"} {
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] shutdown" ] 
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] shutdown" ] 
            
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] priority 160"]
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"]
        } else {
            set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest1Addr] outOfService]
            set testResultFlag [RP_CompareOutputString "noError" $r]
            set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] outOfService]
            set testResultFlag [RP_CompareOutputString "noError" $r]
            set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest3Addr] 160]
            set testResultFlag [RP_CompareOutputString "noError" $r]
            set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
            set testResultFlag [RP_CompareOutputString "noError" $r]
            
        }
        
               
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
        
        #check active dests
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        log_msg INFO "Verify the last action via SNMP"
        RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
        log_msg INFO "Verify the last action via CLI"
        RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable
        log_msg INFO "\n" 
        if { $opt(HT) == "ping" } {
            set description [boxifyText "Testing ping-test parameters of destination 3 with IP [ipConvert $family $dest3Addr]"]
            log_msg INFO "\n$description"
            
            # method dest_interface
            RP_clearAllFilter $dut3 -filterType $filterType
            set stats1 [RP_CollectStats 1]
            filterTCAM_ixStartTraffic 1 -direction ingress
            
            log_msg INFO "Dest3 will be switched down."
            if {$opt(HT) == "ping"} {
                log_msg DEBUG "Verify the redirect time for default values of parameters: timeout = 1s, interval = 1s, drop count = 3, hold down time = 0s"
            }
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
            RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method dest_interface
            
                set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
                if {$opt(HT) == "ping"} {
                    if { (7000 > $redTime) && (2000 < $redTime) } {
                            log_msg INFO "Redirect time was: $redTime - OK"
                        } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
                } else {
                    if { (1000 > $redTime) } {
                            log_msg INFO "Redirect time was: $redTime - OK"
                        } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
                
                } 
                    
            filterTCAM_ixStopTraffic 1 -direction ingress       
            set stats2 [RP_CollectStats 2]   
                
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2 
                set Result "FAILED"
            }
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
            
            RP_act_dest dest3 -dest3RC $opt(dest3RC)
            RP_linuxRoutes
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
             
             
            ###gash_interpreter   
            # only for Ping test
            # Change timeout to 10s
            log_msg INFO "Change timeout to 10s for $opt(HT) health test"
            set method [RP_lrandom "CLI SNMP"]
            if {$method == "CLI"} {
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] shutdown"]
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test timeout 10"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] no shutdown"]
            } else {
                set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] outOfService]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTTimeout wccp [string tolower $family] [ipConvert $family $dest3Addr] 10]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
                set testResultFlag [RP_CompareOutputString "noError" $r]
            }

            # verify value of timeout
            set r [Dut-$dut3 getTFltrRPPingTTimeout "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "10"} {log_msg ERROR "Timeout not configured successfuly" ; set Result "FAILED"}

            #check active dests
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
            log_msg INFO "Verify the active destination via SNMP"
            RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            log_msg INFO "Verify the active destination via CLI"
            RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            # Check if Last Action for test is: enable
            log_msg INFO "Verify the last action via SNMP"
            RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
            log_msg INFO "Verify the last action via CLI"
            RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable

            RP_clearAllFilter $dut3 -filterType $filterType
            set stats1 [RP_CollectStats 1]
            filterTCAM_ixStartTraffic 1 -direction ingress

            log_msg INFO "Dest3 will be switched down. Verify the redirect time for timeout=10s :"
            log_msg DEBUG "timeout = 10s, interval = 1s, drop count = 3, hold down time = 0s"
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
            RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method dest_interface

            set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
            if { (20000 > $redTime) && (9000 < $redTime) } {
                log_msg INFO "Redirect time was: $redTime - OK"
            } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }


            filterTCAM_ixStopTraffic 1 -direction ingress        
            set stats2 [RP_CollectStats 2]   
                
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2 
                set Result "FAILED"
            }
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)

            RP_act_dest dest3 -dest3RC $opt(dest3RC)
            RP_linuxRoutes
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
             
             
             
             
             
            ###gash_interpreter
            # Change timeout to 1s, interval 1s, dropCount 8
            log_msg INFO "Change timeout to 1s, interval to 1s and dropCount to 8 for $opt(HT) health test"
            set method [RP_lrandom "CLI SNMP"]
            if {$method == "CLI"} {
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] shutdown"]
                set cmdList ""
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test timeout 1"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test interval 1"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test drop-count 8"
                foreach cmd $cmdList {
                    set r1 [cliCne Dut-$dut3 $cmd]
                    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
                }
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] no shutdown"]
            } else {
                set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] outOfService]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTTimeout wccp [string tolower $family] [ipConvert $family $dest3Addr] 1]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTInterval wccp [string tolower $family] [ipConvert $family $dest3Addr] 1]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTDropCount wccp [string tolower $family] [ipConvert $family $dest3Addr] 8]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
                set testResultFlag [RP_CompareOutputString "noError" $r]
            }
            
            # verify value of timeout
            set r [Dut-$dut3 getTFltrRPPingTTimeout "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "1"} {log_msg ERROR "Timeout not configured successfuly" ; set Result "FAILED"}
            set r [Dut-$dut3 getTFltrRPPingTInterval "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "1"} {log_msg ERROR "Interval not configured successfuly" ; set Result "FAILED"}
            set r [Dut-$dut3 getTFltrRPPingTDropCount "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "8"} {log_msg ERROR "DropCount not configured successfuly" ; set Result "FAILED"}          
               
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
            log_msg INFO "Verify the active destination via SNMP"
            RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            log_msg INFO "Verify the active destination via CLI"
            RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            # Check if Last Action for test is: enable
            log_msg INFO "Verify the last action via SNMP"
            RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
            log_msg INFO "Verify the last action via CLI"
            RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable
            
            
            RP_clearAllFilter $dut3 -filterType $filterType
            set stats1 [RP_CollectStats 1]
            filterTCAM_ixStartTraffic 1 -direction ingress
            
            log_msg INFO "Dest3 will be switched down. Verify the redirect time for timeout=10s :"
            log_msg DEBUG "timeout = 1s, interval = 1s, drop count = 8, hold down time = 0s"
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
            RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method dest_interface
            
                set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
                if { (14000 > $redTime) && (7000 < $redTime) } {
                        log_msg INFO "Redirect time was: $redTime - OK"
                    } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
         
            filterTCAM_ixStopTraffic 1 -direction ingress        
            set stats2 [RP_CollectStats 2]   
                
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2 
                set Result "FAILED"
            }
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
            
            RP_act_dest dest3 -dest3RC $opt(dest3RC)     
            RP_linuxRoutes
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
             
             
            ###gash_interpreter
            # Change timeout to 1s, interval 7s, dropCount 3, holdDown 20
            log_msg INFO "Change timeout to 1s, interval to 7s and dropCount to 3 and holdDown to 20 for $opt(HT) health test"
            set method [RP_lrandom "CLI SNMP"]
            if {$method == "CLI"} {   
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] shutdown"]
                set cmdList ""
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test timeout 1"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test interval 7"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test drop-count 3 hold-down 20"
                foreach cmd $cmdList {
                    set r1 [cliCne Dut-$dut3 $cmd]
                    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
                }
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] no shutdown"]
            } else {
                set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] outOfService]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTTimeout wccp [string tolower $family] [ipConvert $family $dest3Addr] 1]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTInterval wccp [string tolower $family] [ipConvert $family $dest3Addr] 7]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTDropCount wccp [string tolower $family] [ipConvert $family $dest3Addr] 3]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTHoldDown wccp [string tolower $family] [ipConvert $family $dest3Addr] 20]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
                set testResultFlag [RP_CompareOutputString "noError" $r]

            }
            # verify value of timeout
            set r [Dut-$dut3 getTFltrRPPingTTimeout "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "1"} {log_msg ERROR "Timeout not configured successfuly" ; set Result "FAILED"}
            set r [Dut-$dut3 getTFltrRPPingTInterval "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "7"} {log_msg ERROR "Interval not configured successfuly" ; set Result "FAILED"}
            set r [Dut-$dut3 getTFltrRPPingTDropCount "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "3"} {log_msg ERROR "DropCount not configured successfuly" ; set Result "FAILED"}     
            set r [Dut-$dut3 getTFltrRPPingTHoldDown "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "20"} {log_msg ERROR "DropCount not configured successfuly" ; set Result "FAILED"} 
            set r [Dut-$dut3 getTFltrRPPingTHoldDownRemain "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "0"} {log_msg ERROR "HoldDownRemain not configured successfuly" ; set Result "FAILED"} 
                    
                
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
            log_msg INFO "Verify the active destination via SNMP"
            RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            log_msg INFO "Verify the active destination via CLI"
            RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            # Check if Last Action for test is: enable
            log_msg INFO "Verify the last action via SNMP"
            RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
            log_msg INFO "Verify the last action via CLI"
            RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable
                
            RP_clearAllFilter $dut3 -filterType $filterType
            set stats1 [RP_CollectStats 1]
            filterTCAM_ixStartTraffic 1 -direction ingress
            
            log_msg INFO "Dest3 will be switched down. Verify the redirect time for :"
            log_msg DEBUG "timeout = 1s, interval = 7s, drop count = 3, hold down time = 20s"
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
            RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method dest_interface
                    
                set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
                if { (25000 > $redTime) && (11000 < $redTime) } {
                        log_msg INFO "Redirect time was: $redTime - OK"
                    } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
         
            filterTCAM_ixStopTraffic 1 -direction ingress        
            set stats2 [RP_CollectStats 2]   
                
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2 
                set Result "FAILED"
            }
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
            
                    
            RP_act_dest dest3 -dest3RC $opt(dest3RC)
            RP_linuxRoutes
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
            
            set t_dest_up [timestamp]
            
            set down_timer "20"
            while {$down_timer >= "1"} {
                RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family 0.0.0.0] -filterType $opt(filterType) 
                after 1000
                set t_duration [timestamp]
                set down_timer [Dut-$dut3 getTFltrRPPingTHoldDownRemain "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
                log_msg INFO "Remaining time to enable destination : $down_timer"
                if { [expr $t_duration - $t_dest_up] > 20} { log_msg ERROR "Too much time to enable destination"; set Result "FAILED";  break} 
            }
            after 1000
            log_msg INFO "Verify the active destination via SNMP"
            RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            log_msg INFO "Verify the active destination via CLI"
            RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            # Check if Last Action for test is: enable
            log_msg INFO "Verify the last action via SNMP"
            RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
            log_msg INFO "Verify the last action via CLI"
            RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable    
            
            
            
            ###gash_interpreter
            # Change timeout to default
            log_msg INFO "Change timeout to 1s, interval to 1s and dropCount to 3 for $opt(HT) health test"
            set method [RP_lrandom "CLI SNMP"]
            if {$method == "CLI"} {     
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] shutdown"]
                set cmdList ""
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test no timeout"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test no interval"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test no drop-count"
                foreach cmd $cmdList {
                    set r1 [cliCne Dut-$dut3 $cmd]
                    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
                }
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] no shutdown"]
            } else {
                set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] outOfService]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTTimeout wccp [string tolower $family] [ipConvert $family $dest3Addr] 1]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTInterval wccp [string tolower $family] [ipConvert $family $dest3Addr] 1]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTDropCount wccp [string tolower $family] [ipConvert $family $dest3Addr] 3]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTHoldDown wccp [string tolower $family] [ipConvert $family $dest3Addr] 0]
                set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
                set testResultFlag [RP_CompareOutputString "noError" $r]
            }
            # verify value of timeout
            set r [Dut-$dut3 getTFltrRPPingTTimeout "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "1"} {log_msg ERROR "Timeout not configured successfuly" ; set Result "FAILED"}
            set r [Dut-$dut3 getTFltrRPPingTInterval "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "1"} {log_msg ERROR "Interval not configured successfuly" ; set Result "FAILED"}
            set r [Dut-$dut3 getTFltrRPPingTDropCount "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "3"} {log_msg ERROR "DropCount not configured successfuly" ; set Result "FAILED"}          
                
            
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
            log_msg INFO "Verify the active destination via SNMP"
            RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            log_msg INFO "Verify the active destination via CLI"
            RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            # Check if Last Action for test is: enable
            log_msg INFO "Verify the last action via SNMP"
            RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
            log_msg INFO "Verify the last action via CLI"
            RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable
            
            RP_clearAllFilter $dut3 -filterType $filterType
            set stats1 [RP_CollectStats 1]
            filterTCAM_ixStartTraffic 1 -direction ingress
            
            log_msg INFO "Dest3 will be switched down. Verify the redirect time for default values :"
            log_msg DEBUG "timeout = 1s, interval = 1s, drop count = 3, hold down time = 0s"
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
            RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method dest_interface
            
                set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
                if { (7500 > $redTime) && (2500 < $redTime) } {
                        log_msg INFO "Redirect time was: $redTime - OK"
                    } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
         
            filterTCAM_ixStopTraffic 1 -direction ingress        
            set stats2 [RP_CollectStats 2]   
                
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2 
                set Result "FAILED"
            }
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
            
            RP_act_dest dest3 -dest3RC $opt(dest3RC)
            RP_linuxRoutes
            RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
                            
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
            log_msg INFO "Verify the active destination via SNMP"
            RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            log_msg INFO "Verify the active destination via CLI"
            RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            # Check if Last Action for test is: enable
            log_msg INFO "Verify the last action via SNMP"
            RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
            log_msg INFO "Verify the last action via CLI"
            RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable
         # end of ping -if   
       } 

       ###gash_interpreter
       # ICMP check for ping test
       #       - deact mode interface - 
       # only interval and drop count aplicable, if no default route (timeout not taken into account - ping not sent)
        set description [boxifyText "Dest3 is going down - Methode interface"]
        log_msg INFO "\n$description"
        
        RP_clearAllFilter $dut3 -filterType $filterType
        set stats1 [RP_CollectStats 1]
        filterTCAM_ixStartTraffic 1 -direction ingress
        
        log_msg INFO "Local interface to Dest3 will be switched down "
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method interface
        
        set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
        if {$opt(HT) == "ping"} {
            if { (7500 > $redTime) && (2000 < $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
        } else {
             if { (1000 > $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }           
        }
        
        filterTCAM_ixStopTraffic 1 -direction ingress  
        set stats2 [RP_CollectStats 2]   

        set icmpCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsEgressHitCount 100 20]
            if {$opt(HT) == "ping"} {
                if {$icmpCount != "0" } { log_msg INFO " Num of ICMP packets sent : $icmpCount" 
                        } else {log_msg ERROR "No ICMP packets sent with dest unreachable cause"; set Result "FAILED" }
            } else { 
                if {$icmpCount != "0" } {log_msg ERROR "$icmpCount ICMP packets sent with dest unreachable cause"; set Result "FAILED" 
                } else {log_msg INFO "0 ICMP packets sent - result OK"}      

                if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2 
                set Result "FAILED"
                }
            }  
      
        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr] -RC $opt(dest3RC)
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        log_msg INFO "Verify the last action via SNMP"
        RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
        log_msg INFO "Verify the last action via CLI"
        RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable
       
       
       
       
       
      ###gash_interpreter
       # ICMP check  - deact mode port + drop Count 5
       # only interval and drop count aplicable, if no default route (timeout not taken into account - ping not sent)
       set description [boxifyText "Dest3 is going down - Methode port"]
       log_msg INFO "\n$description"
            if { $opt(HT) == "ping" } {
                log_msg INFO "Change dropCount to 5 for $opt(HT) health test"
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] shutdown"]
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test drop-count 5"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] no shutdown"]
            
                # verify value of dropCount
                set r [Dut-$dut3 getTFltrRPPingTDropCount "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
                if {$r != "5"} {log_msg ERROR "Timeout not configured successfuly" ; set Result "FAILED"}
            }

  
        RP_clearAllFilter $dut3 -filterType $filterType
        set stats1 [RP_CollectStats 1]
        filterTCAM_ixStartTraffic 1 -direction ingress
        
        log_msg INFO "Dest3 will be switched down."
        if {$opt(HT) == "ping"} {
            log_msg DEBUG "Verify the redirect time for dropCount 5: timeout = 1s, interval = 1s, drop count = 5, hold down time = 0s"
        }
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method port
        
            set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
            if {$opt(HT) == "ping"} {
                if { (9000 > $redTime) && (3500 < $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
            } else {
                if { (1000 > $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }                
            }
                    
        filterTCAM_ixStopTraffic 1 -direction ingress   
        set stats2 [RP_CollectStats 2]       

        
        set icmpCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsEgressHitCount 100 20]
        if {$opt(HT) == "ping"} {
            if {$icmpCount != "0" } { log_msg INFO " Num of ICMP packets sent : $icmpCount" 
                } else {log_msg ERROR "No ICMP packets sent with dest unreachable cause"; set Result "FAILED" }
        } else {
            if {$icmpCount != "0" } {log_msg ERROR "$icmpCount ICMP packets sent with dest unreachable cause"; set Result "FAILED" 
                } else {log_msg INFO "0 ICMP packets sent - result OK"}      
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2 
                set Result "FAILED"
            }
        }
       
        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes 
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr] -RC $opt(dest3RC)
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        log_msg INFO "Verify the last action via SNMP"
        RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
        log_msg INFO "Verify the last action via CLI"
        RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable
       
       
       
       
       
       
       if {$opt(dest3RC) != "GRT"} {
       ###gash_interpreter
        #execute SAP and VRPN shutdown
        set description [boxifyText "Dest3 is going down - Methode sap"]
        log_msg INFO "\n$description"
            if { $opt(HT) == "ping" } {
                log_msg INFO "Change dropCount to 10 for $opt(HT) health test"    
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] shutdown"]
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test drop-count 10"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] no shutdown"]
            
                # verify value of dropCount
                set r [Dut-$dut3 getTFltrRPPingTDropCount "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
                if {$r != "10"} {log_msg ERROR "Timeout not configured successfuly" ; set Result "FAILED"}
            }

  
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set stats1 [RP_CollectStats 1]
        filterTCAM_ixStartTraffic 1 -direction ingress
        
        log_msg INFO "Dest3 will be switched down."
        if { $opt(HT) == "ping" } {
            log_msg DEBUG "Verify the redirect time for dropCount 10: timeout = 1s, interval = 1s, drop count = 10, hold down time = 0s"
        }
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method sap
        
            set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
            if { $opt(HT) == "ping" } {
                if { (15000 > $redTime) && (7000 < $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
            } else {
                if { (1000 > $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
            }
                
        filterTCAM_ixStopTraffic 1 -direction ingress      
        set stats2 [RP_CollectStats 2]         
                
        set icmpCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsEgressHitCount 100 20]
        if { $opt(HT) == "ping" } {
                if {$icmpCount != "0" } { log_msg INFO " Num of ICMP packets sent : $icmpCount" 
                } else {log_msg ERROR "No ICMP packets sent with dest unreachable cause"; set Result "FAILED" }
        } else {
                if {$icmpCount != "0" } {log_msg ERROR "$icmpCount ICMP packets sent with dest unreachable cause"; set Result "FAILED" 
                } else {log_msg INFO "0 ICMP packets sent - result OK"}      
                if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                    RP_PrintStats $stats1 $stats2 
                    set Result "FAILED"
                }
        }
        
        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        log_msg INFO "Verify the last action via SNMP"
        RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
        log_msg INFO "Verify the last action via CLI"
        RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable       
       
      
        #VPRN
        ###gash_interpreter
        set description [boxifyText "Dest3 is going down - Methode vprn"]
        log_msg INFO "\n$description"
        if { $opt(HT) == "ping" } {
            log_msg INFO "Change dropCount to deafult for $opt(HT) health test"
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] shutdown"]
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] ping-test no drop-count"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
            set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] no shutdown"]

            # verify value of dropCount
            set r [Dut-$dut3 getTFltrRPPingTDropCount "wccp" [string tolower $family] [ipConvert $family $dest3Addr]]
            if {$r != "3"} {log_msg ERROR "Timeout not configured successfuly" ; set Result "FAILED"}
        }

  
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set stats1 [RP_CollectStats 1] 
        filterTCAM_ixStartTraffic 1 -direction ingress
        
        log_msg INFO "Dest3 will be switched down."
        if { $opt(HT) == "ping" } {
            log_msg DEBUG "Verify the redirect time for dropCount 3: timeout = 1s, interval = 1s, drop count = 3, hold down time = 0s"
        }    
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method vprn
        
            set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
            if { $opt(HT) == "ping" } {    
                if { (7000 > $redTime) && (2000 < $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
            } else {
                if { (1000 > $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
            }
                
        filterTCAM_ixStopTraffic 1 -direction ingress  
        set stats2 [RP_CollectStats 2]          

        
        set icmpCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsEgressHitCount 100 20]
        if { ($opt(svcType) == "vprn") && ($opt(dest3RC) == "VRF1") } {
                    log_msg INFO " ICMP packets not checked "
        } else {
                    if { $opt(HT) == "ping" } {  
                    if {$icmpCount != "0" } { log_msg INFO " Num of ICMP packets sent : $icmpCount" 
                    } else {log_msg ERROR "No ICMP packets sent with dest unreachable cause"; set Result "FAILED" }
            } else {
                    if {$icmpCount != "0" } {log_msg ERROR "$icmpCount ICMP packets sent with dest unreachable cause"; set Result "FAILED" 
                    } else {log_msg INFO "0 ICMP packets sent - result OK"}      
                    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                        RP_PrintStats $stats1 $stats2 
                        set Result "FAILED"
                    }
            }
        }
        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr] -RC $opt(dest3RC)
        
       }
       
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method SNMP
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest3Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        log_msg INFO "Verify the last action via SNMP"
        RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest3Addr] enable $opt(HT)
        log_msg INFO "Verify the last action via CLI"
        RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest3Addr] Enable       
       
       
       ########################################### dest1 active
       ###gash_interpreter
       after 1000
       set description [boxifyText "Dest1 is active now, will be unreachable in next steps"]
       log_msg INFO "\n$description"
       
       set description [boxifyText "Dest1 is going down - Methode interface"]
       log_msg INFO "\n$description"
       set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] shutdown" ]
       set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no priority" ]
       #set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] shutdown" ]
       if { $opt(HT) == "ping" } {
                log_msg INFO "Change dropCount to 5 for $opt(HT) health test"
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] shutdown"]
                set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] ping-test drop-count 5"
                set r1 [cliCne Dut-$dut3 $cmd]
                if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
                set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] no shutdown"]
            
                # verify value of dropCount
                set r [Dut-$dut3 getTFltrRPPingTDropCount "wccp" [string tolower $family] [ipConvert $family $dest1Addr]]
                if {$r != "5"} {log_msg ERROR "Timeout not configured successfuly" ; set Result "FAILED"}
       }
       set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] no shutdown"]

            
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method SNMP
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        log_msg INFO "Verify the last action via SNMP"
        RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest1Addr] enable $opt(HT)
        log_msg INFO "Verify the last action via CLI"
        RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest1Addr] Enable            
     
        # after 2000 
        # log_msg INFO "Verify the active destination via SNMP"
    # RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # log_msg INFO "Verify the active destination via CLI"
    # RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # # Check if Last Action for test is: enable
    # log_msg INFO "Verify the last action via SNMP"
    # RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest1Addr] enable $opt(HT)
    # log_msg INFO "Verify the last action via CLI"
    # RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest1Addr] Enable 
            

       
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set stats1 [RP_CollectStats 1]  
        filterTCAM_ixStartTraffic 1 -direction ingress
        after 1000 

        
        if { [lindex $streamDestBit 0] == "x" } {
            log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
            if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
            } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
        
        } elseif { [lindex $streamDestBit 0] == "1" } {
            log_msg INFO "Check all packets should be forwarded to destination 1"
            if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
            } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
            
        } elseif { [lindex $streamDestBit 0] == "0" } {
            log_msg INFO "Check all packets should be forwarded to webserver"
            if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
            } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
        } 
        log_msg INFO "Dest1 will be switched down."
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
        RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method interface
        
            set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] 60000]
            if {$opt(HT) == "ping"} {
                if { (8500 > $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
            } else {
                 if { (2000 > $redTime)  } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }               
            }
                
        filterTCAM_ixStopTraffic 1 -direction ingress 
        set stats2 [RP_CollectStats 2]            

        
        set icmpCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsEgressHitCount 100 20]
        if {$opt(HT) == "ping"} {
                if {$icmpCount != "0" } { log_msg INFO " Num of ICMP packets sent : $icmpCount" 
                } else {log_msg ERROR "No ICMP packets sent with dest unreachable cause"; set Result "FAILED" }     
        } else {
                if {$redTime < 500} {
                    if {$icmpCount != "0" } {log_msg ERROR "$icmpCount ICMP packets sent with dest unreachable cause"; set Result "FAILED" 
                    } else {log_msg INFO "0 ICMP packets sent - result OK"}      
                } 
                if {$opt(routing_prot) == ""} { 
                    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                        RP_PrintStats $stats1 $stats2 
                        set Result "FAILED"
                    }
                
                }
        }
        
        RP_act_dest dest1 -dest1RC $opt(dest1RC)
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method SNMP
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        log_msg INFO "Verify the last action via SNMP"
        RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest1Addr] enable $opt(HT)
        log_msg INFO "Verify the last action via CLI"
        RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest1Addr] Enable            
        
        
        
        
       ###gash_interpreter
        #method port
        set description [boxifyText "Dest1 is going down - Methode port"]
        log_msg INFO "\n$description"
       
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set stats1 [RP_CollectStats 1] 
        filterTCAM_ixStartTraffic 1 -direction ingress
        
        after 1000
         if { [lindex $streamDestBit 0] == "x" } {
            log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
            if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
            } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
        
        } elseif { [lindex $streamDestBit 0] == "1" } {
            log_msg INFO "Check all packets should be forwarded to destination 1"
            if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
            } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
            
        } elseif { [lindex $streamDestBit 0] == "0" } {
            log_msg INFO "Check all packets should be forwarded to webserver"
            if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
            } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
        }   
        
        log_msg INFO "Dest1 will be switched down."
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
        RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method port
        
            set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] 60000]
            if {$opt(HT) == "ping"} {
                if { 8500 > $redTime } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
            } else {
                if { (2000 > $redTime) } {
                    log_msg INFO "Redirect time was: $redTime - OK"
                } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
            }
                
        filterTCAM_ixStopTraffic 1 -direction ingress  
        set stats2 [RP_CollectStats 2]        

        
        set icmpCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsEgressHitCount 100 20]
        if {$opt(HT) == "ping"} {
                if {$icmpCount != "0" } { log_msg INFO " Num of ICMP packets sent : $icmpCount" 
                } else {log_msg ERROR "No ICMP packets sent with dest unreachable cause"; set Result "FAILED" } 
        } else {
                if {$redTime < 500} {
                    if {$icmpCount != "0" } {log_msg ERROR "$icmpCount ICMP packets sent with dest unreachable cause"; set Result "FAILED" 
                    } else {log_msg INFO "0 ICMP packets sent - result OK"}      
                } 
                if {$opt(routing_prot) == ""} { 
                    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                        RP_PrintStats $stats1 $stats2 
                        set Result "FAILED"
                    }
                
                }
        }
        RP_act_dest dest1 -dest1RC $opt(dest1RC)
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC) 
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method SNMP
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
        # Check if Last Action for test is: enable
        log_msg INFO "Verify the last action via SNMP"
        RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest1Addr] enable $opt(HT)
        log_msg INFO "Verify the last action via CLI"
        RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest1Addr] Enable             
        
        
        
        
        
        if {$opt(dest1RC) != "GRT"} {
           ###gash_interpreter
            #method vprn
            set description [boxifyText "Dest1 is going down - Methode VPRN"]
            log_msg INFO "\n$description"
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
            set stats1 [RP_CollectStats 1]
            filterTCAM_ixStartTraffic 1 -direction ingress
           
            after 1000
            if { [lindex $streamDestBit 0] == "x" } {
                log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
                if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
                } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
            
            } elseif { [lindex $streamDestBit 0] == "1" } {
                log_msg INFO "Check all packets should be forwarded to destination 1"
                if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
                } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
                
            } elseif { [lindex $streamDestBit 0] == "0" } {
                log_msg INFO "Check all packets should be forwarded to webserver"
                if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
                } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
            }   
        
            
            log_msg INFO "Dest1 will be switched down."
            RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
            RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method vprn
            
                set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] 60000]
                if {$opt(HT) == "ping"} {
                    if { (8500 > $redTime) && (2000 < $redTime) } {
                        log_msg INFO "Redirect time was: $redTime - OK"
                    } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
                } else {
                    if { (2000 > $redTime) } {
                        log_msg INFO "Redirect time was: $redTime - OK"
                    } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
                }
                    
            filterTCAM_ixStopTraffic 1 -direction ingress 
             set stats2 [RP_CollectStats 2] 
            

            
            set icmpCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsEgressHitCount 100 20]
            if { ($opt(svcType) == "vprn") && ($opt(dest3RC) == "VRF1") } { 
                log_msg INFO " ICMP packets not checked "
            } else {
            
                if {$opt(HT) == "ping"} {
                        if {$icmpCount != "0" } { log_msg INFO " Num of ICMP packets sent : $icmpCount" 
                        } else {log_msg ERROR "No ICMP packets sent with dest unreachable cause"; set Result "FAILED" } 
                } else {
                    if {$redTime < 500} {
                        if {$icmpCount != "0" } {log_msg ERROR "$icmpCount ICMP packets sent with dest unreachable cause"; set Result "FAILED" 
                        } else {log_msg INFO "0 ICMP packets sent - result OK"}      
                    } 
                    if {$opt(routing_prot) == ""} { 
                     if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                        RP_PrintStats $stats1 $stats2 
                        set Result "FAILED"
                    }
                
                    }
                }
            }
            RP_act_dest dest1 -dest1RC $opt(dest1RC)
            RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
            RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
            
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
             RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method SNMP
            log_msg INFO "Verify the active destination via SNMP"
            RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            log_msg INFO "Verify the active destination via CLI"
            RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            # Check if Last Action for test is: enable
            log_msg INFO "Verify the last action via SNMP"
            RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest1Addr] enable $opt(HT)
            log_msg INFO "Verify the last action via CLI"
            RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest1Addr] Enable     

                
            #method sap
           ###gash_interpreter
            
            set description [boxifyText "Dest1 is going down - Methode sap"]
            log_msg INFO "\n$description"
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
            set stats1 [RP_CollectStats 1] 
            filterTCAM_ixStartTraffic 1 -direction ingress
            
            after 1000
            if { [lindex $streamDestBit 0] == "x" } {
                log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
                if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
                } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
            
            } elseif { [lindex $streamDestBit 0] == "1" } {
                log_msg INFO "Check all packets should be forwarded to destination 1"
                if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
                } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
                
            } elseif { [lindex $streamDestBit 0] == "0" } {
                log_msg INFO "Check all packets should be forwarded to webserver"
                if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
                } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
            }   
        
            
            log_msg INFO "Dest1 will be switched down."
            RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
            RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method sap
            
                set redTime [RP_verifyRedirectTime C wccp [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] 60000]
                if {$opt(HT) == "ping"} {    
                    if { 8500 > $redTime } {
                        log_msg INFO "Redirect time was: $redTime - OK"
                    } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
                } else {
                    if { (2000 > $redTime) } {
                        log_msg INFO "Redirect time was: $redTime - OK"
                    } else { log_msg ERROR "Redirect time was: $redTime - NOK"; set Result "FAILED" }
                }
                    
            filterTCAM_ixStopTraffic 1 -direction ingress 
            set stats2 [RP_CollectStats 2] 
            
            
            set icmpCount [Dut-$dut3 getT[getVar3 $opt(filterType)]FilterParamsEgressHitCount 100 20]
            if {$opt(HT) == "ping"} { 
                    if {$icmpCount != "0" } { log_msg INFO " Num of ICMP packets sent : $icmpCount" 
                    } else {log_msg ERROR "No ICMP packets sent with dest unreachable cause"; set Result "FAILED" } 
            } else {
                    if {$redTime < 500} {
                        if {$icmpCount != "0" } {log_msg ERROR "$icmpCount ICMP packets sent with dest unreachable cause"; set Result "FAILED" 
                        } else {log_msg INFO "0 ICMP packets sent - result OK"}      
                    } 
                    if {$opt(routing_prot) == ""} { 
                        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                            RP_PrintStats $stats1 $stats2 
                            set Result "FAILED"
                        }
                
                    }
            }
            RP_act_dest dest1 -dest1RC $opt(dest1RC)
            RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
            RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
            
            
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method SNMP
            log_msg INFO "Verify the active destination via SNMP"
            RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            log_msg INFO "Verify the active destination via CLI"
            RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
            # Check if Last Action for test is: enable
            log_msg INFO "Verify the last action via SNMP"
            RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest1Addr] enable $opt(HT)
            log_msg INFO "Verify the last action via CLI"
            RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest1Addr] Enable             
        }
   

    # end of extensive part  
    }   
    
    
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    after 1000
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    log_msg INFO "Verify the last action via SNMP"
    RP_verifyRPHealthTestLastActionSNMP C wccp [string tolower $family] [ipConvert $family $dest1Addr] enable $opt(HT)
    log_msg INFO "Verify the last action via CLI"
    RP_verifyRPHealthTestLastActionCLI C wccp [string tolower $family] [ipConvert $family $dest1Addr] Enable

    
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest3Addr] shutdown" ]
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] no shutdown" ]
    #set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp no destination [ipConvert $family $dest3Addr]" ]
    
    log_msg INFO "##################################################################"
    log_msg INFO "##  Check of Mirroring (mirror source filter entry with PBR)    ##"
    log_msg INFO "##################################################################"
    gash_interpreter

        set mirrorPort $topoMap(Dut-$dut3,1/1/4)

        # configure mirror source and destination
        log_msg INFO "Configure mirror-dest (Ixia port 2) and mirror-source (filter entry with PBR)"
        set cmdList ""
        lappend cmdList "/configure port $mirrorPort ethernet mode hybrid"
        lappend cmdList "/configure port $mirrorPort ethernet encap-type dot1q"
        lappend cmdList "/configure port $mirrorPort no shutdown"
        lappend cmdList "/configure mirror mirror-dest 200 create"
        lappend cmdList "  sap ${mirrorPort}:1 create"
        lappend cmdList "  exit"
        lappend cmdList "no shutdown"
        lappend cmdList "exit all"

        lappend cmdList "debug mirror-source 200"
        lappend cmdList "        [getVar4 $filterType]-filter 100 entry 1"
        if {$IngrEgr == "true"} {
            lappend cmdList "        [getVar4 $filterType]-filter 100 entry 3"
        }
        lappend cmdList "        no shutdown"
        lappend cmdList "        exit"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }   

        # check the redirected traffic
        log_msg INFO "Check redirected traffic for each entry and streams and verify that all traffic is mirrored"
        

        log_msg INFO "Traffic verification - ingress"
        if {[RP_verifyTrafficFlowCheck $streamDestBit $streamIdList dest1 -mirror true] != "OK"} {set Result "FAILED"}

        if {$IngrEgr == "true"} {
            log_msg INFO "Traffic verification - egress"
            if {[RP_verifyTrafficFlowCheck $streamDestBit $streamIdList dest1 -mirror true -direction egress] != "OK"} {set Result "FAILED"}
        }

        # deconfigure mirror source and destination
        log_msg INFO "Deconfigure mirror-dest (Ixia port 2) and mirror-source (filter entry with PBR)"
        set cmdList ""
        lappend cmdList "debug no mirror-source 200"
        lappend cmdList "/configure mirror mirror-dest 200 shutdown"
        lappend cmdList "/configure mirror no mirror-dest 200"
        lappend cmdList "/configure port $mirrorPort shutdown"
        lappend cmdList "/configure port $mirrorPort ethernet no mode"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }   
 
    log_msg INFO "##################################################################"
    log_msg INFO "##        Check of LI ( source filter entry with PBR )          ##"
    log_msg INFO "##################################################################"
    gash_interpreter
    
    
    
    
    
    
 
 #if {$opt(mode) == "extensive"} {}
 if { 1 } {
     log_msg INFO "#############   HA part   #############" 
     gash_interpreter   
     
    #########################################################
    #####    Admin save / Admin save detal reference     #### 
    #########################################################
    log_msg INFO "admin save/Admin save detail"
    
    # #gash_interpreter
    
    RP_rollbackSave $dut3 1
    
    Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-reference.cfg" -extendedTimeout 60  -extendedMatchString "#"
    Dut-$dut3 sendCliCommand "/admin save detail $config_dir/Dut-$dut3-detail_reference.cfg" -extendedTimeout 60  -extendedMatchString "#"

    
    
    if {[filter_isHsa $dut3]} {
        set IomFiltersBefore [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
        for {set j 1} {$j <= 2} {incr j 1} { 
            
            set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
            log_msg INFO "Card Status:"
            puts $res
            
            
            log_msg INFO "#########################################################"
            log_msg INFO "##########    HSA Active IOM Switchover     #############"
            log_msg INFO "#########################################################"
            
            
            set r [Dut-$dut3 hsa_switchAndVerify_ActiveCpmMicrocodeSlot]
            if {$r != "OK"} {
                log_msg ERROR "HSA Active IOM Switchover test failed"
            }
            
            set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
            if { ($buildVersion == 0 || $buildVersion >= 11) && [getGlobalVar 7710Support] == "false" } {
                # verify if all filters were downloaded to IOM 2
                set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
                if { $IomFiltersAfter != $IomFiltersBefore } {
                    log_msg ERROR "Not all filters were downloaded to IOM after boot" 
                    log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
                    log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
                    set Result "FAILED"
                }
            }
            if {($itfBind == "spoke") || ($itfBind == "mesh") } {
                log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }     
            }
            if {$opt(itfBind) == "serviceAware"} { 
                log_msg NOTICE "Wait 55 seconds for network convergence ..."
                printDotsWhileWaiting 55
                RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
            }
            RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
            RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
            RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
            after 2000
            RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
            RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
            
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
            set stats1 [RP_CollectStats 1]
            
                if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
            
            set stats2 [RP_CollectStats 2]
            if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2
            }
        }
    }
   
   
    set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
    log_msg INFO "Card Status:"
    puts $res
    log_msg INFO "#########################################################"
    log_msg INFO "####################  clear IOM 1  ######################"
    log_msg INFO "#########################################################"
    
    
   
    set IomFiltersBefore [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
    log_msg INFO "Restart IOM, which is associated with filter with binded RP. Verify resources after boot"
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 sendCliCommand "clear card [lindex [split $port_3_2 "/"] 0]"
    Dut-$dut3 CnWCardStatus
    set rc [resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 60]
    if {$rc != "OK"} {
        log_msg ERROR "Resource mismatch after restart of IOM" ; set Result "FAILED"
    }
    set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
    if { ($buildVersion == 0 || $buildVersion >= 11) && [getGlobalVar 7710Support] == "false" } {
        # verify if all filters were downloaded to IOM 2
        set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
        if { $IomFiltersAfter != $IomFiltersBefore } {
            log_msg ERROR "Not all filters were downloaded to IOM after boot" 
            log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
            log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
            set Result "FAILED"
        }
    }
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
        }
    
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    after 2000
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
    log_msg INFO "Card Status:"
    puts $res

    log_msg INFO "#########################################################"
    log_msg INFO "####################  clear IOM 2  ######################"
    log_msg INFO "#########################################################"
    
    #restart of IOM2
    set iomDest1 [lindex [split $topoMap(Dut-$dut3,2/1/2) "/"] 0]
    set iomDest2 [lindex [split $topoMap(Dut-$dut3,2/1/1) "/"] 0]
    
    #gash_interpreter
    # have only dest1 & dest2
    
    set IomFiltersBeforeIOMdest [filterScaleGetDownloadedFilters $dut3 $iomDest1 $filterType]
    log_msg INFO "Restart IOM with interface towards destination1. Verify destination 1 is unrechable within RP test. Verify resources after boot"
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 sendCliCommand "clear card $iomDest1"
    
    if {[getGlobalVar 7710Support] == "false"} {
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC) -method negative
        if {$iomDest1 == $iomDest2} {
            RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest1RC) -method negative
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
            RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT) 
            RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT) 
        } else {
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
            RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT) 
            RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
        }
    }
    Dut-$dut3 CnWCardStatus
    set rc [resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 60]
    if {$rc != "OK"} {
        log_msg ERROR "Resource mismatch after restart of IOM" ; set Result "FAILED"
    }
    set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
    if { ($buildVersion == 0 || $buildVersion >= 11) && [getGlobalVar 7710Support] == "false" } {
        # verify if all filters were downloaded to IOM 2
        set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 $iomDest1 $filterType]
        if { $IomFiltersAfter != $IomFiltersBeforeIOMdest } {
            log_msg ERROR "Not all filters were downloaded to IOM after boot" 
            log_msg ERROR "downloaded filters before restart: $IomFiltersBeforeIOMdest"
            log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
            set Result "FAILED"
        }
    }
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    after 2000
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
    log_msg INFO "Card Status:"
    puts $res
    log_msg INFO "#########################################################"
    log_msg INFO "################        clear  MDA        ###############"
    log_msg INFO "#########################################################"
    
    foreach {Port} $port_3_2 {
              Dut-$dut3 sendCliCommand "exit all"
              Dut-$dut3 sendCliCommand "clear mda [lindex [split $Port "/"] 0]/1"
              Dut-$dut3 sendCliCommand "clear mda [lindex [split $Port "/"] 0]/2"
          }
    Dut-$dut3 CnWMdaStatus -Time 300
    set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
    if { $IomFiltersAfter != $IomFiltersBefore } {
        log_msg ERROR "Not all filters were downloaded to IOM after boot" 
        log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
        log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
        set Result "FAILED"
    }
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    after 1000
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
    log_msg INFO "Card Status:"
    puts $res
    log_msg INFO "#########################################################"
    log_msg INFO "############     remove / insert  MDA     ###############"
    log_msg INFO "#########################################################"
    
    set port $port_3_2
    set slot [lindex [ split $port "/" ] 0]
    set mda  [lindex [ split $port "/" ] 1]
    log_msg INFO "=> Remove and insert mda ${slot}/${mda}"
    Dut-$dut3 sendCliCommand "shell cardcmd $slot remove_mda n:$mda"
    after 5000
    Dut-$dut3 sendCliCommand "shell cardcmd $slot insert_mda n:$mda"
    after 15000
    Dut-$dut3 CnWMdaStatus
    set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
    if { $IomFiltersAfter != $IomFiltersBefore } {
        log_msg ERROR "Not all filters were downloaded to IOM after boot" 
        log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
        log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
        set Result "FAILED"
    }
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    after 1000
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    #########################################################
    ############     shutdown no shutdown port of lag    ###############
    #########################################################
    
    
    #########################################################
    ############     add / remove ports from lag    ###############
    #########################################################
    
    
    #########################################################
    ############             no filter     ###############
    #########################################################
    
    set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
    log_msg INFO "Card Status:"
    puts $res
    log_msg INFO "#########################################################"
    log_msg INFO "################  restart of standby CPM  ###############"
    log_msg INFO "#########################################################"
    
    set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
    if { $buildVersion == 0 || $buildVersion >= 10 } {
        # Restart the standby CPM
        log_msg INFO "Restart of standby CPM. Verify reconcile"
        Dut-$dut3 sendCliCommand "exit all"
        Dut-$dut3 sendCliCommand "admin reboot standby now"
        after 5000
        set data [Dut-$dut3 sendCliCommand "show card"] ; log_msg DEBUG $data
        if { [Dut-$dut3 CnWRedCardStatus] != "OK" } {
            log_msg ERROR "Reconcile was not successful" ; set testResultFlag "FAILED"
        }
        set data [Dut-$dut3 sendCliCommand "show card"] ; log_msg DEBUG $data
    }
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    after 1000
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    after 1000
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
    log_msg INFO "Card Status:"
    puts $res
    log_msg INFO "#########################################################"
    log_msg INFO "################  restart of active CPM   ###############"
    log_msg INFO "#########################################################"
    
    # SWO performed
    log_msg INFO "Restart of active CPM. Verify redirected traffic flow after switch-over"
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 activitySwitch

    set rc [resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 60]
    if {$rc != "OK"} {
        log_msg ERROR "Resource mismatch after restart of IOM" ; set testResultFlag "FAILED"
    }
    set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
    if { ($buildVersion == 0 || $buildVersion >= 11) && [getGlobalVar 7710Support] == "false" } {
        # verify if all filters were downloaded to IOM 2
        set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
        if { $IomFiltersAfter != $IomFiltersBefore } {
            log_msg ERROR "Not all filters were downloaded to IOM after boot" 
            log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
            log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
            set Result "FAILED"
        }
    }
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    after 1000
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    log_msg INFO "#########################################################"
    log_msg INFO "#####     Admin save / Admin save detal compare1     ####"
    log_msg INFO "#########################################################"
    

    Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-compare1.cfg" -extendedTimeout 60  -extendedMatchString "#"
    Dut-$dut3 sendCliCommand "/admin save detail $config_dir/Dut-$dut3-detail_compare1.cfg" -extendedTimeout 60  -extendedMatchString "#"
    
    
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-reference.cfg $logdir/device_logs/saved_configs/Dut-$dut3-compare1.cfg] == "ERROR"} {set Result FAILED}
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-detail_reference.cfg $logdir/device_logs/saved_configs/Dut-$dut3-detail_compare1.cfg] == "ERROR"} {set Result FAILED}

    
    
    set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
    log_msg INFO "Card Status:"
    puts $res
    log_msg INFO "#########################################################"
    log_msg INFO "######  let standby CPM down in hold + config RP  #######"
    log_msg INFO "#########################################################"
    
    set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
    if { $buildVersion == 0 || $buildVersion >= 10 } {
    
         #RP modifications - recreate config
                    log_msg INFO "Deleting RP destinations and verification"
        #CLI or SNMP
        set cmdList ""
        lappend cmdList "/configure filter redirect-policy wccp no destination [ipConvert $family $dest1Addr]"
        lappend cmdList "/configure filter redirect-policy wccp no destination [ipConvert $family $dest2Addr]"
        lappend cmdList "/configure filter redirect-policy wccp no destination [ipConvert $family $dest3Addr]"
        lappend cmdList "/configure filter redirect-policy wccp no router"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward" 
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 3 create action forward" 
        lappend cmdList "/configure filter no redirect-policy wccp"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
        
        
        # Restart the standby CPM
        log_msg INFO "Restart of standby CPM. Verify reconcile"
        Dut-$dut3 sendCliCommand "exit all"
        Dut-$dut3 sendCliCommand "admin reboot standby hold now"
        after 5000
        set data [Dut-$dut3 sendCliCommand "show card"] ; log_msg DEBUG $data
        
      
        
        
            set cmdList ""    
            lappend cmdList "/configure filter redirect-policy wccp create router Base"
            lappend cmdList "/configure filter redirect-policy wccp no shutdown"
            if {$opt(HT)== "ping"} {
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create ping-test"
            } else { 
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
                lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
            }
            lappend cmdList "/configure filter redirect-policy wccp router $opt(RProuter)"        
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward redirect-policy wccp" 
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 3 create action forward redirect-policy wccp" 
            foreach {cmd} $cmdList {
                log_msg INFO "Dut-$dut3 - $cmd"
                set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }
            if {$opt(itfBind) == "serviceAware"} { 
                log_msg NOTICE "Wait 55 seconds for network convergence ..."
                printDotsWhileWaiting 55
                RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
            }
            RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
            RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
            RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
            RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
            RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
            # RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC) -method negative
            # RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC) -method negative
            # RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT)
            # RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT)
            
            if {($opt(HT)== "ping") && ([GGV HASupport] == "true")} { 
                set res [Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] ping-test drop-count 3 hold-down 400"]
            }
            
            RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method subnet 
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
            RP_deact_dest dest2 -dest2RC $opt(dest2RC) -method subnet
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
            
    log_msg INFO "#########################################################"
    log_msg INFO "#####     Admin save / Admin save detal compare2     ####"
    log_msg INFO "#########################################################"
    

    Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-compare2.cfg" -extendedTimeout 60  -extendedMatchString "#"
    Dut-$dut3 sendCliCommand "/admin save detail $config_dir/Dut-$dut3-detail_compare2.cfg" -extendedTimeout 60  -extendedMatchString "#"    
            
        Dut-$dut3 sendCliCommand "exit all"
        Dut-$dut3 sendCliCommand "admin reboot standby now"
        if { [Dut-$dut3 CnWRedCardStatus] != "OK" } {
            log_msg ERROR "Reconcile was not successful" ; set testResultFlag "FAILED"
        }
        set data [Dut-$dut3 sendCliCommand "show card"] ; log_msg DEBUG $data
    }
    
    set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
    log_msg INFO "Card Status:"
    puts $res
    log_msg INFO "#########################################################"
    log_msg INFO "################  restart of active CPM   ###############"
    log_msg INFO "#########################################################"
    
    # SWO performed
    log_msg INFO "Restart of active CPM. Verify redirected traffic flow after switch-over"
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_act_dest dest1 -dest1RC $opt(dest1RC)
    RP_routeCheck add [ipConvert $family $R_primary] "" -dest1RCtx $opt(dest1RC) 
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC) -method negative
    if {$opt(HT) == "ping" } {
        RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT) 
    } else {
        RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    }
    RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT) 
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 activitySwitch

    set rc [resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 60]
    if {$rc != "OK"} {
        log_msg ERROR "Resource mismatch after restart of IOM" ; set testResultFlag "FAILED"
    }
    RP_act_dest dest2 -dest2RC $opt(dest2RC)
    after 2000
    set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
    if { ($buildVersion == 0 || $buildVersion >= 11) && [getGlobalVar 7710Support] == "false" } {
        # verify if all filters were downloaded to IOM 2
        set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
        if { $IomFiltersAfter != $IomFiltersBefore } {
            log_msg ERROR "Not all filters were downloaded to IOM after boot" 
            log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
            log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
            set Result "FAILED"
        }
    }
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    

    log_msg INFO "#########################################################"
    log_msg INFO "#####     Admin save / Admin save detal compare3     ####"
    log_msg INFO "#########################################################"
    

    Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-compare3.cfg" -extendedTimeout 60  -extendedMatchString "#"
    Dut-$dut3 sendCliCommand "/admin save detail $config_dir/Dut-$dut3-detail_compare3.cfg" -extendedTimeout 60  -extendedMatchString "#"
    
    
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-compare3.cfg $logdir/device_logs/saved_configs/Dut-$dut3-compare2.cfg] == "ERROR"} {set Result FAILED}
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-detail_compare3.cfg $logdir/device_logs/saved_configs/Dut-$dut3-detail_compare2.cfg] == "ERROR"} {set Result FAILED}
    
    
    #gash_interpreter
    
    log_msg INFO "#########################################################"
    log_msg INFO "#####              Cleanup config                    ####"
    log_msg INFO "#########################################################"
    
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }
    
    saveOrRestore delete -dut Dut-$dut3
    

    log_msg INFO "#########################################################"
    log_msg INFO "#####     Admin save exec/ Admin save detal exec     ####" 
    log_msg INFO "#########################################################"
    
    gash_interpreter
    log_msg INFO "Execution/Re-execution of config files"
    log_msg INFO "Exec + Re-exec $config_dir/Dut-$dut3-reference.cfg"
    log_msg INFO "Exec $config_dir/Dut-$dut3-detail_reference.cfg"
    
    
     for {set j 1} {$j <= 2} {incr j 1} { 
        set fileName "$config_dir/Dut-$dut3-reference.cfg"
        after 2000
        log_msg INFO "=> Executing saved config file $fileName"
            set CLI [ cookCliData [ Dut-$dut3 sendCliCommand "exec $fileName" -extendedTimeout 300  -extendedMatchString "#" ]]
            set SC [ string first "Executed" $CLI ]
            if { $SC < 1 } {
                log_msg DEBUG "$CLI"
                log_msg ERROR "Exec of $fileName FAILED - Was $SC And Should Be >= 1"
                set Result FAILED
            }
            Dut-$dut3 sendCliCommand "exit all"
    }
    
    

    set fileName "$config_dir/Dut-$dut3-detail_reference.cfg"
    after 2000
        log_msg INFO "=> Executing saved config file $fileName"
            set CLI [ cookCliData [ Dut-$dut3 sendCliCommand "exec $fileName" -extendedTimeout 300  -extendedMatchString "#" ]]
            set SC [ string first "Executed" $CLI ]
            if { $SC < 1 } {
                log_msg DEBUG "$CLI"
                log_msg ERROR "Exec of $fileName FAILED - Was $SC And Should Be >= 1"
                set Result FAILED
            }
            Dut-$dut3 sendCliCommand "exit all"
    
    
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    after 15000
    
    #recreation host on sla profile after execution of config
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        filter_subinsert_radius_recreateHost $subhostIp $srcMac_13 -numStreams $numStreams -hostType $hostType -slaName sla2 -hostSucceed true -clearFirst true
    }

    #binding filters via proc - to ensure that host will be on sla1
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    if {$IngrEgr == "true"} {
        #egress filter
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"}
        after 2000
    }
    RP_set_dut
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
      RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
       
    log_msg INFO "#########################################################"
    log_msg INFO "#####              Cleanup config again              ####"
    log_msg INFO "#########################################################"
    
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }
    
    saveOrRestore delete -dut Dut-$dut3 
    Dut-$dut3 sendCliCommand "configure system rollback rollback-location $dir/RP_rollback" 
      
    gash_interpreter    
    log_msg INFO "#########################################################"
    log_msg INFO "#####         rollback to the restore point          ####" 
    log_msg INFO "#########################################################"
    # # rollback to the restore point
    
    
    log_msg INFO "performing ROLLBACK to latest-rb"
    RP_rollbackRestore $dut3 "latest-rb"

    
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    after 15000
    
     #recreation host on sla profile after execution of config
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        filter_subinsert_radius_recreateHost $subhostIp $srcMac_13 -numStreams $numStreams -hostType $hostType -slaName sla2 -hostSucceed true -clearFirst true
    }

    #binding filters via proc - to ensure that host will be on sla1
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    if {$IngrEgr == "true"} {
        #egress filter
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"}
    }    
        RP_set_dut
    
    after 2000
    if {$opt(itfBind) == "serviceAware"} { 
        log_msg NOTICE "Wait 55 seconds for network convergence ..."
        printDotsWhileWaiting 55
        RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
    }
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT) 
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
      RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
        if {[RP_verifyTrafficFlow $streamDestBit 1 dest1] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
#end of HA part    
}   
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }
    
        
      ####gash_interpreter 
      # if {$itfBind == "subsap"} { 
        # log_msg INFO "Clear hosts"
        # if {$filterType == "IPv6"} { Dut-$dut3 sendCliCommand "/clear service id 1 dhcp6 lease-state all" }
        # if {$filterType == "IP"} { Dut-$dut3 sendCliCommand "/clear service id 1 dhcp lease-state all" }
        # }
        
      # #back to rollback
      # set res [cookCliData [Dut-$dut3 sendCliCommand "/admin rollback revert latest-rb"]]
      
        
      #deconfig
        # filterTCAM_cleanup $setupType -testResult $result
        # filterTCAM_ixCleanup $setupType
        # if {[isIpv6Run]} {saveOrRestore delete}
    
    
    
    
    #end of HA part
    
  
        log_msg INFO "Deleting configuration"
        RP_rollbackCleanup $dut3
        saveOrRestore delete
        WccpEnhancedCleanUp
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
#end of proc
}


proc WccpEnhancedCleanUp {} {

    set hostIp $::TestDB::thisHostIpAddr
    set spawn_id [becomeRootUser -ip $hostIp]

    unixCommand $spawn_id "ifconfig eth1:2 down"
    
    
    set res [cookCliData [unixCommand $spawn_id "pidof /usr/global/sbin/radiusd-freeradius-2.1.7"]]
    if {$res != ""} { 
        set res [cookCliData [unixCommand $spawn_id "kill -9 $res"]]
    }
    

    catch {closeRootUser $spawn_id} res
}


proc filterWccpEnhancedCopyRenumEmbedSystemExclusive { args } {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         [RP_lrandom "ping unicast"]
    set opt(filterType) "IP"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) ""
    set opt(itfBind) ""
    set opt(case)    "positive"
    set opt(dest1RC)    ""
    set opt(dest2RC)    ""
    set opt(dest3RC)    ""
    set opt(dest4RC)    ""
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn rvpls L2Service grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut

   
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true"} {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"} {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"} {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"} {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"} {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   

    ## randomly choose initial setupType of duts A,B,C
    if {$opt(setupType) == ""} {
        if { $opt(svcType) == "vprn" } {
            log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
            if {$opt(itfBind) == "serviceAware"} {
                set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
            } else {
                set setupType [RP_VrfTo_getSetupType $opt(filterType)]
            }
        } elseif { $opt(svcType) == "L2Service" } {
            log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
            set setupType [RP_L2Service_getSetupType $opt(filterType)]
        } elseif { $opt(svcType) == "rvpls" } {
            log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
            set setupType [RP_RVPLS_getSetupType $opt(filterType)]
        } else {
            log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
            set setupType [RP_GrtTo_getSetupType $opt(filterType)]
        }
    } else {
        set setupType $opt(setupType)
        log_msg NOTICE "User defined setupType: $setupType"
        if {[regexp {rvpls} $setupType]} { 
            set opt(svcType) "rvpls"
        } elseif {[regexp {vprn} $setupType]} { 
            set opt(svcType) "vprn" 
        } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
            set opt(svcType) "L2Service"
        } else { 
            set opt(svcType) "grt"
        }        
    }
    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    }
    
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }    
    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
    
  
    
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
 
 
 
    # save the third rollback restore point - after network config
    # log_msg INFO "Creating rollback restore point-1 - after tcam config"
    # set extCliTim [Dut-$dut3 cget -cli_timeout] ; set extTim [Dut-$dut3 cget -timeout]
    # Dut-$dut3 configure -cli_timeout 3600 ; Dut-$dut3 configure -timeout 125
    # Dut-$dut3 sendCliCommand "exit all"
    # Dut-$dut3 sendCliCommand "shell rollbackBlackListDisable"
    # Dut-$dut3 sendCliCommand "/configure system rollback rollback-location $rb_dir/rollback"
    # Dut-$dut3 sendCliCommand "admin rollback save"
    # after 5000
    # log_msg DEBUG [Dut-$dut3 sendCliCommand "show system rollback"]
    # set rollbackSaveResult [filter_getRollbackResult $dut3 save]
    # if {$rollbackSaveResult != "Successful"} {
      # log_msg ERROR "error with creating rollback restore point-1 - $rollbackSaveResult" ; set Result "FAILED"
    # }
    # Dut-$dut3 configure -cli_timeout $extCliTim ; Dut-$dut3 configure -timeout $extTim
    
    
    # # start memory leak checks
    # set CliTim [ Dut-$dut3 cget -cli_timeout ]
    # set Tim [ Dut-$dut3 cget -timeout ]
    # Dut-$dut3 configure -cli_timeout 200
    # Dut-$dut3 configure -timeout 200
    # if {$opt(mode) == "regular"} {
        # filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "BGP" "Management"}

        # if {[Dut-$dut3 cget -redundantSystem] != "false"} {
            # # start memory leak checks on standby CPM
            # filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "BGP" "Management"}
        # }
    # }
    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr true] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    #egress filter for ICMp unreachable
    if {$IngrEgr == "true"} {
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"}
    }
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} {
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }
     if { [RP_applyFilter_Cli $dut6 ingress 61 -RC GRT -intf FD_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut6 ingress 62 -RC VRF -intf FE_intf -sap $topoMap(Dut-$dut6,1/1/2)] != "OK" } {set Result "FAILED"}   
     if { [RP_applyFilter_Cli $dut5 ingress 52 -RC GRT -intf EC_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut5 ingress 502 -RC GRT -intf EF_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut4 ingress 41 -RC GRT -intf DC_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut4 ingress 401 -RC GRT -intf DF_intf ] != "OK" } {set Result "FAILED"}
    #End of setup, filter config
   ##gash_interpreter
    

       
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    
   
    log_msg INFO "Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP"
    log_msg INFO "############################################################################################################\n"
    
    log_msg INFO "verification of streams without any RP setup"
    log_msg INFO "--------------------------------------------"
    

    # #start stream check to webserver
    # foreach stream $streamIdList {
        # log_msg INFO "Starting Ixia stream $stream"
        # filterTCAM_ixStartTraffic $stream -direction ingress

        # log_msg INFO "Check all packets should be forwarded to webserver"
        # if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        # } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }
        
        # log_msg INFO "Stoping Ixia stream $stream"
        # filterTCAM_ixStopTraffic $stream -direction ingress
        # after 1000
    # }
    # RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    # RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    # log_msg INFO "--------------------------------------------\n"

        # set description [boxifyText "Configure destinations with $opt(HT) health test defined"]
        # log_msg INFO "\n$description"
        # #CLI and SNMP methods
       
    #Create destinations

        #gash_interpreter
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
           #if CLI if SNMP
        set method [RP_lrandom "CLI SNMP"]
    
        #WCCP
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router $opt(RProuter)"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
       
        #WCCP-2
        lappend cmdList "/configure filter redirect-policy wccp2 create" 
        lappend cmdList "/configure filter redirect-policy wccp2 no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp2 router $opt(RProuter)"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $destWccp2Addr] create ping-test"
        } else {
            lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $destWccp2Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $destWccp2Addr] no shutdown"
        
        lappend cmdList "/configure filter log 121 create"
        lappend cmdList "/configure filter log 122 create"
        lappend cmdList "/configure filter log 123 create"
        lappend cmdList "/configure filter log 124 create"
        
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create description filterForWccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create default-action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create action forward redirect-policy wccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create log 121"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 10 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 10 create action forward redirect-policy wccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 10 create log 122"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 50 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 50 create action forward redirect-policy wccp2"    
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 50 create log 123" 
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create description filterForOtherAction"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create default-action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 create action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 log 124"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        
        #ifconfig eth1:2 80.1.1.3
         
         
        gash_interpreter 
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]    
        log_msg INFO "Configured traffic stream bits: $streamDestBit" 
         

        RP_verifyRPAssoc wccp "100-1 100-3"
        RP_verifyRPAssoc wccp2 {"500-1 10 50"}
        
        log_msg INFO "###############################################"    
        log_msg INFO " Renum /copy filter PART"
        log_msg INFO "###############################################"
        log_msg INFO "###############################################"    
        log_msg INFO "Renum filter 100 entry 1 to filter 100 entry 10"
        log_msg INFO "###############################################" 
        
        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 1 10"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }

            set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 3 11"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            RP_verifyRPAssoc wccp "100-10 100-11"
            RP_IomShellVerify 100 10 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
            RP_IomShellVerify 100 11 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]

        
        
       
        
        RP_showCheck wccp -RP_activeDest  [ipConvert $family $dest1Addr]
        
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 10 
    
    
    
        log_msg INFO "#####################################################################"
        log_msg INFO "Overwrite filter 100 entry 10 with filter 500 entry 1 (with other RP)"
        log_msg INFO "#####################################################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 1 dst-entry 10 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        
        log_msg DEBUG "$filter100"
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp2 [ipConvert $family $destWccp2Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp2 [ipConvert $family $destWccp2Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        
        
        RP_verifyRPAssoc wccp "100-11"
        RP_verifyRPAssoc wccp2 {"100-10" "500-1 10 50"}
        RP_IomShellVerify 100 10 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]

        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 10 
        
        set cmd "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_verifyRPAssoc wccp "100-10 100-11" 
        RP_verifyRPAssoc wccp2 {"500-1 10 50"}   
       
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        
       
       
        log_msg INFO "#####################################################################"
        log_msg INFO "Overwrite filter 100 entry 10 with filter 500 entry 10 (with other RP)"
        log_msg INFO "#####################################################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 10 dst-entry 10 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp "100-11"
        RP_verifyRPAssoc wccp2 {"100-10" "500-1 10 50"}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_IomShellVerify 100 10 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]

        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 10 
        
        Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
        RP_verifyRPAssoc wccp "100-10 100-11" 
        RP_verifyRPAssoc wccp2 {"500-1 10 50"} 
    
    
        log_msg INFO "#####################################################################"
        log_msg INFO "Overwrite filter 100 entry 10 with filter 500 entry 50 (with other RP)"
        log_msg INFO "#####################################################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 50 dst-entry 10"
        set r1 [cookCliData [Dut-$dut3 sendCliCommand $cmd]]
        if { [regexp "MINOR: CLI Destination $filterType filter \"100\" entry \"10\" exists - use \"overwrite\"" $r1] == 0 } { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
             
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 50 dst-entry 10 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp "100-11"
        RP_verifyRPAssoc wccp2 {"100-10" "500-1 10 50"}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_IomShellVerify 100 10 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]

        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 10 
        
        Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
        RP_verifyRPAssoc wccp "100-10 100-11" 
        RP_verifyRPAssoc wccp2 {"500-1 10 50"} 
        
        
        log_msg INFO "#####################################################################"
        log_msg INFO "Copy/ Overwrite non-existing filter 100 entry 5/6 with filter 500 entry 50 (with other RP)"
        log_msg INFO "#####################################################################"
        
        # 100:5 does not exist, but we try to overwrite
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 50 dst-entry 5 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 10 dst-entry 6"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp "100-10 100-11"
        RP_verifyRPAssoc wccp2 {"100-5 6" "500-1 10 50"}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_IomShellVerify 100 5 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]

        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 5
        
    
      
        
        log_msg INFO "###############################################"
        log_msg INFO "Overwrite whole filter 100 with filter 500 "
        log_msg INFO "###############################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp ""
        RP_verifyRPAssoc wccp2 {"100-1 10 50" "500-1 10 50"}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
       
       
        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 1"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 10"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 50"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create description HostIngress"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
                
                #lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 2 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $subnetMask]"
                if { $filterType == "IP"} {
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create match protocol icmp"
                } else { 
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create match next-header ipv6-icmp" 
                }
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create action forward"
                
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create description ICMP_unreachability"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create action forward"
                if { $filterType == "IP"} {
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match protocol icmp"
                } else { 
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match next-header ipv6-icmp" 
                }
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match icmp-type dest-unreachable"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match dst-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
                
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create match src-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create match dst-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create action forward redirect-policy wccp"
        foreach {cmd} $cmdList {
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
       
       
       
        log_msg INFO "###############################################"
        log_msg INFO "Copy whole filter 100 to nonexisting filter 101 "
        log_msg INFO "###############################################"
     
        set cmd "/configure filter copy [getVar4 $filterType]-filter 100 to 101"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter101 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 101"]] 
        log_msg DEBUG "$filter101"
        
        RP_verifyRPAssoc wccp {"100-10" "100-11" "101-10" "101-11"}
        RP_verifyRPAssoc wccp2 {"500-1 10 50"}

        set r [filterTCAM_applyFilter $setupType Ingress 101]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
        RP_IomShellVerify 101 10 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 101 -host_filter_entry 10

        set r [filterTCAM_applyFilter $setupType Ingress 100]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
        Dut-$dut3 sendCliCommand "/configure filter no [getVar4 $filterType]-filter 101"
        
        
        #gash_interpreter
        log_msg INFO "###############################################"
        log_msg INFO "Copy whole filter 550 with action forward to filter 100 "
        log_msg INFO "###############################################"
     
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 550 to 100"
        set r1 [cookCliData [ Dut-$dut3 sendCliCommand $cmd]]
        if { [regexp "MINOR: CLI Destination [getVar1 $filterType] filter \"100\" exists but \"overwrite\" keyword is not given." $r1] == 0} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 550 to 100 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp ""

        RP_IomShellVerify 100 1 "" "" -findPBR 0  
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)

        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 1"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 10"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 50"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create description HostIngress"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
                
                #lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 2 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $subnetMask]"
                if { $filterType == "IP"} {
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create match protocol icmp"
                } else { 
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create match next-header ipv6-icmp" 
                }
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create action forward"
                
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create description ICMP_unreachability"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create action forward"
                if { $filterType == "IP"} {
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match protocol icmp"
                } else { 
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match next-header ipv6-icmp" 
                }
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match icmp-type dest-unreachable"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match dst-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
                
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create match src-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create match dst-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create action forward redirect-policy wccp"
        foreach {cmd} $cmdList {
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    
    
        log_msg INFO "###############################################"
        log_msg INFO "Copy whole filter 100 to existing filter 550 with action forward "
        log_msg INFO "###############################################"
     
        set cmd "/configure filter copy [getVar4 $filterType]-filter 100 to 550 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter550 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 550"]] 
        log_msg DEBUG "$filter550"
        
        RP_verifyRPAssoc wccp {"100-10" "100-11" "550-10" "550-11"}

        set r [filterTCAM_applyFilter $setupType Ingress 550]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
        RP_IomShellVerify 550 10 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 550 -host_filter_entry 10

        set r [filterTCAM_applyFilter $setupType Ingress 100]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
       
        set cmdList ""
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 550"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create description filterForOtherAction"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create default-action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 create action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 log 124"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  

  
        #gash_interpreter
        log_msg INFO "#####################################################"
        log_msg INFO "Overwrite filter 100 entry 10 with filter 550 entry 1 (action forward)"
        log_msg INFO "#####################################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 550 to 100 src-entry 1 dst-entry 10 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 

        
        RP_verifyRPAssoc wccp "100-11"
        RP_IomShellVerify 100 10 "" "" -findPBR 0
               
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 10
    
        Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
       
        
        
        log_msg INFO "#####################################################"
        log_msg INFO "Renum filter 100 entry 10 to 100 entry 101 and copy entry to filter 500 entry 1 "
        log_msg INFO "#####################################################"


        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 10 101"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 100 to 500 src-entry 101 dst-entry 1 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter500 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 500"]] 
        log_msg DEBUG "$filter500"
        
        set r [filterTCAM_applyFilter $setupType Ingress 500]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-101" "100-11" "500-1"}
        RP_IomShellVerify 500 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
   
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 500 -host_filter_entry 1
    
        Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create action forward"
        
        set r [filterTCAM_applyFilter $setupType Ingress 100]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
 
        log_msg INFO "#####################################################"
        log_msg INFO "Renum filter 100 entry 101 to 100 entry 1 "
        log_msg INFO "#####################################################"

        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 101 1"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set cmd "/configure filter [getVar4 $filterType]-filter 100 default-action drop"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100" 
       
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-1" "100-11"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]

        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 1
  
  
  
        log_msg INFO "#####################################################"
        log_msg INFO "Check default action of filter in case of no match - drop "
        log_msg INFO "#####################################################"
        
        log_msg INFO "Modify filter 100 entry 1 in order to achieve no match"
        set newIP [ipConvert $family 99.99.0.0]
        set cmd "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create match dst-ip [ipConvert $family $newIP]/[RP_maskConvert $family $fullMask]"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 none
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
  
        set cmd "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
  
        set cmdList ""
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 500 "
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 550 "       
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
  
  
  
  
        log_msg INFO "###############################################"    
        log_msg INFO " Embed filter PART"
        log_msg INFO "###############################################"
        log_msg INFO "#####################################################"
        log_msg INFO "Embed embedded filter without offset"
        log_msg INFO "#####################################################"  
  
        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create description EmbeddedFilter"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create scope embedded"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create default-action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 1 create action forward redirect-policy wccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 1 log 121"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 5 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 5 create action forward redirect-policy wccp"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 5 log 122"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }      
        
        # entry 1 overrule embedded filter
        set cmd "/configure filter [getVar4 $filterType]-filter 100 embed-filter 660"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100 entry 1 | match Entry"]]
        if { [regexp "overwrites embedded filter 660 entry 1" $r] == "0"} { log_msg ERROR "embedding filter check failed : \n $r" ; set Result "FAILED"}
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-1 5 11" "660-5"}
        RP_verifyRPAssoc wccp2 {"660-1"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
  
  
  
  
        log_msg INFO "#####################################################"
        log_msg INFO "Renum filter 100 entry 1 to entry 30"
        log_msg INFO "#####################################################"  
  
        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 1 30"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100" 
  
        RP_verifyRPAssoc wccp {"100-5 11 30" "660-5"}
        RP_verifyRPAssoc wccp2 {"100-1" "660-1"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    
  
        set cmd "/configure filter [getVar4 $filterType]-filter 660 entry 1 action forward redirect-policy wccp"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_verifyRPAssoc wccp {"100-1 5 11 30" "660-1 5"}
        RP_verifyRPAssoc wccp2 {""}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
  
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    
        set cmd "/configure filter [getVar4 $filterType]-filter 660 entry 1 action forward redirect-policy wccp2"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    
        set cmd "/configure filter [getVar4 $filterType]-filter 100 no embed-filter 660"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
  
  
  
  
        log_msg INFO "#####################################################"
        log_msg INFO "Embed embedded filter with offset"
        log_msg INFO "#####################################################"  
        gash_interpreter
  
        #100:2 30     660:1 5  --> 100:3 7
        set cmd "/configure filter [getVar4 $filterType]-filter 100 embed-filter 660 offset 2"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-7 11 30" "660-5"}
        RP_verifyRPAssoc wccp2 {"100-3" "660-1"}
        RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 3
  
        log_msg INFO "\nRenum entry 1 to 661 of embedded filter \n"
        set cmd "/configure filter [getVar4 $filterType]-filter 660 renum 1 661"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_verifyRPAssoc wccp {"100-7 11 30" "660-5"}
        RP_verifyRPAssoc wccp2 {"100-663" "660-661"}
        RP_IomShellVerify 100 7 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 7
  
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100 entry 7 | match Entry"]]
        if { [regexp "inserted by embedded filter 660 entry 5" $r] == "0"} { log_msg ERROR "embedding filter check failed : \n $r" ; set Result "FAILED"}

        log_msg INFO "\nCreate entry 7 in filter100 to overwrite embedded entry \n"
        set cmd "/configure filter [getVar4 $filterType]-filter 100 entry 7 create action forward"
        set r1 [cliCne Dut-$dut3 $cmd]
        set cmd "/configure filter [getVar4 $filterType]-filter 100 entry 7 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask] "
        set r1 [cliCne Dut-$dut3 $cmd]
        
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100 entry 7 | match Entry"]]
        if { [regexp "overwrites embedded filter 660 entry 5" $r] == "0"} { log_msg ERROR "embedding filter check failed : \n $r" ; set Result "FAILED"}
        after 2000
        RP_IomShellVerify 100 7 "" "" -findPBR 0
        
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 7
  
        log_msg INFO "\nDelete entry 7 in filter100 to enable embedded entry \n"
        set cmd "/configure filter [getVar4 $filterType]-filter 100 no entry 7"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        after 1000
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100 entry 7 | match Entry"]]
        if { [regexp "inserted by embedded filter 660 entry 5" $r] == "0"} { log_msg ERROR "embedding filter check failed : \n $r" ; set Result "FAILED"}
  
        RP_IomShellVerify 100 7 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 7
  
  
        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no embed-filter 660"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 renum 30 1" 
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 660" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
  
  
  
  
        log_msg INFO "###############################################"    
        log_msg INFO " System filter PART - apply system filter, verify admin save and rollback"
        log_msg INFO "###############################################"
        #save the third rollback restore point - after network config
        
        
        RP_rollbackSave $dut3 1
        
               
  
        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 create scope system"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 description SystemFilter" 
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 entry 100 create action forward redirect-policy wccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 entry 100 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 entry 100 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 chain-to-system-filter"
        lappend cmdList "/configure filter system-filter [getVar4 $filterType] 666"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        
        log_msg INFO "Executing admin save/ admin save detail:"
        Dut-$dut3 sendCliCommand "exit all"
        Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-systemRP.cfg" -extendedTimeout 60  -extendedMatchString "#"
        Dut-$dut3 sendCliCommand "/admin save detail $config_dir/Dut-$dut3-detail_sytemRP.cfg" -extendedTimeout 60  -extendedMatchString "#"
    
    
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-1" "100-11"}
        RP_verifyRPAssoc wccp2 {"666-100"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 666 100 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 666 -host_filter_entry 100
     
        
        set cmd "/configure filter [getVar4 $filterType]-filter 666 entry 100 create action forward redirect-policy wccp"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_verifyRPAssoc wccp {"100-1" "100-11" "666-100"}
        RP_verifyRPAssoc wccp2 ""
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 666 100 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
            
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 666
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 666 -host_filter_entry 100
        
        
        set cmd "/configure filter [getVar4 $filterType]-filter 666 entry 100 create action forward redirect-policy wccp2"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_verifyRPAssoc wccp {"100-1" "100-11"}
        RP_verifyRPAssoc wccp2 {"666-100"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 666 100 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
            
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 666
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 666 -host_filter_entry 100
    
        #rollback revert
     gash_interpreter    
        log_msg INFO "#########################################################"
        log_msg INFO "#####         rollback to the restore point          ####" 
        log_msg INFO "#########################################################"
        # # rollback to the restore point
        Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
        Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
        if {($filterType == "IPv6") && ($itfBind == "subsap")} {
                set subhostIp [ipConvert $filterType $subhostIp1]
                set hostType "dhcp6_IANA"
                filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
        }
        
        
        log_msg INFO "performing ROLLBACK to latest-rb"
        RP_rollbackRestore $dut3 "latest-rb"

           
        if {($itfBind == "spoke") || ($itfBind == "mesh") } {
            log_msg DEBUG "Waiting for SDP to become operational..."
                        set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                        set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                        set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
        }
        after 15000
        
         #recreation host on sla profile after execution of config
        if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            filter_subinsert_radius_recreateHost $subhostIp $srcMac_13 -numStreams $numStreams -hostType $hostType -slaName sla2 -hostSucceed true -clearFirst true
        }

        #binding filters via proc - to ensure that host will be on sla1
        set r [filterTCAM_applyFilter $setupType Ingress 100]
        if {$r != "noError"} { set Result "FAILED"}
        if {$IngrEgr == "true"} {
            #egress filter
            set r [filterTCAM_applyFilter $setupType Egress 100]
            if {$r != "noError"} { set Result "FAILED"}
        }    
            RP_set_dut
        
        after 2000
        if {$IngrEgr == "false"} { 
            RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1
        }
        
        
  
        #verifycation after rollback
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
  
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 1  

        
        set admSaveExecOut    [Dut-$dut3 sendCliCommand "exec $config_dir/Dut-$dut3-systemRP.cfg" -extendedTimeout 200  -extendedMatchString "#"]
        set admSaveExecOut2    [Dut-$dut3 sendCliCommand "exec $config_dir/Dut-$dut3-systemRP.cfg" -extendedTimeout 200  -extendedMatchString "#"]
        set admSaveDetExecOut [Dut-$dut3 sendCliCommand "exec $config_dir/Dut-$dut3-detail_sytemRP.cfg" -extendedTimeout 200  -extendedMatchString "#"]
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
  
        set cmd "/configure filter [getVar4 $filterType]-filter 100 no chain-to-system-filter"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_verifyRPAssoc wccp {"100-1" "100-11"}
        RP_verifyRPAssoc wccp2 {"666-100"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 666 100 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
            
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 1   
  
        set cmdList ""
        lappend cmdList "/configure filter system-filter no [getVar4 $filterType] 666"
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 666"  
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        } 
  
  
  
  
        
        if {($itfBind == "subsap") || ($opt(itfBind) == "serviceAware")} {
            #do nothing
        } else {
            log_msg INFO "###############################################"    
            log_msg INFO " Exclusive filter PART "
            log_msg INFO "###############################################"
      
            gash_interpreter
            
            set cmdList ""
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 create scope exclusive"
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 description ExclusiveFilter" 
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 entry 1 create action forward redirect-policy wccp2"
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 entry 1 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
            
            foreach {cmd} $cmdList {
                log_msg INFO "Dut-$dut3 - $cmd"
                set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }  
      
            set r [filterTCAM_applyFilter $setupType Ingress 700]
            if {$r != "noError"} { set Result "FAILED"}
            RP_set_dut
      
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
            RP_verifyRPAssoc wccp2 {"700-1"}
          
            RP_IomShellVerify 700 1 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
                
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 700
            RP_verifyTrafficFlow $streamDestBit 1 dest3
            RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 700 -host_filter_entry 1   
      
        
            # filterTCAM_ixStartTraffic 1 -direction ingress
            # filterTCAM_ixStopTraffic 1 -direction ingress
            # check_num_packets_captured $ixport3

            
            #try to apply on x3 ingres/egres to/from IXIA
            
            foreach direction "ingress egress" {
                set cmd ""
                if { $opt(svcType) == "vprn" } {
                    if { [regexp (WRvprnRCO) $setupType] } {
                        set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"
                    } else {
                        set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"
                    }
                } elseif {$opt(svcType) == "L2Service" } {
                    if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700" }
                    if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"}
                } elseif {$opt(svcType) == "rvpls" } {
                    set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"
                } else {
                    set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"
                }  
                
                set r [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if { [regexp "Filter has exclusive scope and is already in use" $r] == "0" } { log_msg ERROR "Scope filter used twice"; log_msg ERROR "$r" ;set Result "FAILED"}
            }
 
  
        }
  
  
  
  
        RP_rollbackCleanup $dut3
  
        log_msg INFO "Deleting configuration"
        saveOrRestore delete
        WccpEnhancedCleanUp
        
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
#end of proc
}


proc filterWccpEnhanced_radOverride_runTest {args} {

    global testdir logdir ixia_port

    global dutList sdpList svcListList family testResultFlag
    global itfType svcType itfBind itfMode filterType
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName

    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl 

    set opt(debug)       false
    set opt(mode)        regular
    set opt(testOptions) "" ; # not used in this proc at this point in time
    set opt(hostType)    ""
    set opt(setupType)   ""
    set opt(filterType) "IP"
    set opt(deconfig)   true
    set opt(svcType)    ""
    set opt(debugPrint) true
    set opt(sourceRC)   ""
    
    getopt opt $args

    set filterType $opt(filterType)    
    set testID $::TestDB::currentTestCase
    set result PASSED
    set testResultFlag "OK"
    set setupErrorFlag "NOERROR"

       if {$opt(hostType) == ""} {
        ### randomly choose hostType and setupType for ESM test cases
        if {([getGlobalVar physTopology] == "scaleBed")} {
            if { $opt(sourceRC) == "grt"} {
                set hostTypeIPv4 "dhcp4"
            } else { 
                set hostTypeIPv4 "arpHost"
            }
            set hostTypeIPv6 [lindex "dhcp6_IAPD dhcp6_IANA" [random 2]]
        } else {
            if { $opt(sourceRC) == "grt"} {
                set hostTypeIPv4 [lindex "dhcp4 pppoe_4 pppoe_46" [random 3]]
            } else {
                set hostTypeIPv4 [lindex "dhcp4 pppoe_4 pppoe_46 arpHost" [random 4]] 
            }         
            set hostTypeIPv6 [lindex "dhcp6_IAPD dhcp6_IANA pppoe_6 pppoe_46" [random 4]]
        }
        
        
 
        if { $opt(sourceRC) == "grt"} {                
            set setupTypeIPv4 [lindex "nullEncap_iesRCO_subsap ethernet_iesRCO_subsap qinq_iesRCO_subsap lag_iesRCO_subsap" [random 4]]
            set setupTypeIPv6 [lindex "nullEncap_iesRCO_subsap ethernet_iesRCO_subsap qinq_iesRCO_subsap lag_iesRCO_subsap" [random 4]]
        } else {
            if { $hostTypeIPv4 == "arpHost" } {
                set setupTypeIPv4 "ethernet_vprnRCO_subsap_CreditCntrl" 
            } else { 
                set setupTypeIPv4 [lindex "nullEncap_vprnRCO_subsap ethernet_vprnRCO_subsap qinq_vprnRCO_subsap lag_vprnRCO_subsap" [random 4]]
            }    
            set setupTypeIPv6 [lindex "nullEncap_vprnRCO_subsap ethernet_vprnRCO_subsap qinq_vprnRCO_subsap lag_vprnRCO_subsap" [random 4]]
        }
  
        
    } else {
        if {$opt(filterType) == "IP"} {
            set hostTypeIPv4 $opt(hostType)
            set setupTypeIPv4 $opt(setupType)
        }
        if {$opt(filterType) == "IPv6"} {
            set hostTypeIPv6 $opt(hostType)
            set setupTypeIPv6 $opt(setupType)
        }
        
    }
    
    
    
     log_msg DEBUG "####################################################"
    if { $opt(filterType) == "IP" } {
        log_msg DEBUG "Randomly choosed hostType: $hostTypeIPv4 "
        log_msg DEBUG "Randomly choosed setupType: $setupTypeIPv4 "
    } else {
        log_msg DEBUG "Randomly choosed hostType: $hostTypeIPv6 "
        log_msg DEBUG "Randomly choosed setupType: $setupTypeIPv6 "
    }
    log_msg DEBUG "####################################################"

    
    log_msg INFO "opt(filterType)= $opt(filterType)"
    log_msg INFO "filterType= $filterType"
    log_msg INFO "opt(sourceRC)= $opt(sourceRC)"
    log_msg INFO "opt(testOptions)= $opt(testOptions)"
    
    
    if {$opt(filterType) == "IP"} {
        filter_radOverride_runTest $opt(filterType) -hostType $hostTypeIPv4 -select $setupTypeIPv4 -testProc WccpEnhancedESM -testOptions $opt(testOptions) -mode $opt(mode)  
    } else {
        filter_radOverride_runTest $opt(filterType) -hostType $hostTypeIPv6 -select $setupTypeIPv6 -testProc WccpEnhancedESM -testOptions $opt(testOptions) -mode $opt(mode)
    }

    if { $result == "PASSED" } {
        log_result PASSED "Test Case $testID PASSED"
    } else {
        log_result FAILED "Test Case $testID FAILED"
    }

}


proc filter_radOverride_WccpEnhancedESM { setupType args } {
    
    
    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)       false
    set opt(mode)        regular
    set opt(testOptions) "" 
    set opt(hostType)    ""
    set opt(deconfig)   true
    set opt(svcType)    ""
    set opt(debugPrint) true
    set opt(filterType) "IP"
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(HT)         "unicast"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "false"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(case)    ""
    set opt(dest1RC)    ""
    set opt(dest2RC)    ""
    set opt(dest3RC)    ""
    set opt(dest4RC)    ""
    set opt(quick)      "true"
    set CheckRadiusFilter "true"
    
    getopt opt $args
    
    log_msg INFO "testOptions: $opt(testOptions)"  
    
    gash_interpreter
    
    if {$opt(testOptions) != ""} {    
        set paramsNum [llength $opt(testOptions)]
        set opt(filterType) [lindex $opt(testOptions) 0]
        set opt(case)       [lindex $opt(testOptions) 1]
        switch $paramsNum {
           "3" { set opt(dest1RC)    [lindex $opt(testOptions) 2]}
           "4" { set opt(dest2RC)    [lindex $opt(testOptions) 3]}
           "5" { set opt(dest4RC)    [lindex $opt(testOptions) 4]}
        }
    }
    if {[regexp "vprn" $setupType] == "1" } { set opt(svcType) "vprn"}
    if {[regexp "ies" $setupType] == "1" } { set opt(svcType) "grt"} 
    
    
        
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
     
    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    } 
    

    # streams with IP options, unles it is pppoe host - pppoe does not support Ip options/hop-by-hop
    # handlePacket has no support for pppoe with fragmentation flags, ip-options, syn/ack, port-nums, icmp-type/code
    # limited set of streams to cover different protocols
    
    handlePacket -portList [list $ixport1 $ixport3] -action reset -scheduler sequential
    if {[regexp {pppoe} $opt(hostType)]} { set opt(pppoe) true } else { set opt(pppoe) false }
    set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions true -pppoe $opt(pppoe)]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
    RP_set_dut
   
   

    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true" } {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"} {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"} {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"} {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"} {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   
    gash_interpreter
   
    ### make this test run on dhcp4, dhcp6_IANA, pppoe_4, pppoe_6, pppoe_46
    set hostType $opt(hostType)
    if {[regexp {arpHost} $hostType]} { set ixHost  1 } else { set ixHost  0 } ; # second host to remote ixPort in case of arpHost Setup
    if {[regexp {pppoe_46} $hostType]} { set numHost 2 } else { set numHost 1 } ; # 2 hosts in case of pppoe_46
   
    set dualRsc46 false ; # resource difference should always be there - fixed with dts128203
 
    # use subhostIp1,2,3 and subhostMac1,2,3 corresponding with ixia subscriber streams
    set subhostIp [ipConvert $filterType $subhostIp1]
    set sapName $sapName_3_2$encapName
    set slaName sla1
   
    # clear host in order to be able assign filter to sla-profile - otherwise you get snmp error: SLA profile is in use by one or more active subscribers
    filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
   
    RP_rollbackSave $dut3 1
   
   #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
 
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
 

    
    if {$filterType == "IP"} { set fTypeList "IP 4"} else { set fTypeList "IPv6 6"}
    # if {[regexp {46} $hostType]} {
      # if {$filterType == "IP"} {
        # set fTypeList "IP 4 IPv6 6"
        # set filterType2 IPv6
      # } else {
        # set fTypeList "IPv6 6 IP 4"
        # set filterType2 IP
      # }
    # }
   
    if {$filterType == "IP"} {
        set fTypeList "IP 4 IPv6 6"
        set filterType2 IPv6
    } else {
        set fTypeList "IPv6 6 IP 4"
        set filterType2 IP
    }


    

    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr true] != "OK" } {set Result "FAILED"}
    log_msg INFO "Modify IP filter 100"
    set r1 [Dut-$dut3 createIpFilterPolicy 100]
    set r2 [Dut-$dut3 setFilterInsert Radius IP 100 1000 100]
    set r3 [Dut-$dut3 setFilterInsert HostShared IP 100 1100 100]
    

    # create also filterType2 filter
    log_msg INFO "Create IPv6 filter 100"
    set r1 [Dut-$dut3 createIpv6FilterPolicy 100]
    set r2 [Dut-$dut3 setFilterInsert Radius IPv6 100 1000 100]
    set r3 [Dut-$dut3 setFilterInsert HostShared IPv6 100 1100 100]
    
    set cmdList ""
    lappend cmdList "/configure filter redirect-policy wccp100 create" 
    lappend cmdList "/configure filter redirect-policy wccp100 no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp100 router $opt(RProuter)"
    lappend cmdList "/configure filter redirect-policy wccp100 create destination [ipConvert [getVar4 $filterType2] $dest1Addr] create no shutdown"
    
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 100 create description Wccp100Ingress"
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 100 create entry 1 create match dst-ip [ipConvert [getVar4 $filterType2] $dstIp]/[RP_maskConvert [getVar4 $filterType2] $fullMask]" 
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 100 create entry 1 create action forward redirect-policy wccp100"
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 100 create default-action forward"

        
    foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
    }  

    

    # assign filter to sla-profile
    log_msg INFO "Assign filter to sla-profile"
    set direction "Ingress Egress"
    set filterID  100
    foreach {fType fvers} $fTypeList {
        foreach {dirStr dir} "Ing ingress Egr egress" {
            ### SNMP
            log_msg INFO "Trying to associate $dir $fType filter $filterID with sla-profile $slaName"
            set r [Dut-$dut3 setTmnxSLAProf[set dirStr][getVar3 $fType]FilterId $slaName $filterID]
            if {$r != "noError"} {
                log_msg ERROR "failed to associate $dir $fType filter 8 with sla-profile $slaName - returned $r" ; set result FAILED
            }
        }
    }
    
    # #binding filters
    # #ingress filter
    # set r [filterTCAM_applyFilter $setupType Ingress 100]
    # if {$r != "noError"} { set Result "FAILED"}
    # RP_set_dut
    # #egress filter for ICMp unreachable
    # set r [filterTCAM_applyFilter $setupType Egress 100]
    # if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    
    #egress to Ixia
    set cmdList ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            lappend cmdList "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
            lappend cmdList "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 ingress filter [getVar4 $filterType] 301"
        } elseif { [regexp (vprnRCO_subsap_CreditCntrl) $setupType]} {
            lappend cmdList "/configure service vprn $svc1 subscriber-interface subif_2dsap group-interface grpif_2dsap sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
            lappend cmdList "/configure service vprn $svc1 subscriber-interface subif_2dsap group-interface grpif_2dsap sap $port_3_3:$svc1 ingress filter [getVar4 $filterType] 301"
        } else {
            lappend cmdList "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
            lappend cmdList "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 ingress filter [getVar4 $filterType] 301"
        }
    } else {
        lappend cmdList "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        lappend cmdList "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 ingress filter [getVar4 $filterType] 301"
    }  
    foreach cmd $cmdList {
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }    
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} {
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }
     if { [RP_applyFilter_Cli $dut6 ingress 61 -RC GRT -intf FD_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut6 ingress 62 -RC VRF -intf FE_intf -sap $topoMap(Dut-$dut6,1/1/2)] != "OK" } {set Result "FAILED"}   
     if { [RP_applyFilter_Cli $dut5 ingress 52 -RC GRT -intf EC_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut5 ingress 502 -RC GRT -intf EF_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut4 ingress 41 -RC GRT -intf DC_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut4 ingress 401 -RC GRT -intf DF_intf ] != "OK" } {set Result "FAILED"}
    #End of setup, filter config
   
   
   
   
    #gash_interpreter
  # use shell commands to set radius-cache timeout to smaller value (check with "word sbmRadiusCacheTimeout" in kernel)
    Dut-$dut3 sendCliCommand "shell sbmRadiusCacheSetTimeout 1"
    Dut-$dut3 sendCliCommand "shell cardcmd [Dut-$dut3 findInactiveCpm] sbmRadiusCacheSetTimeout 1"
    # for arp-host also disable min-auth-interval of 1 minute via shellcmd
    Dut-$dut3 sendCliCommand "shell setVar8 arpHostAlwaysReauth 1"
    Dut-$dut3 sendCliCommand "shell cardcmd [Dut-$dut3 findInactiveCpm] setVar8 arpHostAlwaysReauth 1"
    set waitHostSetup    3000
    set waitRadiusCache  3000


    
    

    # set debug logging with filters
    Dut-$dut3 sendCliCommand "/configure log log-id 10 from main"
    Dut-$dut3 sendCliCommand "/configure log log-id 10 to memory"




    

    
    
    # log_msg INFO "----------------------------------------------------"
    # log_msg INFO " Host creation with sla filter"
    # log_msg INFO "----------------------------------------------------"

    #gash_interpreter
#    print_console_msg "Clear host before starting test"
#    filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    after 3000
    print_console_msg "Host setup with sla filter"
    set SubscrFilterString "ingr-v4:-2, egr-v4:-2, ingr-v6:-2, egr-v6:-2"   
    set hostFltr(ingress) 0
    set hostFltr(egress) 0
    set ixStreamNbr $numStreams
  
    #Host creation
    filter_radOverride_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "initial authentication" true $ixStreamNbr -filterAttr $SubscrFilterString
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    filter_radOverride_checkCliSnmp $hostType $subhostIp $subhostMac1 $slaName $hostFltr(ingress) $hostFltr(egress) 100

    
    log_msg INFO "verifying resources on CPM and IOM are matching for Dut-$dut3"
    set r [ resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 1 ]
    if {$r != "OK"} { log_msg ERROR "resource mismatch between CPM and IOM for Dut-$dut3, found $r" ; set result FAILED }
   
   
   
   
   #gash_interpreter
   ##########################################################################################################################################
    #### 1st part - Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP
    ########################################################################################################################################## 
    
    set description [boxifyText "Step 1 - Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP"]
    log_msg INFO "\n$description \n"
    
    log_msg INFO "verification of streams with padding without any RP setup"
    log_msg INFO "--------------------------------------------"
    
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) 

if {$opt(quick) != "true"} {    
    #start stream check to webserver
    foreach stream $streamIdList {
        log_msg INFO "Starting Ixia stream $stream"
        filterTCAM_ixStartTraffic $stream -direction ingress

        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }
        
        log_msg INFO "Stoping Ixia stream $stream"
        filterTCAM_ixStopTraffic $stream -direction ingress
        after 1000
    }
    RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    log_msg INFO "--------------------------------------------\n"
}
    
    set description [boxifyText "Configure destinations with $opt(HT) health test defined"]
    log_msg INFO "\n$description"
    #CLI and SNMP methods
       
    #Create destinations
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
     
     
    #if CLI if SNMP
    set method [RP_lrandom "CLI SNMP"]
    
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router Base"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"

        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"

        }
        lappend cmdList "/configure filter redirect-policy wccp router $opt(RProuter)"        
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    
#gash_interpreter    
    Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-setup.cfg" -extendedTimeout 60  -extendedMatchString "#"
    
    set admSaveExecOut [Dut-$dut3 sendCliCommand "exec $config_dir/Dut-$dut3-setup.cfg" -extendedTimeout 200  -extendedMatchString "#"]
    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
        
    #check active dests
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    log_msg INFO "\n"
    
    
    #verification of streams
    log_msg INFO "verification of streams with RP setup - active dest [ipConvert $family $dest1Addr]"
    log_msg INFO "----------------------------------------------------------------------------------"
    RP_clearFilter $dut3 $opt(dest3support)  $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    
    
    #set streamDestBit  for streams with IP options / hop by hop
    if {$opt(pppoe) != "true"} {
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ] 
    } else {   
        if {$filterType == "IP"} {set streamDestBit "1 1 1 1 1 1 1 1" } else {set streamDestBit "1 1 1 1 1 1"}
    }
    log_msg INFO "Configured traffic stream bits: $streamDestBit"

    log_msg INFO "Verification of streams, also with Ip options"
    foreach stream $streamIdList {
        log_msg INFO "Starting Ixia stream $stream"
        filterTCAM_ixStartTraffic $stream -direction ingress
        if { [lindex $streamDestBit [expr $stream -1]] == "x" } {
            log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
            if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
            } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
        
        } elseif { [lindex $streamDestBit [expr $stream -1]] == "1" } {
            log_msg INFO "Check all packets should be forwarded to destination 1"
            if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
            } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
            
        } elseif { [lindex $streamDestBit [expr $stream -1]] == "0" } {
            log_msg INFO "Check all packets should be forwarded to webserver"
            if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
            } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
        } 
        log_msg INFO "Stoping Ixia stream $stream"
        filterTCAM_ixStopTraffic $stream -direction ingress
        after 1000
    }
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    log_msg INFO "1 stream running on background"
    log_msg INFO "--------------------------------------------\n"
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    log_msg INFO "verification with RP setup - destinations will be unreachable"
    log_msg INFO "--------------------------------------------------------------"
    #need to deactivate destinations before ixia streams change
    if {$opt(HT) != "ping" } {
        log_msg INFO "Deconfigure remote subnets to make destinations unreachable"
        RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method subnet 
        RP_deact_dest dest2 -dest2RC $opt(dest2RC) -method subnet
        RP_routeCheck del [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
    } else {
        log_msg INFO "Shutdown destinations to be unreachable"
        RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method dest_interface
        RP_deact_dest dest2 -dest2RC $opt(dest2RC) -method dest_interface
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest3RC) -method negative
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest3RC) -method negative
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
    }
    
    #check that dest are unreachable
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp 0.0.0.0 -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp None -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT) 
    log_msg INFO "\n"
    
    #check action forward - no active dest is reachable
    log_msg INFO "Verification of action forward - no active destinations"
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } 
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            

    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"
    

    if {$opt(pppoe) != "true"} {
        #change of streams - no Ip options
        set description [boxifyText "configuration of streams without Ip options/Hop_by_hop with RP setup"]
        log_msg INFO "\n$description"
        set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false -pppoe $opt(pppoe)]
        set streamIdList ""
        for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
        filterTCAM_ixTestTraffic $streamIdList
        RP_set_dut
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) -IP_options false ] 
        log_msg INFO "Configured traffic stream bits: $streamDestBit"
    }

     
    #let 1 background stream running
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    log_msg INFO "Destinations will be reachable again - [ipConvert $family $dest1Addr] should be active again"
    log_msg INFO "Adding remote subnets to activate destinations"
    RP_act_dest dest1 -dest1RC $opt(dest1RC)
    after 1000
    RP_act_dest dest2 -dest2RC $opt(dest2RC)
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    after 1000
    
    #check active dests
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    log_msg INFO "\n"
    
        
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if {$opt(HT) == "ping"} { 
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
        }
        log_msg INFO "\n"
    }
    # unicast has some packet loss
    
    if {$opt(pppoe) != "true"} {
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set stats1 [RP_CollectStats 1]
        log_msg INFO "verification of streams without Ip options/Hop_by_hop with RP setup - active dest [ipConvert $family $dest1Addr]"
        log_msg INFO "----------------------------------------------------------------------------------------------------------------"

        log_msg INFO "Traffic verification"
        foreach stream $streamIdList {
            log_msg INFO "Starting Ixia stream $stream"
            filterTCAM_ixStartTraffic $stream -direction ingress
           
            if { [lindex $streamDestBit [expr $stream -1]] == "x" } {
                log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
                if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
                } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
            
            } elseif { [lindex $streamDestBit [expr $stream -1]] == "1" } {
                log_msg INFO "Check all packets should be forwarded to destination 1"
                if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
                } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
                
            } elseif { [lindex $streamDestBit [expr $stream -1]] == "0" } {
                log_msg INFO "Check all packets should be forwarded to webserver"
                if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
                } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
            }
           
            log_msg INFO "Stoping Ixia stream $stream"
            filterTCAM_ixStopTraffic $stream -direction ingress
            after 1000
        }    
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
    
    }
       
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    log_msg INFO "--------------------------------------------------------------\n"
    log_msg INFO "1 stream is running on background"
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    
    log_msg INFO "\Deletion of Health tests - active destination [ipConvert $family $dest1Addr]"
    # delete test - check Active dest are active without health test
    
    # CLI - SNMP
    log_msg INFO "Deconfigure $opt(HT) health test from destinations"
        if { $opt(HT) == "ping" } {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no ping-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no ping-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        } elseif { $opt(HT) == "unicast" } {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no unicast-rt-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no unicast-rt-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        }
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
     
    #check active dests
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] None $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] None $opt(HT) 
      
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"

    #set another Router , create HTs, verify no active HT and then set required router for smooth run
    if { ($opt(dest1RC) != "GRT" &&  $opt(dest2RC) != "GRT") && ($opt(dest1RC) == $opt(dest2RC)) }  { 
        log_msg INFO "1 stream is running on background"
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        set stats1 [RP_CollectStats 1]
        filterTCAM_ixStartTraffic 1 -direction ingress
        log_msg INFO "Set incorrect Router within RP setup ... No active destination is expected"
        
        #CLI - SNMP
        set cmd "/configure filter redirect-policy wccp router Base"   
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        if { $opt(HT) == "ping" } {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] ping-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] ping-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        } elseif { $opt(HT) == "unicast" } {
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] unicast-rt-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] unicast-rt-test"
            set r1 [cliCne Dut-$dut3 $cmd]
            if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        }
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
        
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp 0.0.0.0 -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp None -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        # Check if Last Action for test is: disable
        RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT)    
        RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT)
        
        #check action forward - no active dest is reachable
        log_msg INFO "Verification of action forward - no active destinations"
        log_msg INFO "Check all packets should be forwarded to Ixia webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
                } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }
           
                
        filterTCAM_ixStopTraffic 1 -direction ingress
        set stats2 [RP_CollectStats 2]
        #:if {$opt(HT) != "ping"} { RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
       
    }   
    #CLI - SNMP   
    set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    
    #let 1 background stream running 
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    #CLI - SNMP 
    log_msg INFO "Configure Health tests again - check active dest"
    if { $opt(HT) == "ping" } {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] ping-test"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] ping-test"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    } elseif { $opt(HT) == "unicast" } {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] unicast-rt-test"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] unicast-rt-test"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    }
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr] -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr] -RC $opt(dest2RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
        
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr]  -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)
    
    
    #check action redirect - active dest 1 is reachable
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 1"
        if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
        } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }

    #delete RP
    log_msg INFO "Deleting RP destinations and verification"
    #CLI or SNMP
    set cmd "/configure filter redirect-policy wccp no destination [ipConvert $family $dest1Addr]"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    set cmd "/configure filter redirect-policy wccp no destination [ipConvert $family $dest2Addr]"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]

    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp 0.0.0.0 -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp None  -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] None $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] None $opt(HT)
    
    #CLI or SNMP
    log_msg INFO "Deleting of applied RP - should be forbidden"
    set cmd "/configure filter no redirect-policy wccp"
    set r1 [cookCliData [Dut-C sendCliCommand $cmd]]      
    if { [regexp "Cannot delete redirect policy because it is in use" $r1] == 0 } {
        log_msg ERROR "unexpected behavior - Rp can not be deleted when i tit in use"; set Result "FAILED"
    }
    
    #CLI or SNMP
    log_msg INFO "Change filter action to forward"        
    #cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward redirect-policy wccp"
    cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward" 
    cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 3 create action forward" 
    log_msg INFO "Deleting of non applied RP"
    set cmd "/configure filter no redirect-policy wccp"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" 
        } else {log_msg INFO "RP deconfigured successfully \n"}
    
    log_msg INFO "Verification of action forward - no RP"
    log_msg INFO "Check all packets should be forwarded to Ixia webserver"
    if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
            } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }

    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"
     
    
   
    ##########################################################################################################################################
    #### 2nd part - check priorities, actions  
    ##########################################################################################################################################
    gash_interpreter
    
    set description [boxifyText "Step 2 - check priorities, actions of destinations with HTs"]
    log_msg INFO "\n$description \n"
    
    #CLI or SNMP
    set cmd "/configure filter redirect-policy wccp create router $opt(RProuter)"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    
    set cmd "/configure filter redirect-policy wccp no shutdown"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    
    log_msg INFO "Change filter action to forward"        
    cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward redirect-policy wccp"
    cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 3 create action forward redirect-policy wccp"
    #cliCne Dut-$dut3 "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward"    
    if {$opt(HT)== "ping"} {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
    } else { 
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
    }
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown"]
    
    if {$opt(HT)== "ping"} {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
    } else {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
    }
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"]
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
        
   

    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 120"]
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    
    #check active dests
    log_msg INFO "\nDest 2 should be active now:"
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
         
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]   
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    #check action redirect - active dest 3 is reachable with higher priority 120
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 2"
        if {[RP_verifyDest "dest2" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest2: PASSED"
        } else { log_msg ERROR " => Traffic to destination 2: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
    
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"
        
        
    #change router Base, change priority of dest2 and verify after router is set back into working instance
    if { ($opt(dest1RC) != "GRT" &&  $opt(dest2RC) != "GRT") && ($opt(dest1RC) == $opt(dest2RC)) }  { 
        #CLI or SNMP
        set cmd "/configure filter redirect-policy wccp router Base"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]
        
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp 0.0.0.0 -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp None -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        # Check if Last Action for test is: enable
        RP_LastActionCheck [ipConvert $family $dest1Addr] disable $opt(HT) 
        RP_LastActionCheck [ipConvert $family $dest2Addr] disable $opt(HT) 
        
        #CLI or SNMP
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 220"]
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    }  else {
        #CLI or SNMP
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 220"]
    }         
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
         
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]   
    filterTCAM_ixStartTraffic 1 -direction ingress 
    
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 2"
        if {[RP_verifyDest "dest2" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest2: PASSED"
        } else { log_msg ERROR " => Traffic to destination 2: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
    
    
    #shut dest2
    #dest1 should be active
    log_msg INFO "Shutdown the active dest2"
    #CLI or SNMP
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] shutdown"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable 
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)    
            
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 1"
        if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
        } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
            
                 
    #increase prior of dest1 to 400, unshut dest2
    #CLI or SNMP
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] no shutdown"]
     RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] priority 250"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT)      
            
   if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 1"
        if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
        } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
            
            
    #decrease prio od dest1,
    #CLI or SNMP
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] priority 90"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
        
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 2"
        if {[RP_verifyDest "dest2" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest2: PASSED"
        } else { log_msg ERROR " => Traffic to destination 2: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
        
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] priority 100"]
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] priority 100"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
     
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"
    
    
    
    ##########################################################################################################################################
    #### 3rd part - verify priorities, actions without HTs 
    ##########################################################################################################################################
    
    set description [boxifyText "Step 3 - check priorities, actions of destinations without HTs"]
    log_msg INFO "\n$description \n"
    
    log_msg INFO "deconfigure HTs, dest 3 should be active"
    #CLI or SNMP 
    if {$opt(HT)== "ping"} {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no ping-test"
    } else { 
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no unicast-rt-test"
    }
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }   
    if {$opt(HT)== "ping"} {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no ping-test"
    } else {
        set cmd "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no unicast-rt-test"
    }
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" } 

    
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 120"]      
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
        
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "\n"
      
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]   
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    #check action redirect - active dest 2 is reachable with higher priority 120
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 2"
        if {[RP_verifyDest "dest2" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest2: PASSED"
        } else { log_msg ERROR " => Traffic to destination 2: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
         
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n" 
    
    #change router Base - no HT -so active dest stay active, change priority of dest2 and verify after router is set back into working instance
    if { ($opt(dest1RC) != "GRT" &&  $opt(dest2RC) != "GRT") && ($opt(dest1RC) == $opt(dest2RC)) }  { 
        #CLI or SNMP
        set cmd "/configure filter redirect-policy wccp router Base"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
        
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router Base
          
        #CLI or SNMP        
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 220"]
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    }  else {
        #CLI or SNMP 
        set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] priority 220"]
    }         
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
     
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]   
    filterTCAM_ixStartTraffic 1 -direction ingress
 
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }
    
    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 2"
        if {[RP_verifyDest "dest2" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest2: PASSED"
        } else { log_msg ERROR " => Traffic to destination 2: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
    
    
    #shut dest2
    log_msg INFO "dest1 should be active"
    #CLI or SNMP
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] shutdown"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
          
            
    if { [lindex $streamDestBit 0] == "x" } {
        log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
        if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
        } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "1" } {
        log_msg INFO "Check all packets should be forwarded to destination 1"
        if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
        } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }
        
    } elseif { [lindex $streamDestBit 0] == "0" } {
        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
            
                 
    log_msg INFO "Increase priority of dest1, dest1 should be active after dest2 is up again"
    #CLI or SNMP 
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] no shutdown"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] priority 250"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
      

    if { [lindex $streamDestBit 0] == "x" } {
    log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
    if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
    } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "1" } {
    log_msg INFO "Check all packets should be forwarded to destination 1"
    if {[RP_verifyDest "dest1" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest1: PASSED"
    } else { log_msg ERROR " => Traffic to destination 1: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "0" } {
    log_msg INFO "Check all packets should be forwarded to webserver"
    if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
    } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }
            
            
    log_msg INFO "decrease prio od dest1"
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] priority 90"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest2Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)

    if { [lindex $streamDestBit 0] == "x" } {
    log_msg INFO "Check all packets are dropped - IOM2 does not support IPv6 PBR"
    if {[RP_verifyDest "none" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic: PASSED"
    } else { log_msg ERROR " => Traffic: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "1" } {
    log_msg INFO "Check all packets should be forwarded to destination 2"
    if {[RP_verifyDest "dest2" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to dest2: PASSED"
    } else { log_msg ERROR " => Traffic to destination 2: FAILED"; set Result "FAILED" }

    } elseif { [lindex $streamDestBit 0] == "0" } {
    log_msg INFO "Check all packets should be forwarded to webserver"
    if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
    } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }            
    }

    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest2Addr] priority 100"]
    set r1 [cliCne Dut-$dut3 "/configure filter redirect-policy wccp destination [ipConvert $family $dest1Addr] priority 100"]
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
 
    set cmdList ""
    if {$opt(HT)== "ping"} {
    lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] ping-test"
    lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] ping-test"
    } else {
    lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] unicast-rt-test"
    lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] unicast-rt-test"
    }
    foreach cmd $cmdList {
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    }
            
    filterTCAM_ixStopTraffic 1 -direction ingress
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
            RP_PrintStats $stats1 $stats2
    }
    log_msg INFO "\n"  
    
    RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
    RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
    
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    
      
    # if {$itfBind == "subsap"} { 
        # log_msg INFO "Clear hosts"
        # if {$filterType == "IPv6"} { Dut-$dut3 sendCliCommand "/clear service id 1 dhcp6 lease-state all" }
        # if {$filterType == "IP"} { Dut-$dut3 sendCliCommand "/clear service id 1 dhcp lease-state all" }
    # }  
    
    #RP_filterDeconfig $setupType $opt(svcType) $svc1 $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) -IngrEgr $IngrEgr
    
    # # memopry inspection  
    # if {$opt(mode) == "regular"} {
        # # check for memory leaks
        # log_msg INFO "Check for memory leaks"
        # set check [filterScale_memLeakChecks $dut3 check -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "BGP" "Management"}]
        # if {$check != "OK"} {
            # log_msg ERROR "Memory leak detected after cleanup, found $check"
            # set Result "FAILED"
        # }
        # if {[Dut-$dut3 cget -redundantSystem] != "false"} {
            # set check_stb [filterScale_memLeakChecks $dut3 check -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "BGP" "Management"}]
            # if {$check_stb != "OK"} {
                # log_msg ERROR "Memory leak detected after cleanup on standby CPM, found $check_stb"
                # set Result "FAILED"
            # }
        # }
    # }
    # Dut-$dut3 configure -cli_timeout $CliTim
    # Dut-$dut3 configure -timeout $Tim
       
    log_msg INFO "################################################################## " 
    log_msg INFO "# Radius part - using initial/COA msgs "    
    log_msg INFO "################################################################## " 
    gash_interpreter
    
    log_msg INFO "verifying resources on CPM and IOM are matching for Dut-$dut3"
    set r [ resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 1 ]
    if {$r != "OK"} { log_msg ERROR "resource mismatch between CPM and IOM for Dut-$dut3, found $r" ; set result FAILED }
   
    set cmdList ""
    lappend cmdList "/configure filter redirect-policy wccp2 create" 
    lappend cmdList "/configure filter redirect-policy wccp2 no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp2 router $opt(RProuter)"
    if {$opt(HT)== "ping"} {
        lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $EF_Addr] create ping-test"
    } else {
        lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $EF_Addr] create unicast-rt-test"
    }
    lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $EF_Addr] no shutdown"
    
    lappend cmdList "/configure filter [getVar4 $filterType]-filter 120 create description Wccp120_2Ingress"
    lappend cmdList "/configure filter [getVar4 $filterType]-filter 120 create entry 1 create match dst-ip [ipConvert [getVar4 $filterType] $dstIp]/[RP_maskConvert [getVar4 $filterType] $fullMask]"
    lappend cmdList "/configure filter [getVar4 $filterType]-filter 120 create entry 1 create action forward redirect-policy wccp2"
    lappend cmdList "/configure filter [getVar4 $filterType]-filter 120 create default-action forward"  
    lappend cmdList "/configure filter [getVar4 $filterType]-filter 120 create sub-insert-radius start-entry 1000 count 100"
    lappend cmdList "/configure filter [getVar4 $filterType]-filter 120 create sub-insert-shared-radius start-entry 1100 count 100"
    
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 120 create description Wccp120_100Ingress"
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 120 create entry 1 create match dst-ip [ipConvert [getVar4 $filterType2] $dstIp]/[RP_maskConvert [getVar4 $filterType2] $fullMask]"
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 120 create entry 1 create action forward redirect-policy wccp100"
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 120 create default-action forward" 
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 120 create sub-insert-radius start-entry 1000 count 100"
    lappend cmdList "/configure filter [getVar4 $filterType2]-filter 120 create sub-insert-shared-radius start-entry 1100 count 100"

    foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
    }  
    #is dest of wccp2 active and ready?  
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $EF_Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
   
   
    # create Alc-Ascend-Data-Filter-Host-Spec to filter 120 
    log_msg INFO "----------------------------------------------------"
    log_msg INFO " Create Alc-Ascend-Data-Filter-Host-Spec to filter 120"
    log_msg INFO "----------------------------------------------------"

    set msgList [list "radius COA" "initial authentication"]
    set nasRuleList ""
    set nasRule(ingress) "permit in ip from any to any"
    set nasRule(egress)  "permit out ip from any to any"
    lappend nasRuleList $nasRule(ingress) $nasRule(egress)
    set attrTestList "" ; 
    lappend attrTestList Alc-Ascend-Data-Filter-Host-Spec
    lappend attrTestList $nasRuleList
    set SubscrFilterString "ingr-v4:120, egr-v4:120, ingr-v6:120, egr-v6:120"
    
    #start host
    #filter_radOverride_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "initial authentication" true $ixStreamNbr -filterAttr $SubscrFilterString
    
    filter_radius_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "initial authentication" -ruleList $attrTestList -hostSucceed true -filterList $SubscrFilterString -numStreams $ixStreamNbr
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    filter_radOverride_checkCliSnmp $hostType $subhostIp $subhostMac1 $slaName 120 120 100
     
    RP_verifyRPAssoc wccp2 {"120-1"}
 

    
    
    # set match ""
     set r [cookCliData [Dut-$dut3 sendCliCommand "shell cardcmd 1 dsub_host"]]
     log_msg DEBUG "$r"
 

        RP_IomShellVerify 120 1 $opt(RProuter) [ip::normalize [ipConvert $family $EF_Addr]]
    
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 120
        set stats1 [RP_CollectStats 1]
        
        RP_verifyTrafficFlow $streamDestBit 1 dest2 -dest3support $opt(dest3support)
        
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 120 -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
    
        log_msg INFO "clear the host"
        filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
   
   
   
    # Create copy of shared sla filter by subinserting shared radius   -new filters 100:XY   100:XY+1
    log_msg INFO "----------------------------------------------------"
    log_msg INFO " Create copy of shared sla filter by subinserting shared radius"
    log_msg INFO "----------------------------------------------------"

    set msgList [list "radius COA" "initial authentication"]
    set nasRuleList ""
    set nasRule(ingress) "permit in ip from any to any"
    set nasRule(egress)  "permit out ip from any to any"
    lappend nasRuleList $nasRule(ingress) $nasRule(egress)
    set attrTestList "" ; 
    lappend attrTestList Alc-NAS-Filter-Rule-Shared
    lappend attrTestList $nasRuleList
    set SubscrFilterString "ingr-v4:-2, egr-v4:-2, ingr-v6:-2, egr-v6:-2"
    
    #start host
    #filter_radOverride_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "initial authentication" true $ixStreamNbr -filterAttr $SubscrFilterString
    
    filter_radius_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "initial authentication" -ruleList $attrTestList -hostSucceed true -filterList $SubscrFilterString -numStreams $ixStreamNbr
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    set numSharedFilters100 [Dut-$dut3 getT[getVar3 $filterType]FilterNbrHostSharedFltrs 100]
    if {$numSharedFilters100 != "2"} {
        log_msg ERROR "Unexpected shared filter number - $numSharedFilters100" ; set result FAILED
    }


    # find out the shared filters
    set sharedFilterId_ingress "" ; set sharedFilterId_egress ""
    foreach {dir} "ingress egress" {
        foreach {lagPort} $port_3_2 {
            set dldList [filterScaleGetDownloadedFilters $dut3 [filterScale_getIom $dut3 $lagPort] $filterType -direction $dir]
            foreach {dldFilter} $dldList {
                if {$dldFilter > $maxFilterId} {
                    # this is a shared filter
                    if {[lsearch -exact [set sharedFilterId_[set dir]] $dldFilter] == -1} {
                        lappend sharedFilterId_[set dir] $dldFilter
                    }
                }
            }
        }
    }
    if {[llength $sharedFilterId_ingress] != 1 || [llength $sharedFilterId_egress] != 1} {
        log_msg ERROR "Expected to find 1 shared $filterType filter in each direction but found - $sharedFilterId_ingress, $sharedFilterId_egress" ; set result FAILED
    }
    
    
    
    log_msg INFO "Verify, that after receiving shared filter subinsert rule from radius, shared filter copy based on the user-defined filter is created and all entries with action forward redirect-policy are successfully copied as well - verify with traffic"
    # find the sequence number of shared filter copy (ingress filter)
    foreach {baseFilter seqNbr} [filter_getSharedFilterBaseSeq $sharedFilterId_ingress] {}
    foreach {baseFilterEg seqNbrEg} [filter_getSharedFilterBaseSeq $sharedFilterId_egress] {}
    log_msg INFO "Sequence number of shared filter copy (ingress filter) is $seqNbr"
    puts [Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType]"]
    puts [Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType] 100:${seqNbr}"]
        
    # set match ""
    # set r [cookCliData [Dut-$dut3 sendCliCommand "shell cardcmd 1 dsub_host"]]
    # regexp -line "Host Filters.*" $r match
    # if {$filterType == "IP"} {
        # if {[regexp  "ON"  [lindex $match 2]] && [regexp  "ON"  [lindex $match 3]]} {
            # regexp {=(.*)\(ON} [lindex $match 2] op IngFiltr 
            # regexp {=(.*)\(ON} [lindex $match 3] op EgFiltr
            # } else {log_msg ERROR "unexpected host filter" ;log_msg DEBUG "$r"; set Result "FAILED"}    
    # } else {
        # if {[regexp  "ON"  [lindex $match 4]] && [regexp  "ON"  [lindex $match 5]]} {
            # regexp {=(.*)\(ON} [lindex $match 4] op IngFiltr 
            # regexp {=(.*)\(ON} [lindex $match 5] op EgFiltr
            # } else {log_msg ERROR "unexpected host filter" ;log_msg DEBUG "$r"; set Result "FAILED"}
    # }
    
    
        set IngFiltr $sharedFilterId_ingress
        set EgFiltr  $sharedFilterId_egress
            if {$filterType == "IPv6"} {set Dipf "dip6f"} else {set Dipf "dipf" }
            set res [cookCliData [Dut-$dut3 sendCliCommand "shell cardcmd [lindex [split $port_3_2 "/"] 0] $Dipf $IngFiltr 1"]]
            if {[regexp "Can't find filter" $res] == "1"} { set CheckRadiusFilter "false"} 
        
        RP_verifyRPAssoc wccp {"100-1" "100-3" "[100:$seqNbr-1]" "[100:$seqNbr-3]" "[100:$seqNbrEg-1]" "[100:$seqNbrEg-3]"}
        
        if {$CheckRadiusFilter} {
            RP_IomShellVerify $IngFiltr 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        }
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 100:$seqNbr
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 100:$seqNbrEg
        set stats1 [RP_CollectStats 1]
        

        RP_verifyTrafficFlow $streamDestBit 1 dest1 -dest3support $opt(dest3support)
        
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter $IngFiltr -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
    
    
    
    log_msg INFO "----------------------------------------------------"
    log_msg INFO " Verify that changes in user-defined filter will be applied in shared filter copy"
    log_msg INFO "----------------------------------------------------"
   
    #change of RP, state of RP, 
    #WCCP-2
       
    set cmd "/configure filter [getVar4 $filterType]-filter 100 entry 1 action forward redirect-policy wccp2"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    RP_DestReachablityCheck -addr [ipConvert $family $EF_Addr]  -RC $opt(dest1RC)
    RP_verifyRPAssoc wccp {"100-3" "[100:$seqNbr-3]" "[100:$seqNbrEg-3]"}
    RP_verifyRPAssoc wccp2 {"100-1" "[100:$seqNbr-1]" "[100:$seqNbrEg-1]" "120-1"}
    if {$CheckRadiusFilter} {
        RP_IomShellVerify $IngFiltr 1 $opt(RProuter) [ip::normalize [ipConvert $family $EF_Addr]]
    }
    RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $EF_Addr]]
    
    
        set stats1 [RP_CollectStats 1]
        RP_verifyTrafficFlow $streamDestBit 1 dest2 -dest3support $opt(dest3support)
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter $IngFiltr -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
    
    #todo egress traffic
        RP_verifyTrafficFlowCheck $streamDestBit 1 dest1 -direction egress -filterId $EgFiltr -filterCliId 100:$seqNbrEg -entryId 3
    
    log_msg INFO "Create another entry in user-defined filter and verify, that it will be copied into shared filter copy"
    set cmd "/configure filter [getVar4 $filterType]-filter 100 entry 4 create action forward redirect-policy wccp"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    RP_verifyRPAssoc wccp  {"100-3" "[100:$seqNbr-3]" "[100:$seqNbrEg-3]" "100-4" "[100:$seqNbr-4]" "[100:$seqNbrEg-4]"}
    RP_verifyRPAssoc wccp2 {"100-1" "[100:$seqNbr-1]" "[100:$seqNbrEg-1]" "120-1"}
    
    log_msg INFO "SNMP and CLI checks of shared filters of entries 4"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId $IngFiltr -entryId 4 -router $opt(RProuter)
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100:$seqNbr -entryId 4 -router $opt(RProuter)
    
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId $EgFiltr -entryId 4 -router $opt(RProuter)
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100:$seqNbrEg -entryId 4 -router $opt(RProuter)
    
    log_msg INFO "SNMP and CLI checks of shared filters of entries 1"
    RP_verifyRPActiveDestinationSNMP C wccp2 [ipConvert $family $EF_Addr] -filterType $opt(filterType) -filterId $IngFiltr -entryId 1 -router $opt(RProuter)
    RP_verifyRPActiveDestinationCLI C wccp2 [ipConvert $family $EF_Addr] -filterType $opt(filterType) -filterId 100:$seqNbr -entryId 1 -router $opt(RProuter)
    
    RP_verifyRPActiveDestinationSNMP C wccp2 [ipConvert $family $EF_Addr] -filterType $opt(filterType) -filterId $EgFiltr -entryId 1 -router $opt(RProuter)
    RP_verifyRPActiveDestinationCLI C wccp2 [ipConvert $family $EF_Addr] -filterType $opt(filterType) -filterId 100:$seqNbrEg -entryId 1 -router $opt(RProuter)
    
    
    
    log_msg INFO "Delete another entry in user-defined filter and verify, that it will be deleted also from shared filter copy"
    set cmd "/configure filter [getVar4 $filterType]-filter 100 no entry 4"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        
    foreach { seqID } "$seqNbr $seqNbrEg" {
            set r1 [ Dut-$dut3 sendCliCommand "exit all"];
            set r1 [ Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType] 100:${seqID} | match Entry"]
            if { [regexp {Entry        : 4} $r1 match] } {
                 log_msg ERROR "Entry 4 is not deleted from shared filter" 
                 log_msg ERROR "Entries of filter 100:${seqID}:  \n$r1"
                 set Result "Failed"
                }
    } 
    set cmd "/configure filter [getVar4 $filterType]-filter 100 entry 1 action forward redirect-policy wccp"
    set r1 [cliCne Dut-$dut3 $cmd]
    if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }

    RP_verifyRPAssoc wccp {"100-1" "[100:$seqNbr-1]" "[100:$seqNbrEg-1]" "100-3" "[100:$seqNbr-3]" "[100:$seqNbrEg-3]"}
    if {$CheckRadiusFilter} {
        RP_IomShellVerify $IngFiltr 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
    }
    
    log_msg INFO "----------------------------------------------------"
    log_msg INFO " Host creation with override filter"
    log_msg INFO "----------------------------------------------------"

    # clear the host
    log_msg INFO "clear the host"
    filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    # Verify that a host can be setup with embedding override filters
    
    #6 filters currently configured
    set FltrNum [lindex [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] | match Num"]] 3]
    if { [regexp (vprnRCO_subsap_CreditCntrl) $setupType]} {
        if {$FltrNum != 8} {set Result "FAILED"; log_msg ERROR "[Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType]"]"}
    } else {
        if {$FltrNum != 6} {set Result "FAILED"; log_msg ERROR "[Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType]"]"}
    }

    RP_verifyRPAssoc wccp {"100-1" "100-3"}
 
    
    print_console_msg "Host setup with override filter"
    set SubscrFilterString "ingr-v4:100, egr-v4:100, ingr-v6:100, egr-v6:100"
    foreach {dir} "ingress egress" { set testFltr($dir) 100 ; set hostFltr($dir) 100 }
    filter_radOverride_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "initial authentication" true $ixStreamNbr -filterAttr $SubscrFilterString
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    filter_radOverride_checkCliSnmp $hostType $subhostIp $subhostMac1 $slaName $hostFltr(ingress) $hostFltr(egress) 100
    
    
    # set match ""
     set r [cookCliData [Dut-$dut3 sendCliCommand "shell cardcmd 1 dsub_host"]]
     log_msg DEBUG "$r"
    # regexp -line "Host Filters.*" $r match
    # if {$filterType == "IP"} {
        # if {[regexp  "ON"  [lindex $match 2]] && [regexp  "ON"  [lindex $match 3]]} {
            # regexp {=(.*)\(ON} [lindex $match 2] op IngFiltr 
            # regexp {=(.*)\(ON} [lindex $match 3] op EgFiltr
            # } else {log_msg ERROR "unexpected host filter" ;log_msg DEBUG "$r"; set Result "FAILED"}    
    # } else {
        # if {[regexp  "ON"  [lindex $match 4]] && [regexp  "ON"  [lindex $match 5]]} {
            # regexp {=(.*)\(ON} [lindex $match 4] op IngFiltr 
            # regexp {=(.*)\(ON} [lindex $match 5] op EgFiltr
            # } else {log_msg ERROR "unexpected host filter" ;log_msg DEBUG "$r"; set Result "FAILED"}
    # }
        log_msg INFO "verifying resources on CPM and IOM are matching for Dut-$dut3"
        set r [ resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 1 ]
        if {$r != "OK"} { log_msg ERROR "resource mismatch between CPM and IOM for Dut-$dut3, found $r" ; set result FAILED }

        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
    
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 100
        set stats1 [RP_CollectStats 1]
        
        RP_verifyTrafficFlow $streamDestBit 1 dest1 -dest3support $opt(dest3support)
        
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
    
    #todo egres traffic
    
        RP_verifyTrafficFlowCheck $streamDestBit 1 dest1 -direction egress
    
    
    
    
    
    # Create copy of shared Ov filters by subinserting shared radius
    log_msg INFO "----------------------------------------------------"
    log_msg INFO " Create copy of shared Ov filters by subinserting shared radius"
    log_msg INFO "----------------------------------------------------"
    set nasRuleList ""
    set nasRule(ingress) "permit in ip from any to any"
    set nasRule(egress)  "permit out ip from any to any"
    lappend nasRuleList $nasRule(ingress) $nasRule(egress)
    set attrTestList "" ; lappend attrTestList Alc-NAS-Filter-Rule-Shared ; lappend attrTestList $nasRuleList
    filter_radius_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "initial authentication" -ruleList $attrTestList -hostSucceed true -filterList $SubscrFilterString -numStreams $ixStreamNbr
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    set numSharedFilters [Dut-$dut3 getT[getVar3 $filterType]FilterNbrHostSharedFltrs 100]
    if {$numSharedFilters != 2} {
        log_msg ERROR "Unexpected shared filter number - $numSharedFilters" ; set result FAILED
    }
    # find out the shared filters
    set sharedFilterId_ingress "" ; set sharedFilterId_egress ""
    foreach {dir} "ingress egress" {
        foreach {lagPort} $port_3_2 {
            set dldList [filterScaleGetDownloadedFilters $dut3 [filterScale_getIom $dut3 $lagPort] $filterType -direction $dir]
            foreach {dldFilter} $dldList {
                if {$dldFilter > $maxFilterId} {
                    # this is a shared filter
                    if {[lsearch -exact [set sharedFilterId_[set dir]] $dldFilter] == -1} {
                        lappend sharedFilterId_[set dir] $dldFilter
                    }
                }
            }
        }
    }
    
    if {[llength $sharedFilterId_ingress] != 1 || [llength $sharedFilterId_egress] != 1} {
        log_msg ERROR "Expected to find 1 shared $filterType filter in each direction but found - $sharedFilterId_ingress, $sharedFilterId_egress" ; set result FAILED
    }
    set IngFiltr $sharedFilterId_ingress
    set EgFiltr  $sharedFilterId_egress
    
    log_msg INFO "Verify, that after receiving shared filter subinsert rule from radius, shared filter copy based on the user-defined filter is created and all entries with action forward router are successfully copied as well - verify with traffic"
    # find the sequence number of shared filter copy (ingress filter)
    foreach {baseFilter seqNbr} [filter_getSharedFilterBaseSeq $sharedFilterId_ingress] {}
    foreach {baseFilterEg seqNbrEg} [filter_getSharedFilterBaseSeq $sharedFilterId_egress] {}
    log_msg INFO "Sequence number of shared filter copy (ingress filter) is $seqNbr"
    puts [Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType]"]
    puts [Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType] 100:${seqNbr}"]
        
    # set match ""
    # set r [cookCliData [Dut-$dut3 sendCliCommand "shell cardcmd 1 dsub_host"]]
    # regexp -line "Host Filters.*" $r match
    # if {$filterType == "IP"} {
        # if {[regexp  "ON"  [lindex $match 2]] && [regexp  "ON"  [lindex $match 3]]} {
            # regexp {=(.*)\(ON} [lindex $match 2] op IngFiltr 
            # regexp {=(.*)\(ON} [lindex $match 3] op EgFiltr
            # } else {log_msg ERROR "unexpected host filter" ;log_msg DEBUG "$r"; set Result "FAILED"}    
    # } else {
        # if {[regexp  "ON"  [lindex $match 4]] && [regexp  "ON"  [lindex $match 5]]} {
            # regexp {=(.*)\(ON} [lindex $match 4] op IngFiltr 
            # regexp {=(.*)\(ON} [lindex $match 5] op EgFiltr
            # } else {log_msg ERROR "unexpected host filter" ;log_msg DEBUG "$r"; set Result "FAILED"}
    # }
    
        RP_verifyRPAssoc wccp {"100-1" "[100:$seqNbr-1]" "[100:$seqNbrEg-1]" "100-3" "[100:$seqNbr-3]" "[100:$seqNbrEg-3]"}
        if {$CheckRadiusFilter} {
            RP_IomShellVerify $IngFiltr 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        }
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 100:$seqNbr
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 100:$seqNbrEg
        set stats1 [RP_CollectStats 1]
        

        RP_verifyTrafficFlow $streamDestBit 1 dest1 -dest3support $opt(dest3support)
        
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter $IngFiltr -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
    
    
    
    
    
    
    log_msg INFO "----------------------------------------------------"
    log_msg INFO " Host creation with shared copies of override host filter with COA msg"
    log_msg INFO "----------------------------------------------------"
    #filter 120 has subisnert place for shared copies

    print_console_msg "Host setup with override filter 120"
    set SubscrFilterString "ingr-v4:120, egr-v4:120, ingr-v6:120, egr-v6:120"
    filter_radOverride_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "radius COA" false $numStreams -filterAttr $SubscrFilterString
    
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    set numSharedFilters [Dut-$dut3 getT[getVar3 $filterType]FilterNbrHostSharedFltrs 120]
    if {$numSharedFilters != 2} {
        log_msg ERROR "Unexpected shared filter number - $numSharedFilters" ; set result FAILED
    }
    # find out the shared filters
    set sharedFilterId_ingress "" ; set sharedFilterId_egress ""
    foreach {dir} "ingress egress" {
        foreach {lagPort} $port_3_2 {
            set dldList [filterScaleGetDownloadedFilters $dut3 [filterScale_getIom $dut3 $lagPort] $filterType -direction $dir]
            foreach {dldFilter} $dldList {
                if {$dldFilter > $maxFilterId} {
                    # this is a shared filter
                    if {[lsearch -exact [set sharedFilterId_[set dir]] $dldFilter] == -1} {
                        lappend sharedFilterId_[set dir] $dldFilter
                    }
                }
            }
        }
    }
    
    if {[llength $sharedFilterId_ingress] != 1 || [llength $sharedFilterId_egress] != 1} {
        log_msg ERROR "Expected to find 1 shared $filterType filter in each direction but found - $sharedFilterId_ingress, $sharedFilterId_egress" ; set result FAILED
    }
    set IngFiltr $sharedFilterId_ingress
    set EgFiltr  $sharedFilterId_egress
    
    log_msg INFO "Verify, that after receiving shared filter subinsert rule from radius, shared filter copy based on the user-defined filter is created and all entries with action forward router are successfully copied as well - verify with traffic"
    # find the sequence number of shared filter copy (ingress filter)
    foreach {baseFilter seqNbr} [filter_getSharedFilterBaseSeq $sharedFilterId_ingress] {}
    foreach {baseFilterEg seqNbrEg} [filter_getSharedFilterBaseSeq $sharedFilterId_egress] {}
    log_msg INFO "Sequence number of shared filter copy (ingress filter) is $seqNbr"
    puts [Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType]"]
    puts [Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType] 120:${seqNbr}"]

    
        RP_verifyRPAssoc wccp {"100-1" "100-3"}
        RP_verifyRPAssoc wccp2 {"120-1" "[120:$seqNbr-1]" "[120:$seqNbrEg-1]"}
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $EF_Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"]
        if {$CheckRadiusFilter} {
            RP_IomShellVerify $IngFiltr 1 $opt(RProuter) [ip::normalize [ipConvert $family $EF_Addr]]
        }
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 120:$seqNbr
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 120:$seqNbrEg
        set stats1 [RP_CollectStats 1]
        

        RP_verifyTrafficFlow $streamDestBit 1 dest2 -dest3support $opt(dest3support)
        
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter $IngFiltr -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
    
    
    
    #################################################################
    #  Extensive part - HA execution
    #################################################################
    gash_interpreter
    if { $opt(mode) == "extensive" } {
      set haTestList ""
      lappend haTestList "HA Switch-Over"
      lappend haTestList "HA Switch-Over"
      lappend haTestList "clear IOM"
      lappend haTestList "port shutdown"
      lappend haTestList "clear MDA"
      foreach {haTest} $haTestList {
        set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
        log_msg INFO "Card Status:"
        puts $res
        
        print_console_msg "$haTest with shared override filters"
        if {$haTest == "HA Switch-Over"} {
          Dut-$dut3 activitySwitch
        } elseif {$haTest == "clear IOM"} {
          foreach {lagPort} $port_3_2 {
              Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "clear card [lindex [split $lagPort "/"] 0]"
          }
          Dut-$dut3 CnWCardStatus ; after 30000
        } elseif {$haTest == "port shutdown"} {
          foreach {lagPort} $port_3_2 {
              Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "configure port $lagPort shutdown" ; after 5000
              if {[Dut-$dut3 getTmnxPortOperStatus 1 [Dut-$dut3 convert_port_ifIndex port $lagPort]] != "outOfService"} {
                log_msg ERROR "port $lagPort still not outOfService 5 seconds after shutdown" ; set result FAIL
              }
              Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "configure port $lagPort no shutdown" ; after 15000
              if {[Dut-$dut3 getTmnxPortOperStatus 1 [Dut-$dut3 convert_port_ifIndex port $lagPort]] != "inService"} {
                log_msg ERROR "port $lagPort still not inService 15 seconds after no shutdown" ; set result FAIL
              }
          }
        } elseif {$haTest == "clear MDA"} {
          foreach {lagPort} $port_3_2 {
              Dut-$dut3 sendCliCommand "exit all"
              Dut-$dut3 sendCliCommand "clear mda [lindex [split $lagPort "/"] 0]/1" ; Dut-$dut3 sendCliCommand "clear mda [lindex [split $lagPort "/"] 0]/2"
          }
          Dut-$dut3 CnWMdaStatus -Time 300
          after 2000
        }
        # find out the shared filters
        set sharedFilterId_ingress "" ; set sharedFilterId_egress ""
        foreach {dir} "ingress egress" {
            foreach {lagPort} $port_3_2 {
                set dldList [filterScaleGetDownloadedFilters $dut3 [filterScale_getIom $dut3 $lagPort] $filterType -direction $dir]
                foreach {dldFilter} $dldList {
                    if {$dldFilter > $maxFilterId} {
                        # this is a shared filter
                        if {[lsearch -exact [set sharedFilterId_[set dir]] $dldFilter] == -1} {
                            lappend sharedFilterId_[set dir] $dldFilter
                        }
                    }
                }
            }
        }
        if {[llength $sharedFilterId_ingress] != 1 || [llength $sharedFilterId_egress] != 1} {
            log_msg ERROR "Expected to find 1 shared $filterType filter in each direction but found - $sharedFilterId_ingress, $sharedFilterId_egress" ; set result FAILED
        }
        set IngFiltr $sharedFilterId_ingress
        set EgFiltr  $sharedFilterId_egress
        
        foreach {baseFilter seqNbr} [filter_getSharedFilterBaseSeq $sharedFilterId_ingress] {}
        foreach {baseFilterEg seqNbrEg} [filter_getSharedFilterBaseSeq $sharedFilterId_egress] {}
        log_msg INFO "Sequence number of shared filter copy (ingress filter) is $seqNbr"
        puts [Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType]"]
        puts [Dut-$dut3 sendCliCommand "/show filter [getVar4 $filterType] 120:${seqNbr}"]


       #traffic check
        if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
        }

        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $EF_Addr] -RC $opt(dest2RC)
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $EF_Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"]
        
        RP_verifyRPAssoc wccp {"100-1" "100-3"}
        RP_verifyRPAssoc wccp2 {"120-1" "[120:$seqNbr-1]" "[120:$seqNbrEg-1]"}
        if {$CheckRadiusFilter} {
            RP_IomShellVerify $IngFiltr 1 $opt(RProuter) [ip::normalize [ipConvert $family $EF_Addr]]
        }
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 120:$seqNbr
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 120:$seqNbrEg
        set stats1 [RP_CollectStats 1]
        

        RP_verifyTrafficFlow $streamDestBit 1 dest2 -dest3support $opt(dest3support)
        
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter $IngFiltr -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
        
       
      # restore shell settings after activityswitches
      Dut-$dut3 sendCliCommand "exit all"
      # use shell commands to set radius-cache timeout to smaller value (check with "word sbmRadiusCacheTimeout" in kernel)
      Dut-$dut3 sendCliCommand "shell sbmRadiusCacheSetTimeout 1"
      Dut-$dut3 sendCliCommand "shell cardcmd [Dut-$dut3 findInactiveCpm] sbmRadiusCacheSetTimeout 1"
      # for arp-host also disable min-auth-interval of 1 minute via shellcmd
      Dut-$dut3 sendCliCommand "shell setVar8 arpHostAlwaysReauth 1"
      Dut-$dut3 sendCliCommand "shell cardcmd [Dut-$dut3 findInactiveCpm] setVar8 arpHostAlwaysReauth 1"
      Dut-$dut3 sendCliCommand "exit all"
      set waitHostSetup    3000
      set waitRadiusCache  3000
    
      }
    }

    
    
    
    
    
    
    
    gash_interpreter
    log_msg INFO "----------------------------------------------------"
    log_msg INFO " Host creation with override host filter with Action FWd with COA msg"
    log_msg INFO "----------------------------------------------------"
    #filter 140 has no subisnert place for shared copies
    set cmdList ""
    lappend cmdList "/configure filter ip-filter 140 create description FilterFwdIPv4"
    lappend cmdList "/configure filter ip-filter 140 create entry 1 create match dst-ip [ipConvert ipv4 $dstIp]/[RP_maskConvert ipv4 $fullMask]"
    lappend cmdList "/configure filter ip-filter 140 create entry 1 create action forward"
    lappend cmdList "/configure filter ip-filter 140 create default-action forward"  
    
    lappend cmdList "/configure filter ipv6-filter 140 create description FilterFwdIPv6"
    lappend cmdList "/configure filter ipv6-filter 140 create entry 1 create match dst-ip [ipConvert ipv6 $dstIp]/[RP_maskConvert ipv6 $fullMask]"
    lappend cmdList "/configure filter ipv6-filter 140 create entry 1 create action forward"
    lappend cmdList "/configure filter ipv6-filter 140 create default-action forward" 
    foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
    } 
    
    print_console_msg "Host setup with override filter 140"
    set SubscrFilterString "ingr-v4:140, egr-v4:140, ingr-v6:140, egr-v6:140"
    foreach {dir} "ingress egress" { set testFltr($dir) 140 ; set hostFltr($dir) 140 }
    filter_radius_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "radius COA" -filterList $SubscrFilterString -ruleList [list Alc-NAS-Filter-Rule-Shared {""}]
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    filter_radOverride_checkCliSnmp $hostType $subhostIp $subhostMac1 $slaName $hostFltr(ingress) $hostFltr(egress) 100
    
    set r [cookCliData [Dut-$dut3 sendCliCommand "shell cardcmd 1 dsub_host"]]
    log_msg DEBUG "$r"
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 140
        RP_verifyTrafficFlow $streamDestBit 1 webserver -dest3support $opt(dest3support)
        
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 140 -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
   

   
    log_msg INFO "----------------------------------------------------"
    log_msg INFO " Host creation with override host filter with COA msg"
    log_msg INFO "----------------------------------------------------"
    
    # # clear the host
    log_msg INFO "clear the host"
    filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    # # Verify that a host can be setup with embedding override filters
    
    #6 filters currently configured
    set FltrNum [lindex [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] | match Num"]] 3]
    if { [regexp (vprnRCO_subsap_CreditCntrl) $setupType]} {
        if {$FltrNum != 9} {set Result "FAILED"; log_msg ERROR "[Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType]"]"}
    } else {
        if {$FltrNum != 7} {set Result "FAILED"; log_msg ERROR "[Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType]"]"}
    }    
    print_console_msg "Host setup with override filter"
    set SubscrFilterString "ingr-v4:100, egr-v4:100, ingr-v6:100, egr-v6:100"
    foreach {dir} "ingress egress" { set testFltr($dir) 100 ; set hostFltr($dir) 100 }
    filter_radOverride_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "initial authentication" true $numStreams -filterAttr $SubscrFilterString  
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    filter_radOverride_checkCliSnmp $hostType $subhostIp $subhostMac1 $slaName $hostFltr(ingress) $hostFltr(egress) 100
       
      
    print_console_msg "Host setup with override filter 120"
    set SubscrFilterString "ingr-v4:120, egr-v4:120, ingr-v6:120, egr-v6:120"
    foreach {dir} "ingress egress" { set testFltr($dir) 120 ; set hostFltr($dir) 120 }
    filter_radOverride_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "radius COA" false $numStreams -filterAttr $SubscrFilterString
    #filter_radius_changeHost $sapName $subhostIp $subhostMac1 $slaName $hostType "radiusCOA" -filterList SubscrFilterString -ruleList [list Alc-NAS-Filter-Rule-Shared {""}]
    
    filter_subinsert_checkNumHosts $dut3 [expr $numHost + $ixHost]
    filter_radOverride_checkCliSnmp $hostType $subhostIp $subhostMac1 $slaName $hostFltr(ingress) $hostFltr(egress) 100
    
    
    # set match ""
     set r [cookCliData [Dut-$dut3 sendCliCommand "shell cardcmd 1 dsub_host"]]
     log_msg DEBUG "$r"


        RP_IomShellVerify 120 1 $opt(RProuter) [ip::normalize [ipConvert $family $EF_Addr]]
    
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 120
        set stats1 [RP_CollectStats 1]
        
        RP_verifyTrafficFlow $streamDestBit 1 dest2 -dest3support $opt(dest3support)
        
        set stats2 [RP_CollectStats 2]
        if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 120 -host_filter_entry 1 ] != "OK" } {
                RP_PrintStats $stats1 $stats2
        }
   
    
    
    
    log_msg INFO "clear the host"
    filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    
    #clear configs
    log_msg INFO "Deleting configuration"
    RP_rollbackRestore $dut3 "latest-rb"
    RP_rollbackCleanup $dut3
    saveOrRestore delete -dut Dut-$dut4
    saveOrRestore delete -dut Dut-$dut5
    saveOrRestore delete -dut Dut-$dut6
    
    
    return $Result   
   
}


proc filterWccpEnhancedFragments { args } {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         [RP_lrandom {ping unicast}]
    set opt(filterType) "IP"
    set opt(routing_prot) [RP_lrandom {bgp ospf}]
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) "grt"
    set opt(case)    "positive"
    set opt(dest1RC)    ""
    set opt(dest2RC)    ""
    set opt(dest3RC)    ""
    set opt(dest4RC)    ""
    
    getopt opt $args
    

    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn rvpls L2Service grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
   

    ## randomly choose initial setupType of duts A,B,C
    set opt(setupType) [RP_lrandom "[set opt(filterType)]_lag_router [set opt(filterType)]_ethernet_router [set opt(filterType)]_nullEncap_router"]
    
        set setupType $opt(setupType)
        log_msg NOTICE "User defined setupType: $setupType"
        if {[regexp {rvpls} $setupType]} { 
            set opt(svcType) "rvpls"
        } elseif {[regexp {vprn} $setupType]} { 
            set opt(svcType) "vprn" 
        } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
            set opt(svcType) "L2Service"
        } else { 
            set opt(svcType) "grt"
        }        

    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    }
    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    
    #we dont support fragmentation of packets with Ip options
    set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    #set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
 
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
 
 

      
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support)] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    #egress filter for ICMp unreachable
    set r [filterTCAM_applyFilter $setupType Egress 999]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }

   #End of setup, filter config
    
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true" } {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"}    {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"}   {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"}   {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"}   {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        
    log_msg INFO "##########################################################################################################################"
    log_msg INFO " 1st part - verification of streams without padding and without any RP setup"
    log_msg INFO "##########################################################################################################################"
    
   
    #start stream check to webserver
    foreach stream $streamIdList {
        log_msg INFO "Starting Ixia stream $stream"
        filterTCAM_ixStartTraffic $stream -direction ingress

        log_msg INFO "Check all packets should be forwarded to webserver"
        if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }
        
        log_msg INFO "Stoping Ixia stream $stream"
        filterTCAM_ixStopTraffic $stream -direction ingress
        after 1000
    }
    RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    log_msg INFO "--------------------------------------------\n"

    
    set description [boxifyText "Configure destinations with $opt(HT) health test defined"]
    log_msg INFO "\n$description"
    #CLI and SNMP methods
       
    #Create destinations
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
     
    log_msg INFO "##########################################################################################################################"
    log_msg INFO " 2nd part - RP config + verification of 700 Byte streams over dut2 MTU 550"
    log_msg INFO "##########################################################################################################################" 
    gash_interpreter 
     
    #if CLI if SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router Base"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp router $opt(RProuter)"        
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    } elseif {$method == "SNMP"} { 
        # set r [Dut-$dut3 setTFilterRPRowStatus wccp createAndGo]
            # set testResultFlag [RP_CompareOutputString "noError" $r] 
        set r [Dut-$dut3 setTFilterRPVrtrId wccp 1 ]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFilterRPAdminState wccp 2]
            set testResultFlag [RP_CompareOutputString "noError" $r]                   
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]            
        if {$opt(HT)== "ping"} {
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
        } else {
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]                
        }
        if {$opt(RProuter) != "Base"} { 
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
        }
        set testResultFlag [RP_CompareOutputString "noError" $r]
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest1Addr] inService
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] inService
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService
        
    }    
        
    
    gash_interpreter    
    Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-setup.cfg" -extendedTimeout 60  -extendedMatchString "#"
    
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp no destination [ipConvert $family $dest3Addr]"
    } else {
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] destroy]
        set testResultFlag [RP_CompareOutputString "noError" $r]            
    }
    
    
    
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
        
    #check active dests
    log_msg INFO "Verify the active destination via SNMP"
    RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    log_msg INFO "Verify the active destination via CLI"
    RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 1 -router $opt(RProuter)
    # Check if Last Action for test is: enable
    RP_LastActionCheck [ipConvert $family $dest1Addr] enable $opt(HT)    
    RP_LastActionCheck [ipConvert $family $dest2Addr] enable $opt(HT) 
    log_msg INFO "\n"
    
    
    log_msg INFO "MTU on dut2 will be set to 550 Bytes  - streams with frameSize 700"
    log_msg INFO "------------------------------------------------------------------"
    # foreach port $port_2_2   (1/1/3    1/1/5)
    gash_interpreter
        if {([GGV platform] == "7710" ) && ($itfType == "lag") } {
            set cmd "/configure port $topoMap(Dut-$dut2,1/1/5) ethernet mtu 550"
        } else {
            set cmd "/configure port $topoMap(Dut-$dut2,1/1/3) ethernet mtu 550"
        }
        log_msg INFO "Dut-$dut2 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut2 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut2: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    
    
    foreach streamId $streamIdList {
        scan $ixport1 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port $streamId
        stream config  -enable  true
        stream config  -framesize 700
        stream config -percentPacketRate 0.576     
        stream config  -enable  false
        if {$streamId == [llength $streamIdList]} {
            ip config -lengthOverride false
            ip config  -sourceIpAddr  1.1.0.2
            ip config  -sourceIpAddrMode  ipIdle
            ip config  -destIpAddr   3.3.0.2
            ip set $chassis $card $port
        }
        stream set $chassis $card $port $streamId
        stream write $chassis $card $port $streamId
    }
    
    #set streamDestBit for stremas without IP options / hop by hop
    set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) -IP_options false]    
    log_msg INFO "Configured traffic stream bits: $streamDestBit"
    log_msg INFO "Verification of streams, without IP options"
    
     #verification of streams
    log_msg INFO "verification of streams with RP setup - active dest [ipConvert $family $dest1Addr]"
    log_msg INFO "----------------------------------------------------------------------------------"
    
        if {[RP_verifyTrafficFlowCheck $streamDestBit $streamIdList dest1 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -fragment_ratio 2] != "OK"} {set Result "FAILED"}
    
    log_msg INFO "##########################################################################################################################"
    log_msg INFO " 3rd part - verification of 1200 Byte streams over dut2 MTU 550"
    log_msg INFO "##########################################################################################################################" 
     
    #MTU on dut2 is set to 550 Bytes  - streams with frameSize 1200
         if {([GGV platform] == "7710" ) && ($itfType == "lag") } {
            set cmd "/configure port $topoMap(Dut-$dut2,1/1/5) ethernet mtu 550"
        } else {
            set cmd "/configure port $topoMap(Dut-$dut2,1/1/3) ethernet mtu 550"
        }
        log_msg INFO "Dut-$dut2 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut2 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut2: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    
    
     foreach streamId $streamIdList {
        scan $ixport1 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port $streamId
        stream config  -enable  true
        stream config  -framesize 1200
        stream config -percentPacketRate 0.576     
        stream config  -enable  false
        if {$streamId == [llength $streamIdList]} {
            ip config -lengthOverride false
            ip config  -sourceIpAddr  1.1.0.2
            ip config  -sourceIpAddrMode  ipIdle
            ip config  -destIpAddr   3.3.0.2
            ip set $chassis $card $port
        }
        stream set $chassis $card $port $streamId
        stream write $chassis $card $port $streamId
    }
    
    #set streamDestBit for stremas without IP options / hop by hop
    set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) -IP_options false]    
    log_msg INFO "Configured traffic stream bits: $streamDestBit"
    log_msg INFO "Verification of streams, without IP options"
    
     #verification of streams
    log_msg INFO "verification of streams with RP setup - active dest [ipConvert $family $dest1Addr]"
    log_msg INFO "----------------------------------------------------------------------------------"
    
    if {[RP_verifyTrafficFlowCheck $streamDestBit $streamIdList dest1 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -fragment_ratio 3] != "OK"} {set Result "FAILED"}

    
     log_msg INFO "Deleting configuration"
        saveOrRestore delete
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
#end of proc
}


proc filterWccpEnhancedCopyRenumEmbedSystemExclusive2 { args } {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         [set method [RP_lrandom "ping unicast"]]
    set opt(filterType) "IP"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) ""
    set opt(case)    "positive"
    set opt(dest1RC)    ""
    set opt(dest2RC)    ""
    set opt(dest3RC)    ""
    set opt(dest4RC)    ""
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn rvpls L2Service grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC)    "GRT"
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut

   
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true"} {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"} {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"} {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"} {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"} {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   

    ## randomly choose initial setupType of duts A,B,C
    if {$opt(setupType) == ""} {
        if { $opt(svcType) == "vprn" } {
            log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
            set setupType [RP_VrfTo_getSetupType $opt(filterType)]
        } elseif { $opt(svcType) == "L2Service" } {
            log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
            set setupType [RP_L2Service_getSetupType $opt(filterType)]
        } elseif { $opt(svcType) == "rvpls" } {
            log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
            set setupType [RP_RVPLS_getSetupType $opt(filterType)]
        } else {
            log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
            set setupType [RP_GrtTo_getSetupType $opt(filterType)]
        }
    } else {
        set setupType $opt(setupType)
        log_msg NOTICE "User defined setupType: $setupType"
        if {[regexp {rvpls} $setupType]} { 
            set opt(svcType) "rvpls"
        } elseif {[regexp {vprn} $setupType]} { 
            set opt(svcType) "vprn" 
        } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
            set opt(svcType) "L2Service"
        } else { 
            set opt(svcType) "grt"
        }        
    }
    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    }
    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
    
  
    
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
 
 
 
    # save the third rollback restore point - after network config
    # log_msg INFO "Creating rollback restore point-1 - after tcam config"
    # set extCliTim [Dut-$dut3 cget -cli_timeout] ; set extTim [Dut-$dut3 cget -timeout]
    # Dut-$dut3 configure -cli_timeout 3600 ; Dut-$dut3 configure -timeout 125
    # Dut-$dut3 sendCliCommand "exit all"
    # Dut-$dut3 sendCliCommand "shell rollbackBlackListDisable"
    # Dut-$dut3 sendCliCommand "/configure system rollback rollback-location $rb_dir/rollback"
    # Dut-$dut3 sendCliCommand "admin rollback save"
    # after 5000
    # log_msg DEBUG [Dut-$dut3 sendCliCommand "show system rollback"]
    # set rollbackSaveResult [filter_getRollbackResult $dut3 save]
    # if {$rollbackSaveResult != "Successful"} {
      # log_msg ERROR "error with creating rollback restore point-1 - $rollbackSaveResult" ; set Result "FAILED"
    # }
    # Dut-$dut3 configure -cli_timeout $extCliTim ; Dut-$dut3 configure -timeout $extTim
    
    
    # # start memory leak checks
    # set CliTim [ Dut-$dut3 cget -cli_timeout ]
    # set Tim [ Dut-$dut3 cget -timeout ]
    # Dut-$dut3 configure -cli_timeout 200
    # Dut-$dut3 configure -timeout 200
    # if {$opt(mode) == "regular"} {
        # filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "BGP" "Management"}

        # if {[Dut-$dut3 cget -redundantSystem] != "false"} {
            # # start memory leak checks on standby CPM
            # filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "BGP" "Management"}
        # }
    # }
    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr true] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    #egress filter for ICMp unreachable
    set r [filterTCAM_applyFilter $setupType Egress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} {
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }
     if { [RP_applyFilter_Cli $dut6 ingress 61 -RC GRT -intf FD_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut6 ingress 62 -RC VRF -intf FE_intf -sap $topoMap(Dut-$dut6,1/1/2)] != "OK" } {set Result "FAILED"}   
     if { [RP_applyFilter_Cli $dut5 ingress 52 -RC GRT -intf EC_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut5 ingress 502 -RC GRT -intf EF_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut4 ingress 41 -RC GRT -intf DC_intf] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut4 ingress 401 -RC GRT -intf DF_intf ] != "OK" } {set Result "FAILED"}
    #End of setup, filter config
   ##gash_interpreter
    

        
    # log_msg INFO "Configure  mijojing"
    # Dut-C sendCliCommand "/configure port 2/1/6 ethernet mode access"
    # Dut-C sendCliCommand "/configure port 2/1/6 no shutdown"
    # Dut-C sendCliCommand "/configure mirror mirror-dest 333 create"
    # Dut-C sendCliCommand "/configure mirror mirror-dest 333 sap 2/1/6 create"
    # Dut-C sendCliCommand "/configure mirror mirror-dest 333 no shutdown"
    # if {[regexp {lag} $setupType]} { 
        # Dut-C sendCliCommand "/debug mirror-source 333 port lag 8 ingress"
        # Dut-C sendCliCommand "/debug mirror-source 333 port lag 8 egress"
    # } else {
        # Dut-C sendCliCommand "/debug mirror-source 333 port 1/1/2 ingress"
        # Dut-C sendCliCommand "/debug mirror-source 333 port 1/1/2 egress"
    # }
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    
   
    log_msg INFO "Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP"
    log_msg INFO "############################################################################################################\n"
    
    log_msg INFO "verification of streams without any RP setup"
    log_msg INFO "--------------------------------------------"
    

    # #start stream check to webserver
    # foreach stream $streamIdList {
        # log_msg INFO "Starting Ixia stream $stream"
        # filterTCAM_ixStartTraffic $stream -direction ingress

        # log_msg INFO "Check all packets should be forwarded to webserver"
        # if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        # } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }
        
        # log_msg INFO "Stoping Ixia stream $stream"
        # filterTCAM_ixStopTraffic $stream -direction ingress
        # after 1000
    # }
    # RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    # RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    # log_msg INFO "--------------------------------------------\n"

        # set description [boxifyText "Configure destinations with $opt(HT) health test defined"]
        # log_msg INFO "\n$description"
        # #CLI and SNMP methods
       
    #Create destinations

        #gash_interpreter
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
           #if CLI if SNMP
        set method [RP_lrandom "CLI SNMP"]
    
    
    
        #WCCP - $RProuter   (active could be dest1, dest2)
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router $opt(RProuter)"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
       
        #WCCP-2  Base router   (active dest3)
        lappend cmdList "/configure filter redirect-policy wccp2 create" 
        lappend cmdList "/configure filter redirect-policy wccp2 no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp2 router Base"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $destWccp2Addr] create ping-test"
        } else {
            lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $destWccp2Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $destWccp2Addr] no shutdown"
        
        
        if {$opt(HT)== "ping"} {
            #WCCP-3  no router   (active dest3)
            lappend cmdList "/configure filter redirect-policy wccp3 create" 
            lappend cmdList "/configure filter redirect-policy wccp3 no shutdown"
            lappend cmdList "/configure filter redirect-policy wccp3 create destination [ipConvert $family $dest3Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp3 create destination [ipConvert $family $dest3Addr] no shutdown"
        }
        
        lappend cmdList "/configure filter log 121 create"
        lappend cmdList "/configure filter log 122 create"
        lappend cmdList "/configure filter log 123 create"
        lappend cmdList "/configure filter log 124 create"
        
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create description filterForWccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create default-action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create action forward redirect-policy wccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create log 121"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 10 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 10 create action forward redirect-policy wccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 10 create log 122"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 50 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 50 create action forward redirect-policy wccp2"    
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 500 create entry 50 create log 123" 
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create description filterForOtherAction"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create default-action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 create action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 log 124"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        
        #ifconfig eth1:2 80.1.1.3
         
        #DTS 198025 - incorrect initial unicast route test state in redirect policy 
        #(if the same destination: ip address+router is already used in a different redirect policy) 
         
        set cmdList ""
        #WCCP-4  - it is clone of WCCP
        lappend cmdList "/configure filter redirect-policy wccp4 create" 
        lappend cmdList "/configure filter redirect-policy wccp4 no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp4 router $opt(RProuter)"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $dest2Addr] create ping-test"
        } else {
            lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $dest1Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $dest2Addr] no shutdown"    
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }   
        after 1000
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
       
    
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100   
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        
        
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up
        RP_showCheck wccp4 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100   
        RP_showCheck wccp4 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100   
         
         
         
         
        set cmdList ""
        #WCCP-5  - it is clone of WCCP2 and WCCP in Base
        lappend cmdList "/configure filter redirect-policy wccp5 create" 
        lappend cmdList "/configure filter redirect-policy wccp5 no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp5 router Base"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $destWccp2Addr] create ping-test"
        } else {
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $destWccp2Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest1Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest2Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $destWccp2Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }   
        after 1000
   
         
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router Base -RP_state Up
        RP_showCheck wccp2 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        
        
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router Base -RP_state Up
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Down -oper_state Down -admin_priority 100 -oper_priority 0   
        RP_showCheck wccp5 -dest [ipConvert $family $dest2Addr] -admin_state Down -oper_state Down -admin_priority 100 -oper_priority 0    
        RP_showCheck wccp5 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 
         
         
         
         
        set cmdList ""
        #WCCP-7  - dest 3.3.0.2 in another RC from Ixia interface
        switch $opt(svcType) {
            vprn     {set HostRC VRF1 }
            default  {set HostRC GRT }
        }
        set RPwccp7router [ RP_lrandom "GRT VRF1 VRF2" -except $HostRC]
        
        lappend cmdList "/configure filter redirect-policy wccp7 create" 
        lappend cmdList "/configure filter redirect-policy wccp7 no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp7 router $RPwccp7router"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $destWccp7Addr] create ping-test"
        } else {
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $destWccp7Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $destWccp7Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }   
        after 1000 
         
         
         
         
         
        gash_interpreter 
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]    
        log_msg INFO "Configured traffic stream bits: $streamDestBit" 
         
        RP_verifyRPAssoc wccp "100-1 100-3"
        RP_verifyRPAssoc wccp2 {"500-1 10 50"}
        
        log_msg INFO "###############################################"    
        log_msg INFO " Renum /copy filter PART"
        log_msg INFO "###############################################"
        log_msg INFO "###############################################"    
        log_msg INFO "Renum filter 100 entry 1 to filter 100 entry 10"
        log_msg INFO "###############################################" 
        
        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 1 10"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 3 11"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_verifyRPAssoc wccp "100-10 100-11"
        RP_IomShellVerify 100 10 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 100 11 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 10 
    
    
    
        log_msg INFO "#####################################################################"
        log_msg INFO "Overwrite filter 100 entry 10 with filter 500 entry 1 (with other RP)"
        log_msg INFO "#####################################################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 1 dst-entry 10 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        
        log_msg DEBUG "$filter100"
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp2 [ipConvert $family $destWccp2Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp2 [ipConvert $family $destWccp2Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        
        
        RP_verifyRPAssoc wccp "100-11"
        RP_verifyRPAssoc wccp2 {"100-10" "500-1 10 50"}
        RP_IomShellVerify 100 10 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]

        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 10 
        
        set cmd "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_verifyRPAssoc wccp "100-10 100-11" 
        RP_verifyRPAssoc wccp2 {"500-1 10 50"}   
       
        log_msg INFO "Verify the active destination via SNMP"
        RP_verifyRPActiveDestinationSNMP C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        log_msg INFO "Verify the active destination via CLI"
        RP_verifyRPActiveDestinationCLI C wccp [ipConvert $family $dest1Addr] -filterType $opt(filterType) -filterId 100 -entryId 10 -router $opt(RProuter)
        
       
       
        log_msg INFO "#####################################################################"
        log_msg INFO "Overwrite filter 100 entry 10 with filter 500 entry 10 (with other RP)"
        log_msg INFO "#####################################################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 10 dst-entry 10 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp "100-11"
        RP_verifyRPAssoc wccp2 {"100-10" "500-1 10 50"}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_IomShellVerify 100 10 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]

        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 10 
        
        Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
        RP_verifyRPAssoc wccp "100-10 100-11" 
        RP_verifyRPAssoc wccp2 {"500-1 10 50"} 
    
    
        log_msg INFO "#####################################################################"
        log_msg INFO "Overwrite filter 100 entry 10 with filter 500 entry 50 (with other RP)"
        log_msg INFO "#####################################################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 50 dst-entry 10"
        set r1 [cookCliData [Dut-$dut3 sendCliCommand $cmd]]
        if { [regexp "MINOR: CLI Destination $filterType filter \"100\" entry \"10\" exists - use \"overwrite\"" $r1] == 0 } { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
             
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 50 dst-entry 10 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp "100-11"
        RP_verifyRPAssoc wccp2 {"100-10" "500-1 10 50"}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_IomShellVerify 100 10 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]

        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 10 
        
        Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
        RP_verifyRPAssoc wccp "100-10 100-11" 
        RP_verifyRPAssoc wccp2 {"500-1 10 50"} 
        
        
        log_msg INFO "#####################################################################"
        log_msg INFO "Copy/ Overwrite non-existing filter 100 entry 5/6 with filter 500 entry 50 (with other RP)"
        log_msg INFO "#####################################################################"
        
        # 100:5 does not exist, but we try to overwrite
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 50 dst-entry 5 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 src-entry 10 dst-entry 6"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
            
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp "100-10 100-11"
        RP_verifyRPAssoc wccp2 {"100-5 6" "500-1 10 50"}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_IomShellVerify 100 5 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]

        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 5
        
    
      
        
        log_msg INFO "###############################################"
        log_msg INFO "Overwrite whole filter 100 with filter 500 "
        log_msg INFO "###############################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 500 to 100 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp ""
        RP_verifyRPAssoc wccp2 {"100-1 10 50" "500-1 10 50"}
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
       
       
        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 1"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 10"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 50"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create description HostIngress"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
                
                #lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 2 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $subnetMask]"
                if { $filterType == "IP"} {
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create match protocol icmp"
                } else { 
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create match next-header ipv6-icmp" 
                }
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create action forward"
                
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create description ICMP_unreachability"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create action forward"
                if { $filterType == "IP"} {
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match protocol icmp"
                } else { 
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match next-header ipv6-icmp" 
                }
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match icmp-type dest-unreachable"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match dst-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
                
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create match src-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create match dst-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create action forward redirect-policy wccp"
        foreach {cmd} $cmdList {
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
       
       
       
        log_msg INFO "###############################################"
        log_msg INFO "Copy whole filter 100 to nonexisting filter 101 "
        log_msg INFO "###############################################"
     
        set cmd "/configure filter copy [getVar4 $filterType]-filter 100 to 101"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter101 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 101"]] 
        log_msg DEBUG "$filter101"
        
        RP_verifyRPAssoc wccp {"100-10" "100-11" "101-10" "101-11"}
        RP_verifyRPAssoc wccp2 {"500-1 10 50"}

        set r [filterTCAM_applyFilter $setupType Ingress 101]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
        RP_IomShellVerify 101 10 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 101 -host_filter_entry 10

        set r [filterTCAM_applyFilter $setupType Ingress 100]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
        Dut-$dut3 sendCliCommand "/configure filter no [getVar4 $filterType]-filter 101"
        
        
        #gash_interpreter
        log_msg INFO "###############################################"
        log_msg INFO "Copy whole filter 550 with action forward to filter 100 "
        log_msg INFO "###############################################"
     
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 550 to 100"
        set r1 [cookCliData [ Dut-$dut3 sendCliCommand $cmd]]
        if { [regexp "MINOR: CLI Destination [getVar1 $filterType] filter \"100\" exists but \"overwrite\" keyword is not given." $r1] == 0} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 550 to 100 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_verifyRPAssoc wccp ""

        RP_IomShellVerify 100 1 "" "" -findPBR 0  
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)

        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 1"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 10"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no entry 50"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create description HostIngress"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
                
                #lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 2 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $subnetMask]"
                if { $filterType == "IP"} {
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create match protocol icmp"
                } else { 
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create match next-header ipv6-icmp" 
                }
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 50 create action forward"
                
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create description ICMP_unreachability"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create action forward"
                if { $filterType == "IP"} {
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match protocol icmp"
                } else { 
                    lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match next-header ipv6-icmp" 
                }
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match icmp-type dest-unreachable"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 20 create match dst-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
                
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create match src-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create match dst-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
                lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 11 create action forward redirect-policy wccp"
        foreach {cmd} $cmdList {
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    
    
        log_msg INFO "###############################################"
        log_msg INFO "Copy whole filter 100 to existing filter 550 with action forward "
        log_msg INFO "###############################################"
     
        set cmd "/configure filter copy [getVar4 $filterType]-filter 100 to 550 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter550 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 550"]] 
        log_msg DEBUG "$filter550"
        
        RP_verifyRPAssoc wccp {"100-10" "100-11" "550-10" "550-11"}

        set r [filterTCAM_applyFilter $setupType Ingress 550]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
        RP_IomShellVerify 550 10 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 550 -host_filter_entry 10

        set r [filterTCAM_applyFilter $setupType Ingress 100]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
       
        set cmdList ""
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 550"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create description filterForOtherAction"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create default-action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 create action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 550 create entry 1 log 124"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  

  
        #gash_interpreter
        log_msg INFO "#####################################################"
        log_msg INFO "Overwrite filter 100 entry 10 with filter 550 entry 1 (action forward)"
        log_msg INFO "#####################################################"
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 550 to 100 src-entry 1 dst-entry 10 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100"
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 

        
        RP_verifyRPAssoc wccp "100-11"
        RP_IomShellVerify 100 10 "" "" -findPBR 0
               
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 10
    
        Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 100 create entry 10 create action forward redirect-policy wccp"
       
        
        
        log_msg INFO "#####################################################"
        log_msg INFO "Renum filter 100 entry 10 to 100 entry 101 and copy entry to filter 500 entry 1 "
        log_msg INFO "#####################################################"


        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 10 101"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set cmd "/configure filter copy [getVar4 $filterType]-filter 100 to 500 src-entry 101 dst-entry 1 overwrite"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter500 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 500"]] 
        log_msg DEBUG "$filter500"
        
        set r [filterTCAM_applyFilter $setupType Ingress 500]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-101" "100-11" "500-1"}
        RP_IomShellVerify 500 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
   
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 500 -host_filter_entry 1
    
        Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 500 create entry 1 create action forward"
        
        set r [filterTCAM_applyFilter $setupType Ingress 100]
        if {$r != "noError"} { set Result "FAILED"}
        RP_set_dut
 
        log_msg INFO "#####################################################"
        log_msg INFO "Renum filter 100 entry 101 to 100 entry 1 "
        log_msg INFO "#####################################################"

        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 101 1"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set cmd "/configure filter [getVar4 $filterType]-filter 100 default-action drop"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100" 
       
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-1" "100-11"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]

        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 1
  
  
  
        log_msg INFO "#####################################################"
        log_msg INFO "Check default action of filter in case of no match - drop "
        log_msg INFO "#####################################################"
        
        log_msg INFO "Modify filter 100 entry 1 in order to achieve no match"
        set newIP [ipConvert $family 99.99.0.0]
        set cmd "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create match dst-ip [ipConvert $family $newIP]/[RP_maskConvert $family $fullMask]"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 none
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
  
        set cmd "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
  
        set cmdList ""
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 500 "
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 550 "       
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
  
  
  
  
        log_msg INFO "###############################################"    
        log_msg INFO " Embed filter PART"
        log_msg INFO "###############################################"
        log_msg INFO "#####################################################"
        log_msg INFO "Embed embedded filter without offset"
        log_msg INFO "#####################################################"  
  
        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create description EmbeddedFilter"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create scope embedded"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create default-action forward"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 1 create action forward redirect-policy wccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 1 log 121"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 5 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 5 create action forward redirect-policy wccp"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 660 create entry 5 log 122"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }      
        
        # entry 1 overrule embedded filter
        set cmd "/configure filter [getVar4 $filterType]-filter 100 embed-filter 660"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100 entry 1 | match Entry"]]
        if { [regexp "overwrites embedded filter 660 entry 1" $r] == "0"} { log_msg ERROR "embedding filter check failed : \n $r" ; set Result "FAILED"}
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-1 5 11" "660-5"}
        RP_verifyRPAssoc wccp2 {"660-1"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
  
  
  
  
        log_msg INFO "#####################################################"
        log_msg INFO "Renum filter 100 entry 1 to entry 30"
        log_msg INFO "#####################################################"  
  
        set cmd "/configure filter [getVar4 $filterType]-filter 100 renum 1 30"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set filter100 [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100"]] 
        log_msg DEBUG "$filter100" 
  
        RP_verifyRPAssoc wccp {"100-5 11 30" "660-5"}
        RP_verifyRPAssoc wccp2 {"100-1" "660-1"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    
  
        set cmd "/configure filter [getVar4 $filterType]-filter 660 entry 1 action forward redirect-policy wccp"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_verifyRPAssoc wccp {"100-1 5 11 30" "660-1 5"}
        RP_verifyRPAssoc wccp2 {""}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
  
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    
        set cmd "/configure filter [getVar4 $filterType]-filter 660 entry 1 action forward redirect-policy wccp2"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
    
        set cmd "/configure filter [getVar4 $filterType]-filter 100 no embed-filter 660"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
  
  
  
  
        log_msg INFO "#####################################################"
        log_msg INFO "Embed embedded filter with offset"
        log_msg INFO "#####################################################"  
  
        #100:2 30     660:1 5  --> 100:3 7
        set cmd "/configure filter [getVar4 $filterType]-filter 100 embed-filter 660 offset 2"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-7 11 30" "660-5"}
        RP_verifyRPAssoc wccp2 {"100-3" "660-1"}
        RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 3
  
        log_msg INFO "\nRenum entry 1 to 661 of embedded filter \n"
        set cmd "/configure filter [getVar4 $filterType]-filter 660 renum 1 661"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        
        RP_verifyRPAssoc wccp {"100-7 11 30" "660-5"}
        RP_verifyRPAssoc wccp2 {"100-663" "660-661"}
        RP_IomShellVerify 100 7 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 7
  
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100 entry 7 | match Entry"]]
        if { [regexp "inserted by embedded filter 660 entry 5" $r] == "0"} { log_msg ERROR "embedding filter check failed : \n $r" ; set Result "FAILED"}

        log_msg INFO "\nCreate entry 7 in filter100 to overwrite embedded entry \n"
        set cmd "/configure filter [getVar4 $filterType]-filter 100 entry 7 create action forward"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100 entry 7 | match Entry"]]
        if { [regexp "overwrites embedded filter 660 entry 5" $r] == "0"} { log_msg ERROR "embedding filter check failed : \n $r" ; set Result "FAILED"}
        after 3000
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 7
  
        log_msg INFO "\nDelete entry 7 in filter100 to enable embedded entry \n"
        set cmd "/configure filter [getVar4 $filterType]-filter 100 no entry 7"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter [getVar4 $filterType] 100 entry 7 | match Entry"]]
        if { [regexp "inserted by embedded filter 660 entry 5" $r] == "0"} { log_msg ERROR "embedding filter check failed : \n $r" ; set Result "FAILED"}
  
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 7
  
  
        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 no embed-filter 660"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 renum 30 1" 
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 660" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
  
  
  
  
        log_msg INFO "###############################################"    
        log_msg INFO " System filter PART - apply system filter, verify admin save and rollback"
        log_msg INFO "###############################################"
        #save the third rollback restore point - after network config
        
        
        RP_rollbackSave $dut3 1
        
               
  
        set cmdList ""
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 create scope system"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 description SystemFilter" 
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 entry 100 create action forward redirect-policy wccp2"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 entry 100 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 666 entry 100 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 chain-to-system-filter"
        lappend cmdList "/configure filter system-filter [getVar4 $filterType] 666"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        
        log_msg INFO "Executing admin save/ admin save detail:"
        Dut-$dut3 sendCliCommand "exit all"
        Dut-$dut3 sendCliCommand "/admin save $config_dir/Dut-$dut3-systemRP.cfg" -extendedTimeout 60  -extendedMatchString "#"
        Dut-$dut3 sendCliCommand "/admin save detail $config_dir/Dut-$dut3-detail_sytemRP.cfg" -extendedTimeout 60  -extendedMatchString "#"
    
    
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        
        RP_verifyRPAssoc wccp {"100-1" "100-11"}
        RP_verifyRPAssoc wccp2 {"666-100"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 666 100 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 666 -host_filter_entry 100
     
        
        set cmd "/configure filter [getVar4 $filterType]-filter 666 entry 100 create action forward redirect-policy wccp"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_verifyRPAssoc wccp {"100-1" "100-11" "666-100"}
        RP_verifyRPAssoc wccp2 ""
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 666 100 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
            
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 666
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 666 -host_filter_entry 100
        
        
        set cmd "/configure filter [getVar4 $filterType]-filter 666 entry 100 create action forward redirect-policy wccp2"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_verifyRPAssoc wccp {"100-1" "100-11"}
        RP_verifyRPAssoc wccp2 {"666-100"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 666 100 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
            
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 666
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 666 -host_filter_entry 100
    
        #rollback revert

        RP_rollbackRestore $dut3 "latest-rb"
        
  
        #verifycation after rollback
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
  
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 1  

        
        set admSaveExecOut    [Dut-$dut3 sendCliCommand "exec $config_dir/Dut-$dut3-systemRP.cfg" -extendedTimeout 200  -extendedMatchString "#"]
        set admSaveExecOut2    [Dut-$dut3 sendCliCommand "exec $config_dir/Dut-$dut3-systemRP.cfg" -extendedTimeout 200  -extendedMatchString "#"]
        set admSaveDetExecOut [Dut-$dut3 sendCliCommand "exec $config_dir/Dut-$dut3-detail_sytemRP.cfg" -extendedTimeout 200  -extendedMatchString "#"]
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
  
        set cmd "/configure filter [getVar4 $filterType]-filter 100 no chain-to-system-filter"
        set r1 [cliCne Dut-$dut3 $cmd]
        if {$r1 == "ERROR"} { log_msg ERROR "unexpected CLI output for command: $cmd"; set Result "FAILED" }
        RP_verifyRPAssoc wccp {"100-1" "100-11"}
        RP_verifyRPAssoc wccp2 {"666-100"}
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 666 100 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
            
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 100 -host_filter_entry 1   
  
        set cmdList ""
        lappend cmdList "/configure filter system-filter no [getVar4 $filterType] 666"
        lappend cmdList "/configure filter no [getVar4 $filterType]-filter 666"  
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        } 
  
  
  
  
        
        if {$itfBind != "subsap"} {
            log_msg INFO "###############################################"    
            log_msg INFO " Exclusive filter PART "
            log_msg INFO "###############################################"
      
            set cmdList ""
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 create scope exclusive"
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 description ExclusiveFilter" 
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 entry 1 create action forward redirect-policy wccp2"
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 entry 1 create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 700 entry 1 create match src-ip [ipConvert $family $srcIp]/[RP_maskConvert $family $fullMask]"
            
            foreach {cmd} $cmdList {
                log_msg INFO "Dut-$dut3 - $cmd"
                set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }  
      
            set r [filterTCAM_applyFilter $setupType Ingress 700]
            if {$r != "noError"} { set Result "FAILED"}
            RP_set_dut
      
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
            RP_verifyRPAssoc wccp2 {"700-1"}
          
            RP_IomShellVerify 700 1 $opt(RProuter) [ip::normalize [ipConvert $family $destWccp2Addr]]
                
            RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType) -filterId 700
            RP_verifyTrafficFlow $streamDestBit 1 dest3
            RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter 700 -host_filter_entry 1   
  
        
        
        
            # filterTCAM_ixStartTraffic 1 -direction ingress
            # filterTCAM_ixStopTraffic 1 -direction ingress
            # check_num_packets_captured $ixport3

            
            
            #try to apply on x3 ingres/egres to/from IXIA
            
            foreach direction "ingress egress" {
                set cmd ""
                if { $opt(svcType) == "vprn" } {
                    if { [regexp (WRvprnRCO) $setupType] } {
                        set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"
                    } else {
                        set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"
                    }
                } elseif {$opt(svcType) == "L2Service" } {
                    if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700" }
                    if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"}
                } elseif {$opt(svcType) == "rvpls" } {
                    set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"
                } else {
                    set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 $direction filter [getVar4 $filterType] 700"
                }  
                
                set r [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if { [regexp "Filter has exclusive scope and is already in use" $r] == "0" } { log_msg ERROR "Scope filter used twice"; log_msg ERROR "$r" ;set Result "FAILED"}
            }
   

  
        }
  
  
  
  
        RP_rollbackCleanup $dut3
  
        log_msg INFO "Deleting configuration"
        saveOrRestore delete
        
        
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
#end of proc
}


proc filterWccpEnhanced_policyInteractions { args } {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         [set method [RP_lrandom "ping unicast"]]
    set opt(filterType) "IP"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) ""
    set opt(itfBind) ""
    set opt(case)    "collision"
    set opt(dest1RC)    "VRF1"
    set opt(dest2RC)    "VRF2"
    set opt(dest3RC)    "GRT"
    set opt(dest4RC)    ""
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn grt" ]
    }
    

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    set opt(RProuter)  "$vprnId"
    set opt(RProuter2) "$vprn2Id"
    set opt(RProuter3) "Base"
    set opt(RProuter4) "(Not Specified)"
    set opt(RProuter5) "$vprnId"
    set opt(RProuter6) "Base"
    set opt(RProuter7) "$vprn2Id"
    set opt(RProuter8) "Base"
    set opt(RProuter9) "(Not Specified)"


   
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"

    log_msg INFO "############################################################################################################"
   

    ## randomly choose initial setupType of duts A,B,C
    if {$opt(setupType) == ""} {
        if { $opt(svcType) == "vprn" } {
           log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
            if {$opt(itfBind) == "serviceAware"} {
                set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
            } else {
                set setupType [RP_VrfTo_getSetupType $opt(filterType)]
            }
        } elseif { $opt(svcType) == "L2Service" } {
            log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
            set setupType [RP_L2Service_getSetupType $opt(filterType)]
        } elseif { $opt(svcType) == "rvpls" } {
            log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
            set setupType [RP_RVPLS_getSetupType $opt(filterType)]
        } else {
            log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
            set setupType [RP_GrtTo_getSetupType $opt(filterType)]
        }
    } else {
        set setupType $opt(setupType)
        log_msg NOTICE "User defined setupType: $setupType"
        if {[regexp {rvpls} $setupType]} { 
            set opt(svcType) "rvpls"
        } elseif {[regexp {vprn} $setupType]} { 
            set opt(svcType) "vprn" 
        } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
            set opt(svcType) "L2Service"
        } else { 
            set opt(svcType) "grt"
        }        
    }
    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    }
    
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }    
    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
    
  
    
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
    
    #Dut-$dut3 sendCliCommand "/configure router static-route 20.20.20.2/32 next-hop 80.1.1.2"
    Dut-$dut3 sendCliCommand "/configure router static-route [ipConvert $family $dest2Addr]/[RP_maskConvert $family $fullMask] next-hop [ipConvert $family $dest3Addr]"
    set linux [becomeRootUser]
        set cmdList         ""
         if { $filterType != "IP" } {      
            lappend cmdList "ifconfig eth1:3 inet6 add [ipConvert ipv6 $dest2Addr)]/[RP_maskConvert ipv6 $destMask]" 
         } else {
             lappend cmdList  "ifconfig eth1:3 $dest2Addr/$destMask"
         }  
            
         foreach {cmd} $cmdList {
                set res [cookCliData [unixCommand $linux "$cmd"]]
                if {($res != "") && ([regexp "File exists" $res] == 0)} { 
                    log_msg ERROR "Linux eth configuration - error for unix-command $cmd - $res" 
                    set Result "ERROR"
                }
            }
    
    closeRootUser $linux
    
    # save the third rollback restore point - after network config
    # log_msg INFO "Creating rollback restore point-1 - after tcam config"
    # set extCliTim [Dut-$dut3 cget -cli_timeout] ; set extTim [Dut-$dut3 cget -timeout]
    # Dut-$dut3 configure -cli_timeout 3600 ; Dut-$dut3 configure -timeout 125
    # Dut-$dut3 sendCliCommand "exit all"
    # Dut-$dut3 sendCliCommand "shell rollbackBlackListDisable"
    # Dut-$dut3 sendCliCommand "/configure system rollback rollback-location $rb_dir/rollback"
    # Dut-$dut3 sendCliCommand "admin rollback save"
    # after 5000
    # log_msg DEBUG [Dut-$dut3 sendCliCommand "show system rollback"]
    # set rollbackSaveResult [filter_getRollbackResult $dut3 save]
    # if {$rollbackSaveResult != "Successful"} {
      # log_msg ERROR "error with creating rollback restore point-1 - $rollbackSaveResult" ; set Result "FAILED"
    # }
    # Dut-$dut3 configure -cli_timeout $extCliTim ; Dut-$dut3 configure -timeout $extTim
    
 
    
    # # start memory leak checks
    set CliTim [ Dut-$dut3 cget -cli_timeout ]
    set Tim [ Dut-$dut3 cget -timeout ]
    Dut-$dut3 configure -cli_timeout 200
    Dut-$dut3 configure -timeout 200
    if {$opt(mode) == "regular"} {
        filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}

        if {[Dut-$dut3 cget -redundantSystem] != "false"} {
            # start memory leak checks on standby CPM
            filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}
        }
    }
    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr true] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    if {$IngrEgr == "true"} { 
        #egress filter for ICMp unreachable
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"}
    }
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} {
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }

    #End of setup, filter config
   ##gash_interpreter
    

    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    
   
    log_msg INFO "Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP"
    log_msg INFO "############################################################################################################\n"
    
    log_msg INFO "verification of streams without any RP setup"
    log_msg INFO "--------------------------------------------"
    

    # #start stream check to webserver
    # foreach stream $streamIdList {
        # log_msg INFO "Starting Ixia stream $stream"
        # filterTCAM_ixStartTraffic $stream -direction ingress

        # log_msg INFO "Check all packets should be forwarded to webserver"
        # if {[RP_verifyDest "webserver" $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)] == "OK" } { log_msg INFO "=> Traffic to webserver: PASSED"
        # } else { log_msg ERROR " => Traffic to webserver: FAILED"; set Result "FAILED" }
        
        # log_msg INFO "Stoping Ixia stream $stream"
        # filterTCAM_ixStopTraffic $stream -direction ingress
        # after 1000
    # }
    # RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
    # RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    # log_msg INFO "--------------------------------------------\n"

        # set description [boxifyText "Configure destinations with $opt(HT) health test defined"]
        # log_msg INFO "\n$description"
        # #CLI and SNMP methods
       
    #Create destinations

        #gash_interpreter
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
        
    
    
        log_msg INFO "Configuring Redirect Policies"
        log_msg INFO "policy wccp:"
        #WCCP
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router $opt(RProuter)"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        
        
        log_msg INFO "policy wccp2:"
        #WCCP2
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp2 create router $opt(RProuter2)"
        lappend cmdList "/configure filter redirect-policy wccp2 no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $dest2Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp2 create destination [ipConvert $family $dest2Addr] no shutdown" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        
        
        
        log_msg INFO "policy wccp3:"
        #WCCP3
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp3 create router $opt(RProuter3)"
        lappend cmdList "/configure filter redirect-policy wccp3 no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp3 create destination [ipConvert $family $dest3Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp3 create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp3 create destination [ipConvert $family $dest3Addr] no shutdown" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }          
       
        log_msg INFO "policy wccp4:"
        #WCCP4  no router !!
        set cmdList ""
        lappend cmdList "/configure filter redirect-policy wccp4 create" 
        lappend cmdList "/configure filter redirect-policy wccp4 no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $destWccp2Addr] create"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $destWccp2Addr] create ping-test"
        } 
        lappend cmdList "/configure filter redirect-policy wccp4 create destination [ipConvert $family $destWccp2Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }    
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)               
            
        after 15000
        
        
        # gash_interpreter
        
        
        #checks of policies wccp1, wccp2, wccp3, wccp4
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100  
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
        #DTS 198025 - incorrect initial unicast route test state in redirect policy 
        #(if the same destination: ip address+router is already used in a different redirect policy)
        
        log_msg INFO "policy wccp5:"
        #WCCP5
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp5 create router $opt(RProuter5)"
        lappend cmdList "/configure filter redirect-policy wccp5 no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $DF_Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
             lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $DF_Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp5 create destination [ipConvert $family $DF_Addr] no shutdown" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }          
         after 10000
        
        log_msg INFO "Check of WCCP5"
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state Up 
        RP_showCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state inService
        RP_snmpCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
       #checks of policies wccp1, wccp2, wccp3, wccp4
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
        
        log_msg INFO "policy wccp6:"
        #WCCP6
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp6 create router $opt(RProuter6)"
        lappend cmdList "/configure filter redirect-policy wccp6 no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $dest3Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $destWccp2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $dest1Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $destWccp2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $dest3Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $destWccp2Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp6 create destination [ipConvert $family $dest1Addr] no shutdown" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        after 10000
        
          log_msg INFO "Check of WCCP6"
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state Up 
        RP_showCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state inService
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
         
       
        
       #checks of policies wccp1, wccp2, wccp3, wccp4, wccp5
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable   
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100  -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
         log_msg INFO "Check of WCCP5"
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state Up 
        RP_showCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state inService
        RP_snmpCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        
        
        log_msg INFO "policy wccp7:"
        #WCCP7
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp7 create router $opt(RProuter7)"
        lappend cmdList "/configure filter redirect-policy wccp7 no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest3Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $EF_Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $EF_Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest2Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $dest3Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp7 create destination [ipConvert $family $EF_Addr] no shutdown" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        after 10000
        
        log_msg INFO "Check of WCCP7"
        RP_showCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state Up 
        RP_showCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state inService
        RP_snmpCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        
  
         
       
        
       #checks of policies wccp1, wccp2, wccp3, wccp4, wccp5, wccp6
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable   
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
         log_msg INFO "Check of WCCP5"
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state Up 
        RP_showCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state inService
        RP_snmpCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
       
          log_msg INFO "Check of WCCP6"
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state Up 
        RP_showCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state inService
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
       
        
        
        log_msg INFO "policy wccp8:"
        #WCCP8
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp8 create router $opt(RProuter8)"
        lappend cmdList "/configure filter redirect-policy wccp8 no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp8 create destination [ipConvert $family $dest2Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp8 create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
        }     
        lappend cmdList "/configure filter redirect-policy wccp8 create destination [ipConvert $family $dest2Addr] no shutdown" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }   
        after 10000
         
        log_msg INFO "Check of WCCP8"
        RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state Up 
        RP_showCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state inService
        RP_snmpCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
       #checks of policies wccp1, wccp2, wccp3, wccp4, wccp5, wccp6, wccp7
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 
        
         log_msg INFO "Check of WCCP5"
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state Up 
        RP_showCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state inService
        RP_snmpCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
       
          log_msg INFO "Check of WCCP6"
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state Up 
        RP_showCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state inService
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)   
          
        log_msg INFO "Check of WCCP7"
        RP_showCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state Up 
        RP_showCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state inService
        RP_snmpCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        

        

        log_msg INFO "policy wccp9:"
        #WCCP9  no router !!
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp9 create"
        lappend cmdList "/configure filter redirect-policy wccp9 no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp9 create destination [ipConvert $family $dest2Addr] create"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp9 create destination [ipConvert $family $dest2Addr] create ping-test"
        }    
        lappend cmdList "/configure filter redirect-policy wccp9 create destination [ipConvert $family $dest2Addr] no shutdown" 
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        after 10000
         
        log_msg INFO "Check of WCCP9"
        RP_showCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter9) -RP_state Up 
        RP_showCheck wccp9 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter9) -RP_state inService
        RP_snmpCheck wccp9 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
        
       #checks of policies wccp1, wccp2, wccp3, wccp4, wccp5, wccp6, wccp7, wccp8
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
         log_msg INFO "Check of WCCP5"
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state Up 
        RP_showCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state inService
        RP_snmpCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
       
          log_msg INFO "Check of WCCP6"
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state Up 
        RP_showCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state inService
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)   
          
        log_msg INFO "Check of WCCP7"
        RP_showCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state Up 
        RP_showCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state inService
        RP_snmpCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        
        log_msg INFO "Check of WCCP8"
        RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state Up 
        RP_showCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state inService
        RP_snmpCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
      
      
        
        set fileName "$config_dir/Dut-$dut3-setup.cfg"
        log_msg INFO "saving config into $fileName"
        Dut-$dut3 sendCliCommand "exit all"
        set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
        set SC [ string first "Completed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
            set Result FAILED   
        } else  {
            log_msg INFO "admin save of active config Successful"
        }

        
        ##############################################################
        #DTS Bug 198142: Filter - Redirect Policies: sticky dest is not ok for 13.0 R1  - should be enabled only for 13.0R4  (13.0F branch)
        #this check will be moved into CLI/SNMP test with note
        
        set branch ""
        set stickyDest "false"
        set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
        regexp "^(.).*" [lindex [split [lindex [cookCliData [Dut-C sendCliCommand "show version"]] 0] .] 2] match branch
        if { (($buildVersion == "13" ) && ($branch == "F")) || ($buildVersion == "0")  } { set stickyDest "true" }
        
        log_msg INFO "Sticky dest check"
        
            Dut-$dut3 sendCliCommand "exit all"
            Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp"
            
            #info 
            set CLI [cookCliData [Dut-$dut3 sendCliCommand "info"]]
            if {([regexp -line "sticky-dest" $CLI] == "1")} { 
                if {$stickyDest == "false"} { set Result FAILED; log_msg ERROR "Sticky-dest option found in redirect-policy wccp" ; log_msg DEBUG "$CLI" }
            }
            
            #info detail
            set CLI [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
            if {([regexp -line "sticky-dest" $CLI] == "1")} { 
                if {$stickyDest == "false"} { set Result FAILED; log_msg ERROR "Sticky-dest option found in redirect-policy wccp" ; log_msg DEBUG "$CLI" }
            }
            
            #tree
            set CLI [cookCliData [Dut-$dut3 sendCliCommand "tree"]]
            if {([regexp -line "sticky-dest" $CLI] == "1")} { 
                if {$stickyDest == "false"} { set Result FAILED; log_msg ERROR "Sticky-dest option found in redirect-policy wccp" ; log_msg DEBUG "$CLI" }
            }
            
            #tree flat
            set CLI [cookCliData [Dut-$dut3 sendCliCommand "tree flat"]]
            if {([regexp -line "sticky-dest" $CLI] == "1")} { 
                if {$stickyDest == "false"} { set Result FAILED; log_msg ERROR "Sticky-dest option found in redirect-policy wccp" ; log_msg DEBUG "$CLI" }
            }
            
            #tree detail
            set CLI [cookCliData [Dut-$dut3 sendCliCommand "tree detail"]]
            if {([regexp -line "sticky-dest" $CLI] == "1")} { 
                if {$stickyDest == "false"} { set Result FAILED; log_msg ERROR "Sticky-dest option found in redirect-policy wccp" ; log_msg DEBUG "$CLI" }     
            }
        
        
            #configure option
            set res [cookCliData [Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp sticky-dest 50"]]
            if {($res == "")} {
                if {$stickyDest == "false"} { set Result FAILED; log_msg ERROR "i am able to configure sticky-dest within redirect-policy wccp"}
            }

            #MIB check
            if {[regexp "tFilterRPDstStickiness" [lindex [Dut-C walk tFilterRedirectPolicyTable] 2]]} {
                if {$stickyDest == "false"} { set Result FAILED; log_msg ERROR "Found tFilterRPDstStickiness object in tFilterRedirectPolicyTable table"}
            }
        
        ##############################################################
        

        log_msg INFO "###############################################"    
        log_msg INFO " Traffic check"
        log_msg INFO "###############################################"
        
        gash_interpreter
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        RP_verifyRPAssoc wccp "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
             
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
        
        log_msg INFO "Change filter policy to wccp2"
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter2) $opt(dest2RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp2]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp2]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp2 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]]  
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest2
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
        
        log_msg INFO "Change filter policy to wccp3"
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp3]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp3]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp3 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]]   
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp3 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
    
        #gash_interpreter    
        log_msg INFO "Change filter policy to wccp4"
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp4]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp4]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp4 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $destWccp2Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $destWccp2Addr]]   
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $destWccp2Addr]]] wccp4 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        if {$opt(svcType) == "grt"} {
            RP_verifyTrafficFlow $streamDestBit 1 dest3
            RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
        } elseif {$opt(svcType) == "vprn"} {
            RP_verifyTrafficFlow $streamDestBit 1 none
            RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -drop true
        }
        
    
        log_msg INFO "Change filter policy to wccp5"
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter5) $opt(dest1RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp5]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp5]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp5 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter5) [ip::normalize [ipConvert $family $DF_Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter5) [ip::normalize [ipConvert $family $DF_Addr]]   
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $DF_Addr]]] wccp5 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
    
        log_msg INFO "Change filter policy to wccp6"
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter6) $opt(dest3RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp6]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp6]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp6 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter6) [ip::normalize [ipConvert $family $dest3Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter6) [ip::normalize [ipConvert $family $dest3Addr]]   
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp6 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
         log_msg INFO "Change filter policy to wccp7"
         set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter7) $opt(dest2RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp7]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp7]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp7 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter7) [ip::normalize [ipConvert $family $EF_Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter7) [ip::normalize [ipConvert $family $EF_Addr]]   
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $EF_Addr]]] wccp7 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest2
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
    
          log_msg INFO "Change filter policy to wccp9"
          set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter9) $opt(dest3RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp9]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp9]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp9 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter9) [ip::normalize [ipConvert $family $dest2Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter9) [ip::normalize [ipConvert $family $dest2Addr]]   
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp9 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        if {$opt(svcType) == "grt"} {
            RP_verifyTrafficFlow $streamDestBit 1 dest3
            RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)
        } elseif {$opt(svcType) == "vprn"} {
            RP_verifyTrafficFlow $streamDestBit 1 none
            RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -drop true
        }
      
      
        log_msg INFO "Change filter policy to wccp8"
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter8) $opt(dest3RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp8]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp8]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp8 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter8) [ip::normalize [ipConvert $family $dest2Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter8) [ip::normalize [ipConvert $family $dest2Addr]]   
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp8 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
    
        
        
        log_msg INFO "###############################################"    
        log_msg INFO " Check of impact static route in GRT to policy in VRF"
        log_msg INFO "###############################################"
        
        gash_interpreter
        
         Dut-$dut3 sendCliCommand "/configure router no static-route [ipConvert $family $dest2Addr]/[RP_maskConvert $family $fullMask] next-hop [ipConvert $family $dest3Addr]"
         after 5000
         
        RP_showCheck wccp8 -RP_activeDest None -RP_router $opt(RProuter8) -RP_state Up 
        
        log_msg INFO "Change filter policy to wccp2"
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter2) $opt(dest2RC) ]
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp2]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp2]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp2 "100-1 100-3"
        RP_IomShellVerify 100 1 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]]  
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp2 -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest2
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
    
    
         Dut-$dut3 sendCliCommand "/configure router static-route [ipConvert $family $dest2Addr]/[RP_maskConvert $family $fullMask] next-hop [ipConvert $family $dest3Addr]"
         after 5000
         RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state Up 

    
        log_msg INFO "###############################################"    
        log_msg INFO " Change of operation states and policy checks"
        log_msg INFO "###############################################"
    
        log_msg INFO "Deactivation of destination [ipConvert $family $dest1Addr] in $opt(dest1RC) - route [ipConvert $family $R_primary] deletion ..."
        log_msg INFO "Deactivation of destination [ipConvert $family $dest2Addr] in $opt(dest2RC) - route [ipConvert $family $R_secondary] deletion ..."
        RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method subnet
        RP_deact_dest dest2 -dest2RC $opt(dest2RC) -method subnet
        RP_routeCheck del [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)

        after 7000
        
        
       #checks of policies wccp1, wccp2, wccp3, wccp4, wccp5, wccp6, wccp7, wccp8 , wccp9
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest None -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family 0.0.0.0] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest None -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family 0.0.0.0] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
         log_msg INFO "Check of WCCP5"
        RP_showCheck wccp5 -RP_activeDest None -RP_router $opt(RProuter5) -RP_state Up 
        RP_showCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable  
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family 0.0.0.0] -RP_router $opt(RProuter5) -RP_state inService
        RP_snmpCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
       
          log_msg INFO "Check of WCCP6"
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state Up 
        RP_showCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state inService
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)   
          
        log_msg INFO "Check of WCCP7"
        RP_showCheck wccp7 -RP_activeDest None -RP_router $opt(RProuter7) -RP_state Up 
        RP_showCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family 0.0.0.0] -RP_router $opt(RProuter7) -RP_state inService
        RP_snmpCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        
        log_msg INFO "Check of WCCP8"
        RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state Up 
        RP_showCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state inService
        RP_snmpCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
      
    
        log_msg INFO "Check of WCCP9"
        RP_showCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter9) -RP_state Up 
        RP_showCheck wccp9 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 
        RP_snmpCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter9) -RP_state inService
        RP_snmpCheck wccp9 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
    
        
    
        log_msg INFO "###############################################"    
        log_msg INFO " add filter entries with different policies"
        log_msg INFO "###############################################"
        
        log_msg INFO "Change filter policy to wccp"
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 1 wccp]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        set r [Dut-$dut3 setT[set filterType]FilterParamsForwardRedPlcy 100 3 wccp]
        if { [RP_CompareOutputString "noError" $r ] != "OK"} {set testResultFlag "FAILED"} 
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        set cmdList ""        
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 11 create action forward redirect-policy wccp"
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 11 match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
        for { set i 2 } { $i <= 9 } { incr i } {
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry [expr $i +10] create action forward redirect-policy wccp$i"
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry [expr $i +10] match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
         }
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
         after 2000
        RP_verifyRPAssoc wccp "100-1 100-3 100-11" 
        RP_verifyRPAssoc wccp2 "100-12"
        RP_verifyRPAssoc wccp3 "100-13"
        RP_verifyRPAssoc wccp4 "100-14"
        RP_verifyRPAssoc wccp5 "100-15"
        RP_verifyRPAssoc wccp6 "100-16"
        RP_verifyRPAssoc wccp7 "100-17"
        RP_verifyRPAssoc wccp8 "100-18"
        RP_verifyRPAssoc wccp9 "100-19"
        
        
        log_msg INFO "Check of filter policy"
        RP_showCheck wccp -RP_activeDest None -filterId 100 -entryId 1 
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family 0.0.0.0] -filterId 100 -entryId 1
        
        RP_showCheck wccp -RP_activeDest None -filterId 100 -entryId 11 
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family 0.0.0.0] -filterId 100 -entryId 11
        
        RP_showCheck wccp2 -RP_activeDest None -filterId 100 -entryId 12 
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family 0.0.0.0] -filterId 100 -entryId 12
    
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 13
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 13
    
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -filterId 100 -entryId 14
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -filterId 100 -entryId 14
        
        RP_showCheck wccp5 -RP_activeDest None -filterId 100 -entryId 15
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family 0.0.0.0] -filterId 100 -entryId 15
    
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 16
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 16
    
        RP_showCheck wccp7 -RP_activeDest None -filterId 100 -entryId 17
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family 0.0.0.0] -filterId 100 -entryId 17
    
        RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 18
        RP_snmpCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 18
    
        RP_showCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 19
        RP_snmpCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 19
        
        #gash_interpreter
        RP_clearAllFilter $dut3 -filterType $filterType
        log_msg INFO "Copy filter 100 to filter 200"
        set r [cookCliData [Dut-$dut3 sendCliCommand "/configure filter copy [getVar4 $filterType]-filter 100 to 200"]]
        if {$r != ""} {log_msg ERROR "Failed to copy filter 100 to filter 200" ; set Result "FAILED"}
        after 1000
        RP_compareFilter 100 200
        
        
    
         log_msg INFO "###############################################"    
        log_msg INFO " Change of operation states back and policy checks"
        log_msg INFO "###############################################"
    
        log_msg INFO "Activation of destination [ipConvert $family $dest1Addr] in $opt(dest1RC) - route [ipConvert $family $R_primary] addition ..."
        log_msg INFO "Activation of destination [ipConvert $family $dest2Addr] in $opt(dest2RC) - route [ipConvert $family $R_secondary] addition ..."
        RP_act_dest dest1 -dest1RC $opt(dest1RC)
        RP_act_dest dest2 -dest2RC $opt(dest2RC)
        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
    
        
        after 10000
         
   
        
        
       #checks of policies wccp1, wccp2, wccp3, wccp4, wccp5, wccp6, wccp7, wccp8 ,wccp9
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
         log_msg INFO "Check of WCCP5"
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state Up 
        RP_showCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state inService
        RP_snmpCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
       
          log_msg INFO "Check of WCCP6"
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state Up 
        RP_showCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state inService
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)   
          
        log_msg INFO "Check of WCCP7"
        RP_showCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state Up 
        RP_showCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state inService
        RP_snmpCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        
        log_msg INFO "Check of WCCP8"
        RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state Up 
        RP_showCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state inService
        RP_snmpCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
          log_msg INFO "Check of WCCP9"
        RP_showCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter9) -RP_state Up 
        RP_showCheck wccp9 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100  
        RP_snmpCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter9) -RP_state inService
        RP_snmpCheck wccp9 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
    
    
    
    
         #filter check
         log_msg INFO "Check of filter policy"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -filterId 100 -entryId 1 
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -filterId 100 -entryId 1
        
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -filterId 100 -entryId 11 
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -filterId 100 -entryId 11
        
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 12 
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 12
    
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 13
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 13
    
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -filterId 100 -entryId 14
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -filterId 100 -entryId 14
        
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -filterId 100 -entryId 15
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -filterId 100 -entryId 15
    
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 16
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 16
    
        RP_showCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -filterId 100 -entryId 17
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -filterId 100 -entryId 17
    
        RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 18
        RP_snmpCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 18
    
        RP_showCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 19
        RP_snmpCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 19
        
        RP_clearAllFilter $dut3 -filterType $filterType
      
        RP_compareFilter 100 200
    
        log_msg INFO "#########################################################"
        log_msg INFO "#####              Cleanup config                    ####"
        log_msg INFO "#########################################################"

        Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
        Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
        if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
        }

        saveOrRestore delete -dut Dut-$dut3
        log_msg INFO "#########################################################"
        log_msg INFO "#####                 Admin save exec                ####"
        log_msg INFO "#########################################################"
    
        for {set j 1} {$j <= 2} {incr j 1} {
            after 2000
            log_msg INFO "=> Executing saved config file $fileName"
            set CLI [ cookCliData [ Dut-$dut3 sendCliCommand "exec $fileName" -extendedTimeout 300  -extendedMatchString "#" ]]
            set SC [ string first "Executed" $CLI ]
            if { $SC < 1 } {
                log_msg DEBUG "$CLI"
                log_msg ERROR "Exec of $fileName FAILED - Was $SC And Should Be >= 1"
                set Result FAILED
            }
            Dut-$dut3 sendCliCommand "exit all"
        }
        after 2000
    
         if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
        }
        after 15000

        #recreation host on sla profile after execution of config
        if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            filter_subinsert_radius_recreateHost $subhostIp $srcMac_13 -numStreams $numStreams -hostType $hostType -slaName sla2 -hostSucceed true -clearFirst true
        }

        #binding filters via proc - to ensure that host will be on sla1
        set r [filterTCAM_applyFilter $setupType Ingress 100]
        if {$r != "noError"} { set Result "FAILED"}
        
        if {$IngrEgr == "true"} { #egress filter
            set r [filterTCAM_applyFilter $setupType Egress 100]
            if {$r != "noError"} { set Result "FAILED"}
        }
        RP_set_dut
        after 2000

        RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
        
        #gash_interpreter
        #checks of policies wccp1, wccp2, wccp3, wccp4, wccp5, wccp6, wccp7, wccp8 ,wccp9
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP2"
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp2 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        
        log_msg INFO "Check of WCCP3"
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp3 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
        log_msg INFO "Check of WCCP4"
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp4 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100
        
         log_msg INFO "Check of WCCP5"
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state Up 
        RP_showCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_showCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -RP_router $opt(RProuter5) -RP_state inService
        RP_snmpCheck wccp5 -dest [ipConvert $family $DF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp5 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
       
          log_msg INFO "Check of WCCP6"
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state Up 
        RP_showCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter6) -RP_state inService
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp6 -dest [ipConvert $family $destWccp2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp6 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)   
          
        log_msg INFO "Check of WCCP7"
        RP_showCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state Up 
        RP_showCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        RP_showCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable 
        
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -RP_router $opt(RProuter7) -RP_state inService
        RP_snmpCheck wccp7 -dest [ipConvert $family $EF_Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        RP_snmpCheck wccp7 -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT) 
        
        log_msg INFO "Check of WCCP8"
        RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state Up 
        RP_showCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable  
        RP_snmpCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter8) -RP_state inService
        RP_snmpCheck wccp8 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        
          log_msg INFO "Check of WCCP9"
        RP_showCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter9) -RP_state Up 
        RP_showCheck wccp9 -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100
        RP_snmpCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter9) -RP_state inService
        RP_snmpCheck wccp9 -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100       

         
         #filter check
        set cmdList ""        
        lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 11 create action forward redirect-policy wccp"
        for { set i 2 } { $i <= 9 } { incr i } {
            lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry [expr $i +10] create action forward redirect-policy wccp$i"
        }
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }  
        after 2000
         log_msg INFO "Check of filter policy"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -filterId 100 -entryId 1 
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -filterId 100 -entryId 1
        
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -filterId 100 -entryId 11 
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -filterId 100 -entryId 11
        
        RP_showCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 12 
        RP_snmpCheck wccp2 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 12
    
        RP_showCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 13
        RP_snmpCheck wccp3 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 13
    
        RP_showCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -filterId 100 -entryId 14
        RP_snmpCheck wccp4 -RP_activeDest [ipConvert $family $destWccp2Addr] -filterId 100 -entryId 14
        
        RP_showCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -filterId 100 -entryId 15
        RP_snmpCheck wccp5 -RP_activeDest [ipConvert $family $DF_Addr] -filterId 100 -entryId 15
    
        RP_showCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 16
        RP_snmpCheck wccp6 -RP_activeDest [ipConvert $family $dest3Addr] -filterId 100 -entryId 16
    
        RP_showCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -filterId 100 -entryId 17
        RP_snmpCheck wccp7 -RP_activeDest [ipConvert $family $EF_Addr] -filterId 100 -entryId 17
    
        RP_showCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 18
        RP_snmpCheck wccp8 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 18
    
        RP_showCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 19
        RP_snmpCheck wccp9 -RP_activeDest [ipConvert $family $dest2Addr] -filterId 100 -entryId 19

        RP_verifyRPAssoc wccp "100-1 100-3 100-11"
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        RP_IomShellVerify 100 11 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
             
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
  
        log_msg INFO "Deleting configuration"
        Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
        Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
        if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
        }
         
        set linux [becomeRootUser]
        set cmdList         ""
        if { $filterType != "IP" } {      
            lappend cmdList "ifconfig eth1:3 inet6 del [ipConvert ipv6 $dest2Addr]/[RP_maskConvert ipv6 $destMask]" 
        } else {
            lappend cmdList  "ifconfig eth1:3 down"
        }  
            
        foreach {cmd} $cmdList {
            set res [cookCliData [unixCommand $linux "$cmd"]]
            if {($res != "") && ([regexp "File exists" $res] == 0)} { 
                log_msg ERROR "Linux eth configuration - error for unix-command $cmd - $res" 
                set Result "ERROR"
            }
        }
    
    closeRootUser $linux
        

        saveOrRestore delete
        
        
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
#end of proc
}


proc filterWccpEnhancedPrefixPortList { args } {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    
    source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         [RP_lrandom {ping unicast}]
    set opt(filterType) "IP"
    set opt(routing_prot) [RP_lrandom {bgp ospf}]
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) "grt"
    set opt(itfBind) ""   
    set opt(case)    "positive"
    set opt(dest1RC)    ""
    set opt(dest2RC)    ""
    set opt(dest3RC)    ""
    set opt(dest4RC)    ""
    
    getopt opt $args
    

    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn rvpls L2Service grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
   

   ## randomly choose initial setupType of duts A,B,C
    set itfBind "subsap"
    while { $itfBind == "subsap" } {
        if {$opt(setupType) == ""} {
            if { $opt(svcType) == "vprn" } {
                log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
                if {$opt(itfBind) == "serviceAware"} {
                    set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
                } else {
                    set setupType [RP_VrfTo_getSetupType $opt(filterType)]
                }
            } elseif { $opt(svcType) == "L2Service" } {
                log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
                set setupType [RP_L2Service_getSetupType $opt(filterType)]
            } elseif { $opt(svcType) == "rvpls" } {
                log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
                set setupType [RP_RVPLS_getSetupType $opt(filterType)]
            } else {
                log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
                set setupType [RP_GrtTo_getSetupType $opt(filterType)]
            }
        } else {
            set setupType $opt(setupType)
            log_msg NOTICE "User defined setupType: $setupType"
            if {[regexp {rvpls} $setupType]} { 
                set opt(svcType) "rvpls"
            } elseif {[regexp {vprn} $setupType]} { 
                set opt(svcType) "vprn" 
            } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
                set opt(svcType) "L2Service"
            } else { 
                set opt(svcType) "grt"
            }        
        }
        if {[filterTCAM_getGlobals $setupType] != "OK"} {
            log_msg ERROR "Unable to find correct parameters for $setupType"
            set Result FAILED
        }
    }
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    
    #we dont support fragmentation of packets with Ip options
    set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    #set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
 
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
 
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true" } {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"}    {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"}   {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"}   {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"}   {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"

      
    log_msg INFO "##################"
    log_msg INFO " Prefix-list PART"
    log_msg INFO "##################" 
  
     set cmdList ""   
     lappend cmdList "/configure filter redirect-policy wccp create no shutdown"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create no match"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward redirect-policy wccp"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 3 create no match"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 3 create action forward redirect-policy wccp"
        
     lappend cmdList "/configure filter match-list [getVar4 $filterType]-prefix-list Ingress_list create"
     lappend cmdList "/configure filter match-list [getVar4 $filterType]-prefix-list Ingress_list create prefix [ipConvert $family 1.1.0.2]/[RP_maskConvert $family 32]"
     lappend cmdList "/configure filter match-list [getVar4 $filterType]-prefix-list Ingress_list create prefix [ipConvert $family 1.1.0.3]/[RP_maskConvert $family 32]"
        
     lappend cmdList "/configure filter match-list [getVar4 $filterType]-prefix-list Egress_list create"
     lappend cmdList "/configure filter match-list [getVar4 $filterType]-prefix-list Egress_list create prefix [ipConvert $family 3.3.0.2]/[RP_maskConvert $family 32]"
     lappend cmdList "/configure filter match-list [getVar4 $filterType]-prefix-list Egress_list create prefix [ipConvert $family 3.3.0.3]/[RP_maskConvert $family 32]"
      
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 1 match src-ip [getVar4 $filterType]-prefix-list Ingress_list"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 1 match dst-ip [getVar4 $filterType]-prefix-list Egress_list"
        
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 3 match src-ip [getVar4 $filterType]-prefix-list Egress_list"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 3 match dst-ip [getVar4 $filterType]-prefix-list Ingress_list"
        

     lappend cmdList "/configure filter [getVar4 $filterType]-filter 1 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 1 create entry 1 create match dst-ip [ipConvert $family 3.3.0.0]/[RP_maskConvert $family 16]"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 1 create entry 1 create action forward"

     lappend cmdList "/configure filter [getVar4 $filterType]-filter 2 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 2 create entry 1 create match dst-ip [ipConvert $family 3.3.0.0]/[RP_maskConvert $family 16]"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 2 create entry 1 create action forward"
     
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 3 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 3 create entry 1 create match dst-ip [ipConvert $family 3.3.0.0]/[RP_maskConvert $family 16]"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 3 create entry 1 create action forward"
     
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 300 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 300 create entry 1 create match dst-ip [ipConvert $family 3.3.0.0]/[RP_maskConvert $family 16]"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 300 create entry 1 create action forward"
     lappend cmdList "   exit all"
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 sendCliCommand $cmd"
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }
  
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    if {$IngrEgr == "true"} {
        #egress filter for ICMp unreachable
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"}
    }
    RP_set_dut
    
    #egress to Ixia
     if {$filterType == "IP"} { set arpType "static-arp" } else { set arpType "neighbor" }
    
   
   # ipv6 neighbor 3ffe:0:303:3:: 00:00:01:00:03:03    need to do in order to send streams 9 10 for ipv6
   
    set cmdList ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            lappend cmdList "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
            lappend cmdList "/configure service vprn 2000 interface itfToIxia3 [string tolower [getVar2 $filterType]] $arpType [ipConvert $family 3.3.0.3] 00:00:01:00:03:03"

        } else {
            lappend cmdList "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
            lappend cmdList "/configure service vprn $svc1 interface itfToIxia3 [string tolower [getVar2 $filterType]] $arpType [ipConvert $family 3.3.0.3] 00:00:01:00:03:03"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { lappend cmdList "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { lappend cmdList "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        lappend cmdList "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        lappend cmdList "/configure service ies 100 interface itfToIxia3 [string tolower [getVar2 $filterType]] $arpType [ipConvert $family 3.3.0.3] 00:00:01:00:03:03"
    } else {
        lappend cmdList "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        lappend cmdList "/configure service ies $svc1 interface itfToIxia3 [string tolower [getVar2 $filterType]] $arpType [ipConvert $family 3.3.0.3] 00:00:01:00:03:03"
    }  
    foreach {cmd} $cmdList {
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
    }
    
    
    
    # ipv6 neighbor 3ffe:0:101:3:: 00:00:01:00:00:01
    if {$svcType == "router"} {Dut-$dut1 sendCliCommand "/configure service ies 1 interface itfToIxia1 ipv6 neighbor 3ffe:0:101:3:: 00:00:01:00:00:01" }
    if {$svcType == "ies"} {
        set r [cookCliData [Dut-C sendCliCommand "show service id 1 all | match \"If Name\""]]
        set intf ""
        regexp -line "If Name *: *(.*)\n" $r match intf
    
        Dut-$dut3 sendCliCommand "/configure service ies 1 interface $intf ipv6 neighbor 3ffe:0:101:3:: 00:00:01:00:00:01" 
        
    }
    gash_interpreter
    
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}



   #End of setup, filter config
  
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
  
    #Create destinations
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
     

    log_msg INFO "create RP"
    gash_interpreter 
     
    #if CLI if SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router Base"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp router $opt(RProuter)"        
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    } elseif {$method == "SNMP"} { 
        # set r [Dut-$dut3 setTFilterRPRowStatus wccp createAndGo]
            # set testResultFlag [RP_CompareOutputString "noError" $r] 
        set r [Dut-$dut3 setTFilterRPVrtrId wccp 1 ]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFilterRPAdminState wccp 2]
            set testResultFlag [RP_CompareOutputString "noError" $r]                   
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]            
        if {$opt(HT)== "ping"} {
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
        } else {
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]                
        }
        if {$opt(RProuter) != "Base"} { 
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
        }
        set testResultFlag [RP_CompareOutputString "noError" $r]
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest1Addr] inService
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] inService
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService
        
    }    
      

    Dut-$dut3 sendCliCommand "/configure filter"
    set res [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts "\nFilter configuration: \n"
    puts "$res"
    
      
    scan $ixia_port(1) "%d %d %d" chassis card port
    port get $chassis $card $port
    set i 1
    while { ! [stream get $chassis $card $port $i] } {
        incr i
        if { $i > 100 } {
            log_msg ERROR "Found more than 100 streams .. stopping now!"
            break
        }
    }
    set numStreams [expr $i - 1]
    log_msg INFO "Found $numStreams stream(s) in Ixia"

    log_msg INFO "Configuring next 4 IXIA streams "  
    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
      #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    if {[getGlobalVar physTopology] == "scaleBed"} { set ing_port 5; set eg_port 1 } else { set ing_port 1; set eg_port 3 }
        set portList [list $ixport1 ]
        scan $ixport1 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port 1
        set da_mac [join [split [stream cget -da] " "] ":"]
        set sa_mac [join [split [stream cget -sa] " "] ":"]
        if {[getGlobalVar hardwareOnly] == "true"} { set traffic_rate 30000; set traffic_burst 3000 } else { set traffic_rate 100 ; set traffic_burst 100 }
        
            set trafficStreamId [expr $numStreams + 1]
            if {$filterType == "IP"} {
                handlePacket -port $ing_port -dot1q 1 -dst [ipConvert $family 3.3.0.2] -numDest 1 -src [ipConvert $family 1.1.0.2] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart   
            } else {
                handlePacket -port $ing_port -dot1q 1 -dst 3FFE::303:2:0:0:0:0 -numDest 1 -src 3FFE::101:2:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
            }
            after 1000
            stream get $chassis $card $port $trafficStreamId
            stream config  -enable  false
            stream set $chassis $card $port $trafficStreamId
            stream write $chassis $card $port $trafficStreamId
        
            set trafficStreamId [expr $numStreams + 2]
            if {$filterType == "IP"} {
                handlePacket -port $ing_port -dot1q 1 -dst [ipConvert $family 3.3.0.3] -numDest 1 -src [ipConvert $family 1.1.0.2] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart   
            } else {
                handlePacket -port $ing_port -dot1q 1 -dst 3FFE::303:3:0:0:0:0 -numDest 1 -src 3FFE::101:2:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
            }
            after 1000
            stream get $chassis $card $port $trafficStreamId
            stream config  -enable  false
            stream set $chassis $card $port $trafficStreamId
            stream write $chassis $card $port $trafficStreamId
        
        
            set trafficStreamId [expr $numStreams + 3]
            if {$filterType == "IP"} {
                handlePacket -port $ing_port -dot1q 1 -dst [ipConvert $family 3.3.0.2] -numDest 1 -src [ipConvert $family 1.1.0.3] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart   
            } else {
                handlePacket -port $ing_port -dot1q 1 -dst 3FFE::303:2:0:0:0:0 -numDest 1 -src 3FFE::101:3:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
            }
            after 1000
            stream get $chassis $card $port $trafficStreamId
            stream config  -enable  false
            stream set $chassis $card $port $trafficStreamId
            stream write $chassis $card $port $trafficStreamId
        
        
        
            set trafficStreamId [expr $numStreams + 4]
            if {$filterType == "IP"} {
                handlePacket -port $ing_port -dot1q 1 -dst [ipConvert $family 3.3.0.3] -numDest 1 -src [ipConvert $family 1.1.0.3] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart   
            } else {
                handlePacket -port $ing_port -dot1q 1 -dst 3FFE::303:3:0:0:0:0 -numDest 1 -src 3FFE::101:3:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
            }
            after 1000
            stream get $chassis $card $port $trafficStreamId
            stream config  -enable  false
            stream set $chassis $card $port $trafficStreamId
            stream write $chassis $card $port $trafficStreamId
       

        #egress direction
        set portList [list $ixport3 ]
        scan $ixport3 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port 1
        set da_mac [join [split [stream cget -da] " "] ":"]
        set sa_mac [join [split [stream cget -sa] " "] ":"]
        
            set trafficStreamId [expr $numStreams + 1]
            if {$filterType == "IP"} {
                handlePacket -port $eg_port -dot1q 1 -src [ipConvert $family 3.3.0.2] -numDest 1 -dst [ipConvert $family 1.1.0.2] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart   
            } else {
                handlePacket -port $eg_port -dot1q 1 -src 3FFE::303:2:0:0:0:0 -numDest 1 -dst 3FFE::101:2:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
            }
            after 1000
            stream get $chassis $card $port $trafficStreamId
            stream config  -enable  false
            stream set $chassis $card $port $trafficStreamId
            stream write $chassis $card $port $trafficStreamId
        
            set trafficStreamId [expr $numStreams + 2]
            if {$filterType == "IP"} {
                handlePacket -port $eg_port -dot1q 1 -src [ipConvert $family 3.3.0.3] -numDest 1 -dst [ipConvert $family 1.1.0.2] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart   
            } else {
                handlePacket -port $eg_port -dot1q 1 -src 3FFE::303:3:0:0:0:0 -numDest 1 -dst 3FFE::101:2:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
            }
            after 1000
            stream get $chassis $card $port $trafficStreamId
            stream config  -enable  false
            stream set $chassis $card $port $trafficStreamId
            stream write $chassis $card $port $trafficStreamId
        
        
            set trafficStreamId [expr $numStreams + 3]
            if {$filterType == "IP"} {
                handlePacket -port $eg_port -dot1q 1 -src [ipConvert $family 3.3.0.2] -numDest 1 -dst [ipConvert $family 1.1.0.3] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart   
            } else {
                handlePacket -port $eg_port -dot1q 1 -src 3FFE::303:2:0:0:0:0 -numDest 1 -dst 3FFE::101:3:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
            }
            after 1000
            stream get $chassis $card $port $trafficStreamId
            stream config  -enable  false
            stream set $chassis $card $port $trafficStreamId
            stream write $chassis $card $port $trafficStreamId
        
        
        
            set trafficStreamId [expr $numStreams + 4]
            if {$filterType == "IP"} {
                handlePacket -port $eg_port -dot1q 1 -src [ipConvert $family 3.3.0.3] -numDest 1 -dst [ipConvert $family 1.1.0.3] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart   
            } else {
                handlePacket -port $eg_port -dot1q 1 -src 3FFE::303:3:0:0:0:0 -numDest 1 -dst 3FFE::101:3:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 600 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
            }
            after 1000
            stream get $chassis $card $port $trafficStreamId
            stream config  -enable  false
            stream set $chassis $card $port $trafficStreamId
            stream write $chassis $card $port $trafficStreamId
        
        after 15000
   
        log_msg INFO "##################"
        log_msg INFO " Traffic checks"
        log_msg INFO "##################"
        
        gash_interpreter 
        
        # RP_set_dut
        # for {set stream [expr $numStreams + 1]} {$stream <= [expr $numStreams + 4]} {incr stream 1} { 
            # set streamBit [RP_streamBit   $opt(svcType) $iom3 $opt(case) $opt(RProuter)   ]
            # RP_verifyTrafficFlowCheckScale $streamBit 9 dest1 -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        # }
        
        RP_set_dut
        set r [RP_streamBit   $opt(svcType) $iom3 $opt(case) $opt(RProuter)   ]
        set streamDestBit ""
        for {set i 1} {$i <= [expr $numStreams + 4]} {incr i} {
           lappend streamDestBit $r
        }

        log_msg INFO "Configured traffic stream bits: $streamDestBit"
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        
        set listStream "[expr $numStreams +1] [expr $numStreams +2] [expr $numStreams +3] [expr $numStreams +4]"
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        if {[RP_verifyTrafficFlowCheck $streamDestBit $listStream dest1 -dest3support $opt(dest3support) -dest4support $opt(dest4support)] != "OK"} {set Result "FAILED"}
        if {$IngrEgr == "true"} {  
            RP_verifyTrafficFlowCheck $streamDestBit $listStream dest1 -direction egress -udpEgress true
        }
            
         puts "\n\n\n"
         log_msg INFO "Shutdown the policy\n"
         cliCne Dut-$dut3  "/configure filter redirect-policy wccp shutdown"

         after 1000
         RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"] 
         if {[RP_verifyTrafficFlowCheck $streamDestBit $listStream webserver -dest3support $opt(dest3support) -dest4support $opt(dest4support)] != "OK"} {set Result "FAILED"}
         if {$IngrEgr == "true"} {  
                RP_verifyTrafficFlowCheck $streamDestBit $listStream dest1 -direction egress -udpEgress true
         }

         puts "\n\n\n"
         log_msg INFO "no shutdown the policy\n"
         cliCne Dut-$dut3  "/configure filter redirect-policy wccp no shutdown"
         after 5000
         RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
         if {[RP_verifyTrafficFlowCheck $streamDestBit $listStream dest1 -dest3support $opt(dest3support) -dest4support $opt(dest4support)] != "OK"} {set Result "FAILED"}
  

    log_msg INFO "##################"
    log_msg INFO " Port range PART"
    log_msg INFO "##################"               
                    
     set cmdList ""   
     lappend cmdList "/configure filter redirect-policy wccp create no shutdown"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create no match"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 1 create action forward redirect-policy wccp"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 3 create no match"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 create entry 3 create action forward redirect-policy wccp"
        
     lappend cmdList "/configure filter match-list port-list Ingress_list create"
     lappend cmdList "/configure filter match-list port-list Ingress_list create port range 100 200"

     lappend cmdList "/configure filter match-list port-list Egress_list create"
     lappend cmdList "/configure filter match-list port-list Egress_list create port range 300 400"
      
     if {$filterType == "IP"} { 
         lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 1 match protocol udp src-port port-list Ingress_list"
         lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 1 match protocol udp dst-port port-list Egress_list"
            
         lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 3 match protocol udp src-port port-list Egress_list"
         lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 3 match protocol udp dst-port port-list Ingress_list"
      } else {
         lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 1 match next-header udp src-port port-list Ingress_list"
         lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 1 match next-header udp dst-port port-list Egress_list"
            
         lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 3 match next-header udp src-port port-list Egress_list"
         lappend cmdList "/configure filter [getVar4 $filterType]-filter 100 entry 3 match next-header udp dst-port port-list Ingress_list"
    }      

     lappend cmdList "/configure filter [getVar4 $filterType]-filter 1 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 1 create entry 1 create match dst-ip [ipConvert $family 3.3.0.0]/[RP_maskConvert $family 16]"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 1 create entry 1 create action forward"

     lappend cmdList "/configure filter [getVar4 $filterType]-filter 2 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 2 create entry 1 create match dst-ip [ipConvert $family 3.3.0.0]/[RP_maskConvert $family 16]"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 2 create entry 1 create action forward"
     
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 3 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 3 create entry 1 create match dst-ip [ipConvert $family 3.3.0.0]/[RP_maskConvert $family 16]"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 3 create entry 1 create action forward"
     
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 300 create default-action forward"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 300 create entry 1 create match dst-ip [ipConvert $family 3.3.0.0]/[RP_maskConvert $family 16]"
     lappend cmdList "/configure filter [getVar4 $filterType]-filter 300 create entry 1 create action forward"
     lappend cmdList "   exit all"
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 sendCliCommand $cmd"
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }
    
    Dut-$dut3 sendCliCommand "/configure filter"
    set res [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts "\nFilter configuration: \n"
    puts "$res"
    
    gash_interpreter
    log_msg INFO "Configuring IXIA streams "  
    if {$filterType == "IP"} {
        set StreamID [expr $numStreams +1]
        foreach "srcport dstPort" "100 300 100 400 200 300 200 400" {
            set portList [list $ixport1 ]
            scan $ixport1 "%d %d %d" chassis card port
            port get $chassis $card $port

            stream get $chassis $card $port $StreamID
            stream      config  -enable  false
            stream      config  -name    "Stream $StreamID"
            protocol    config  -name    ip
            ip          config  -sourceIpAddr  1.1.0.2
            ip          config  -sourceIpAddrMode  ipIdle
            ip          config  -destIpAddr   3.3.0.2
            ip                 config  -fragmentOffset                     0
            ip                 config  -lastFragment                       last
            ip          config  -ipProtocol   udp
            udp         setDefault
            udp         config  -sourcePort   $srcport
            udp         config  -destPort     $dstPort
            udp         set     $chassis $card $port
            ip          set     $chassis $card $port
            stream      set     $chassis $card $port $StreamID
            stream      write   $chassis $card $port $StreamID
            incr StreamID 1
        }
        
        set StreamID [expr $numStreams +1]
        foreach "srcport dstPort" "300 100 400 100 300 200 400 200" {
            set portList [list $ixport3 ]
            scan $ixport3 "%d %d %d" chassis card port
            port get $chassis $card $port

            stream get $chassis $card $port $StreamID
            stream      config  -enable  false
            stream      config  -name    "Stream $StreamID"
            protocol    config  -name    ip
            ip          config  -sourceIpAddr  3.3.0.2
            ip          config  -sourceIpAddrMode  ipIdle
            ip          config  -destIpAddr   1.1.0.2
            ip                 config  -fragmentOffset                     0
            ip                 config  -lastFragment                       last

            ip          config  -ipProtocol   udp
            udp         setDefault
            udp         config  -sourcePort   $srcport
            udp         config  -destPort     $dstPort
            udp         set     $chassis $card $port
            ip          set     $chassis $card $port
            stream      set     $chassis $card $port $StreamID
            stream      write   $chassis $card $port $StreamID
            incr StreamID 1
        }
        
        
    }
    
    if {$filterType == "IPv6"} {
        set StreamID [expr $numStreams +1]
        foreach "srcport dstPort" "100 300 100 400 200 300 200 400" {  
            set portList [list $ixport1]
            scan $ixport1 "%d %d %d" chassis card port
            port get $chassis $card $port
            stream get $chassis $card $port $StreamID
            stream config  -enable  true 
            stream                       config            -name                               "stream $StreamID"
            protocol                     config            -name                               ipV6
            ipV6                         config            -trafficClass                       4
            ipV6                         config            -flowLabel                          0x01000
            ipV6                         config            -sourceAddr                         [ipConvert ipv6 1.1.0.2]
            ipV6                         config            -sourceMask                         128
            ipV6                         config            -sourceAddrMode                     ipV6Idle
            ipV6                         config            -destAddr                           [ipConvert ipv6 3.3.0.2]
            ipV6                         config            -destMask                           128
            ipV6                         config            -destAddrMode                       ipV6Idle
            ipV6                         config            -nextHeader                         udp
            ipV6                         addExtensionHeader udp
            udp                config  -sourcePort                         $srcport
            udp                config  -destPort                           $dstPort
            udp                set     $chassis $card $port
            ipV6                         set               $chassis $card $port
            stream set $chassis $card $port $StreamID
            stream write $chassis $card $port $StreamID
            incr StreamID 1
        }
        
        
        
        set StreamID [expr $numStreams +1]
        foreach "srcport dstPort" "300 100 400 100 300 200 400 200" {  
            set portList [list $ixport3]
            scan $ixport3 "%d %d %d" chassis card port
            port get $chassis $card $port
            stream get $chassis $card $port $StreamID
            stream config  -enable  true 
            stream                       config            -name                               "stream $StreamID"
            protocol                     config            -name                               ipV6
            ipV6                         config            -trafficClass                       4
            ipV6                         config            -flowLabel                          0x01000
            ipV6                         config            -sourceAddr                         [ipConvert ipv6 3.3.0.2]
            ipV6                         config            -sourceMask                         128
            ipV6                         config            -sourceAddrMode                     ipV6Idle
            ipV6                         config            -destAddr                           [ipConvert ipv6 1.1.0.2]
            ipV6                         config            -destMask                           128
            ipV6                         config            -destAddrMode                       ipV6Idle
            ipV6                         config            -nextHeader                         udp
            ipV6                         addExtensionHeader udp
            udp                config  -sourcePort                         $srcport
            udp                config  -destPort                           $dstPort
            udp                set     $chassis $card $port
            ipV6                         set               $chassis $card $port
            stream set $chassis $card $port $StreamID
            stream write $chassis $card $port $StreamID
            incr StreamID 1
        }
    }
    
    after 15000
        log_msg INFO "##################"
        log_msg INFO " Traffic checks"
        log_msg INFO "##################"
        
        gash_interpreter 
        
        # RP_set_dut
        # for {set stream [expr $numStreams + 1]} {$stream <= [expr $numStreams + 4]} {incr stream 1} { 
            # set streamBit [RP_streamBit   $opt(svcType) $iom3 $opt(case) $opt(RProuter)   ]
            # RP_verifyTrafficFlowCheckScale $streamBit 9 dest1 -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        # }
        
        RP_set_dut
        set r [RP_streamBit   $opt(svcType) $iom3 $opt(case) $opt(RProuter)   ]
        set streamDestBit ""
        for {set i 1} {$i <= [expr $numStreams + 4]} {incr i} {
           lappend streamDestBit $r
        }

        log_msg INFO "Configured traffic stream bits: $streamDestBit"
        
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        
        set listStream "[expr $numStreams +1] [expr $numStreams +2] [expr $numStreams +3] [expr $numStreams +4]"
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
        if {[RP_verifyTrafficFlowCheck $streamDestBit $listStream dest1 -dest3support $opt(dest3support) -dest4support $opt(dest4support)] != "OK"} {set Result "FAILED"}
        if {$IngrEgr == "true"} {  
            RP_verifyTrafficFlowCheck $streamDestBit $listStream dest1 -direction egress -udpEgress true
        }
            
         puts "\n\n\n"
         log_msg INFO "Shutdown the policy\n"
         cliCne Dut-$dut3  "/configure filter redirect-policy wccp shutdown"

         after 1000
         RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"] 
         if {[RP_verifyTrafficFlowCheck $streamDestBit $listStream webserver -dest3support $opt(dest3support) -dest4support $opt(dest4support)] != "OK"} {set Result "FAILED"}
         if {$IngrEgr == "true"} {  
                RP_verifyTrafficFlowCheck $streamDestBit $listStream dest1 -direction egress -udpEgress true
         }

         puts "\n\n\n"
         log_msg INFO "no shutdown the policy\n"
         cliCne Dut-$dut3  "/configure filter redirect-policy wccp no shutdown"
         after 5000
         RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"] 
         if {[RP_verifyTrafficFlowCheck $streamDestBit $listStream dest1 -dest3support $opt(dest3support) -dest4support $opt(dest4support)] != "OK"} {set Result "FAILED"}
  
    
    
     log_msg INFO "Deleting configuration"
        saveOrRestore delete
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
#end of proc
}


proc wccp_enhanced_scale_pure { args } {    
    global testdir logdir ixia_port testResultFlag
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    source $testdir/testsuites/filter/tests/wccp.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
  
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)          true
    set opt(debugPrint)     false
    set opt(deconfig)       true
    set opt(dual)           false
    set opt(snmp)           true
    set opt(setupType)      ""
    set opt(mode)           "regular"
    set opt(HT)             "unicast"
    set opt(filterType)     "IP"
    set opt(routing_prot)   "ospf"
    set static_routes_list  ""
    set opt(issu)           "false"
    set opt(dest4support)   "false"
    set opt(dest3support)   "false"
    set opt(iteration)      1
    set vprnId              "-1"
    set vprn2Id             "-1"
    # set vprn3Id           "-1"
    # set vprn4Id           "-1"          
    set testID              $::TestDB::currentTestCase
    set username            $::TestDB::thisTestBed
    set hostIp              $::TestDB::thisHostIpAddr
    set dir                 "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir          "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result              "PASSED"
    set testResultFlag      "OK"
    set opt(svcType)        ""
    set opt(itfBind)        ""
    set opt(case)           "positive"
    set opt(dest1RC)        ""
    set opt(dest2RC)        ""
    set opt(dest3RC)        ""
    set opt(dest4RC)        ""

    set opt(maxPol)         16
    set opt(maxDest)        128
    set opt(maxHealthTests) 256
    set opt(maxUrlHealthTests) 512
    set opt(maxReturnCodes) 2048
    set opt(maxReturnValues) 1024


    
    # opt(maxPol) = 16 Redirect Policies per system
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
     

    RP_set_dut
   
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$vprnId != "-1"} {log_msg INFO "# vprnId              $vprnId"}
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   

    ## randomly choose initial setupType of duts A,B,C   - 
    
    #subsap not supported in this scale for now
    #IXIA stream consists of various src-ip  - filter apllied on subscriber intf match only 1 of them  - TODO -do proc for applying filter on sap in case of different subsap topos
    
    set itfBind "subsap"
    while { $itfBind == "subsap" } {
        if {$opt(setupType) == ""} {
            if { $opt(svcType) == "vprn" } {
                log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
                if {$opt(itfBind) == "serviceAware"} {
                    set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
                } else {
                    set setupType [RP_VrfTo_getSetupType $opt(filterType)]
                }
            } elseif { $opt(svcType) == "L2Service" } {
                log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
                set setupType [RP_L2Service_getSetupType $opt(filterType)]
            } elseif { $opt(svcType) == "rvpls" } {
                log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
                set setupType [RP_RVPLS_getSetupType $opt(filterType)]
            } else {
                log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
                set setupType [RP_GrtTo_getSetupType $opt(filterType)]
            }
        } else {
            set setupType $opt(setupType)
            log_msg NOTICE "User defined setupType: $setupType"
            if {[regexp {rvpls} $setupType]} { 
                set opt(svcType) "rvpls"
            } elseif {[regexp {vprn} $setupType]} { 
                set opt(svcType) "vprn" 
            } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
                set opt(svcType) "L2Service"
            } else { 
                set opt(svcType) ""
            }        
        }
        if {[filterTCAM_getGlobals $setupType] != "OK"} {
            log_msg ERROR "Unable to find correct parameters for $setupType"
            set Result FAILED
        }
    }
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }      
    
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType
    
    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
    

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    if {[getGlobalVar physTopology] == "scaleBed"} { set ing_port 5; set eg_port 1 } else { set ing_port 1; set eg_port 3 }
        set portList [list $ixport1 ]
        scan $ixport1 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port 1
        set da_mac [join [split [stream cget -da] " "] ":"]
        set sa_mac [join [split [stream cget -sa] " "] ":"]
        if {[getGlobalVar hardwareOnly] == "true"} { set traffic_rate 90000; set traffic_burst 9000 } else { set traffic_rate 100 ; set traffic_burst 100 }
        
        if {$filterType == "IP"} {
            set trafficStreamId 9
            handlePacket -port $ing_port -dot1q 1 -dst [ipConvert $family 3.3.0.2] -numDest 1 -src [ipConvert $family 1.1.0.2] -numSource $opt(maxPol) -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        } else {
            set trafficStreamId 7
            handlePacket -port $ing_port -dot1q 1 -dst 3FFE::303:2:0:0:0:0 -numDest 1 -src 3FFE::101:2:0:0:0:2 -numSource $opt(maxPol) -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        }
        
        after 1000
        stream get $chassis $card $port $trafficStreamId
        stream config  -enable  false
        stream set $chassis $card $port $trafficStreamId
        stream write $chassis $card $port $trafficStreamId

        set portList [list $ixport3 ]
        scan $ixport3 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port 1
        set da_mac [join [split [stream cget -da] " "] ":"]
        set sa_mac [join [split [stream cget -sa] " "] ":"]
        if {$filterType == "IP"} {
             handlePacket -port $eg_port -dot1q 1 -src [ipConvert $family 3.3.0.2] -numDest $opt(maxPol) -dst [ipConvert $family 1.1.0.2] -numSource 1 -numDestMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        } else {
            handlePacket -port $eg_port -dot1q 1 -src 3FFE::303:2:0:0:0:0 -numDest $opt(maxPol) -dst 3FFE::101:2:0:0:0:2 -numSource 1 -numDestMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        }
        
        after 1000
        stream get $chassis $card $port $trafficStreamId
        stream config  -enable  false
        stream set $chassis $card $port $trafficStreamId
        stream write $chassis $card $port $trafficStreamId
  
    RP_set_dut
    
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    

 
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"; log_msg ERROR "Fail to configure configSystemIPs"}  
    
    # dutE -interfaces
    set mtu 1500
    set cmdList         ""
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/1) no shutdown"
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/1) ethernet mode network"
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/1) ethernet mtu $mtu"
    lappend cmdList "/configure router interface EC_intf address [ipConvert ipv4 $EC_Addr]/[RP_maskConvert ipv4 $subnetMask]"
    lappend cmdList "/configure router interface EC_intf ipv6 address [ipConvert ipv6 $EC_Addr]/[RP_maskConvert ipv6 $subnetMask]"
    lappend cmdList "/configure router interface EC_intf port $topoMap(Dut-$dut5,1/1/1)"       

    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/4) no shutdown"
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/4) ethernet mode network"
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/4) ethernet mtu $mtu"
    lappend cmdList "/configure router interface EEth3_intf address [ipConvert ipv4 15.15.0.1]/[RP_maskConvert ipv4 16]"
    lappend cmdList "/configure router interface EEth3_intf ipv6 address [ipConvert ipv6 15.15.0.1]/[RP_maskConvert ipv6 16]"
    lappend cmdList "/configure router interface EEth3_intf port $topoMap(Dut-$dut5,1/1/4)"   
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut5 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut5 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut5: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    } 

    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut  
    if { [RP_configTestedDut_scale $opt(dest1RC) $opt(svcType)] != "OK" } {set Result "FAILED"; log_msg ERROR "Fail to configure testDut"}  
    if { [RP_linuxRoutes -scale true] != "OK" } {set Result "FAILED"; log_msg ERROR "Fail to configure linux routes"}  
  
    #configuration of routes - BGP or OSPF or OSPFv3 + 100k of some static routes
    if { [RP_configRoutes_scale $opt(dest1RC) $opt(routing_prot)] != "OK" } {set Result "FAILED"; log_msg ERROR "Fail to configure scale routes"}

 
    log_msg INFO "##########################"
    log_msg INFO "# start memory leak checks"
    log_msg INFO "##########################"
    
    set CliTim [ Dut-$dut3 cget -cli_timeout ]
    set Tim [ Dut-$dut3 cget -timeout ]
    Dut-$dut3 configure -cli_timeout 200
    Dut-$dut3 configure -timeout 200
        filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}

        if {[Dut-$dut3 cget -redundantSystem] != "false"} {
            # start memory leak checks on standby CPM
            filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}
        }

    
    
    log_msg INFO "##########################"
    log_msg INFO "# start filter config"
    log_msg INFO "##########################"
    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -scale true -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -RProuter $opt(RProuter) -HT $opt(HT)] != "OK" } {set Result "FAILED"; log_msg ERROR "Fail to configure filters"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"; log_msg ERROR "Fail to configure ingress filter"}
    RP_set_dut
    if {$IngrEgr == "true"} {
        #egress filter for ICMp unreachable
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"; log_msg ERROR "Fail to configure egress filter"}
    }
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
    # if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"; log_msg ERROR "Fail to configure egress filter 2"}
     # if {$opt(dest3support) == "true"} { 
        # if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     # }
     # if {$opt(dest4support) == "true"} { 
        # if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     # }

     
     #filter 100 applied on ingress, egress
     #create policies and filter entries
     
     
     
    set fileName "filterPolicyConfig.cfg"
    set file [openConfigFile $fileName ]
            
            # opt(maxPol) = 16 Redirect Policies
            for {set i 1} {$i <= $opt(maxPol)} {incr i 1} {
                puts $file "/configure filter redirect-policy wccp_$i create"
                puts $file "/configure filter redirect-policy wccp_$i no shutdown"
                puts $file "/configure filter redirect-policy wccp_$i router $opt(RProuter)"
                for {set j 2} {$j <= 9} {incr j 1} {    
                    puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert $family 15.15.$i.$j] create"
                    puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert $family 15.15.$i.$j] no shutdown"
                    if {$opt(HT) == "ping"} {
                        puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert $family 15.15.$i.$j] ping-test"
                    } else {
                        puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert $family 15.15.$i.$j] unicast-rt-test"
                    }                    
                }
            }  

            #filter ingress 100 entries for wccp entities
            for {set i 1} {$i <= $opt(maxPol)} {incr i 1} {
                puts $file "/configure filter [getVar4 $filterType]-filter 100 create entry $i create action forward redirect-policy wccp_$i"
                puts $file "/configure filter [getVar4 $filterType]-filter 100 create entry $i create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                if {$filterType == "IP"} {
                    puts $file "/configure filter [getVar4 $filterType]-filter 100 create entry $i create match src-ip [ipConvert $family 1.1.0.[expr $i +1]]/32"
                } else {
                    puts $file "/configure filter [getVar4 $filterType]-filter 100 create entry $i create match src-ip 3FFE:0:101:2:0:0:0:[ int2Hex [expr $i +1]]/128"
                }
            } 
            
            #filter 2 on egress entries
            puts $file "/configure filter [getVar4 $filterType]-filter 2 renum 1 100"
            for {set i 1} {$i <= $opt(maxPol)} {incr i 1} {
                puts $file "/configure filter [getVar4 $filterType]-filter 2 create entry $i create action forward"
                puts $file "/configure filter [getVar4 $filterType]-filter 2 create entry $i create match dst-ip [ipConvert $family $dstIp]/[RP_maskConvert $family $fullMask]"
                if {$filterType == "IP"} {
                    puts $file "/configure filter [getVar4 $filterType]-filter 2 create entry $i create match src-ip [ipConvert $family 1.1.0.[expr $i +1]]/32"
                } else {
                    puts $file "/configure filter [getVar4 $filterType]-filter 2 create entry $i create match src-ip 3FFE:0:101:2:0:0:0:[ int2Hex [expr $i +1]]/128"
                }
            } 
            
            puts $file "exit all"
            
    set r [execConfigFile $dut3 $file $fileName ]
    if { $r != "OK"} {
        log_msg ERROR "error during exec of config file $filename"
        set testResultFlag "FAILED"
        if {$opt(debug) != "false"} { return $result    }
    }
    
    after 15000
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    after 2000
    
    set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
    log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
    log_msg INFO "$r"
    
    for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
        RP_routeCheck add [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
        RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)
        RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)
        RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)
    }
    
     set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
    log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
    log_msg INFO "$r"
    
    log_msg INFO "##########################"
    log_msg INFO "# Check of configuration"
    log_msg INFO "##########################"
    puts "\n"
 
    log_msg INFO "############################################################"
    log_msg INFO "# CLI/SNMP check of policies - all should be in operational"
    log_msg INFO "############################################################"
    for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
        log_msg DEBUG "Checking policy WCCP_$i"
        RP_showCheck wccp_$i -RP_activeDest [ipConvert $family 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up
        RP_snmpCheck wccp_$i -RP_activeDest [ipConvert $family 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService
        for {set j 2} {$j <=9} {incr j 1} {
            RP_showCheck wccp_$i -dest [ipConvert $family 15.15.$i.$j] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
            RP_snmpCheck wccp_$i -dest [ipConvert $family 15.15.$i.$j] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        }   
        puts "\n"
    }
    
    log_msg INFO "Associations checks"
    for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
        RP_verifyRPAssoc wccp_$i "100-$i"
    } 
    
    log_msg INFO "############################################################"
    log_msg INFO "# Checks of SNMP tables via mibwalk and getnext"
    log_msg INFO "############################################################"
    puts "\n"
    
    gash_interpreter
    
    log_msg INFO "############################################################"
    log_msg INFO "tFilterRedirectPolicyTable - mibWalk"
    log_msg INFO "############################################################"
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRedirectPolicyTable - [expr $opt(maxPol) * 6] entries expected"
    # within  tFilterRedirectPolicyTable there are 6 accesible objects fullfilled 
    wccpMibWalk $dut3 tFilterRedirectPolicyTable [expr $opt(maxPol) * 6]
    after 1000
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRedirectPolicyEntry - [expr $opt(maxPol) * 6] entries expected"
    wccpMibWalk $dut3 tFilterRedirectPolicyEntry [expr $opt(maxPol) * 6]
    after 1000
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRedirectPolicy - $opt(maxPol) Redirect Policies configured"
    wccpMibWalk $dut3 tFilterRedirectPolicy 0
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPRowStatus - $opt(maxPol) Redirect Policies configured"
    wccpMibWalk $dut3 tFilterRPRowStatus $opt(maxPol)
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPDescription - $opt(maxPol) Redirect Policies configured"
    wccpMibWalk $dut3 tFilterRPDescription $opt(maxPol)
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPAdminState - $opt(maxPol) Redirect Policies configured"
    wccpMibWalk $dut3 tFilterRPAdminState $opt(maxPol)
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPVrtrId - $opt(maxPol) Redirect Policies configured"
    wccpMibWalk $dut3 tFilterRPVrtrId $opt(maxPol)
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPActiveDestAddrType - $opt(maxPol) Redirect Policies configured"
    wccpMibWalk $dut3 tFilterRPActiveDestAddrType $opt(maxPol)
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPActiveDestAddr -   $opt(maxPol) Redirect Policies configured"
    wccpMibWalk $dut3 tFilterRPActiveDestAddr $opt(maxPol)
    puts "\n"
     
    log_msg INFO "############################################################"
    log_msg INFO "tFilterRedirectPolicyTable - getNext"
    log_msg INFO "############################################################"
    log_msg INFO "\n\nVerify correct number of entries with getnext"
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRedirectPolicyTable - 0"
    RP_wccpMibGetNext $dut3 tFilterRedirectPolicyTable 0 -nextTable tFilterRPRowStatus
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRedirectPolicyEntry - 0"
    RP_wccpMibGetNext $dut3 tFilterRedirectPolicyEntry 0 -nextTable tFilterRPRowStatus
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRedirectPolicy  - 0"
    RP_wccpMibGetNext $dut3 tFilterRedirectPolicy 0 -nextTable tFilterRPRowStatus
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPRowStatus - $opt(maxPol) "
    RP_wccpMibGetNext $dut3 tFilterRPRowStatus $opt(maxPol) -nextTable tFilterRPDescription 
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPDescription - $opt(maxPol)"
    RP_wccpMibGetNext $dut3 tFilterRPDescription $opt(maxPol) -nextTable tFilterRPAdminState 
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPAdminState - $opt(maxPol)"
    RP_wccpMibGetNext $dut3 tFilterRPAdminState $opt(maxPol) -nextTable tFilterRPVrtrId
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPVrtrId - $opt(maxPol)"
    RP_wccpMibGetNext $dut3 tFilterRPVrtrId $opt(maxPol) -nextTable tFilterRPActiveDestAddrType
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPActiveDestAddrType -$opt(maxPol) "
    RP_wccpMibGetNext $dut3 tFilterRPActiveDestAddrType $opt(maxPol) -nextTable tFilterRPActiveDestAddr
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPActiveDestAddr - $opt(maxPol)"
    RP_wccpMibGetNext $dut3 tFilterRPActiveDestAddr $opt(maxPol) 
    puts "\n" 
    puts "\n" 
   
   
   
    log_msg INFO "############################################################"
    log_msg INFO "tFilterRPlcyDstTable - mibWalk"
    log_msg INFO "############################################################" 
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyDstTable - [expr $opt(maxDest) * 7] entries expected"
    # within  tFilterRPlcyDstTable there are 7 accesible objects fullfilled 
    wccpMibWalk $dut3 tFilterRPlcyDstTable [expr $opt(maxDest) * 7]
    after 1000
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyDstEntry - [expr $opt(maxDest) * 7] entries expected"
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1 [expr $opt(maxDest) * 7]
    after 1000
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstAddrType - 0 entries expected"
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.1 0
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstAddr - 0 entries expected"
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.2 0
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstLastChanged - $opt(maxDest) entries expected "
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.3 $opt(maxDest)
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstRowStatus - $opt(maxDest) entries expected"
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.4 $opt(maxDest)
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstAdminState -$opt(maxDest) entries expected"
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.5 $opt(maxDest)
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstOperState - $opt(maxDest) entries expected "
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.6 $opt(maxDest)
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstDescription - $opt(maxDest) entries expected"
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.7 $opt(maxDest)
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstAdminPriority - $opt(maxDest) entries expected"
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.8 $opt(maxDest)
    log_msg INFO "Verify correct number of entries with mib walk of tFltrRPDstOperPriority - $opt(maxDest) entries expected "
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.9 $opt(maxDest)
    puts "\n" 

    log_msg INFO "############################################################"
    log_msg INFO "tFilterRPlcyDstTable - getNext"
    log_msg INFO "############################################################" 
    log_msg INFO "\n\nVerify correct number of entries with getnext"
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPlcyDstTable - 0"
    RP_wccpMibGetNext $dut3 tFilterRPlcyDstTable 0 -nextTable tFltrRPDstLastChanged
    log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPlcyDstEntry - 0"
    RP_wccpMibGetNext $dut3 tFilterRPlcyDstEntry 0 -nextTable tFltrRPDstLastChanged
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstAddrType - 0"
    RP_wccpMibGetNext $dut3 tFltrRPDstAddrType 0 -nextTable tFltrRPDstLastChanged
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstAddr - 0"
    RP_wccpMibGetNext $dut3 tFltrRPDstAddr 0 -nextTable tFltrRPDstLastChanged
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstLastChanged - $opt(maxDest)"
    RP_wccpMibGetNext $dut3 tFltrRPDstLastChanged $opt(maxDest) -nextTable tFltrRPDstRowStatus
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstRowStatus - $opt(maxDest)"
    RP_wccpMibGetNext $dut3 tFltrRPDstRowStatus $opt(maxDest) -nextTable tFltrRPDstAdminState
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstAdminState - $opt(maxDest)"
    RP_wccpMibGetNext $dut3 tFltrRPDstAdminState $opt(maxDest) -nextTable tFltrRPDstOperState
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstOperState - $opt(maxDest)"
    RP_wccpMibGetNext $dut3 tFltrRPDstOperState $opt(maxDest) -nextTable tFltrRPDstDescription
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstDescription - $opt(maxDest)"
    RP_wccpMibGetNext $dut3 tFltrRPDstDescription $opt(maxDest) -nextTable tFltrRPDstAdminPriority
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstAdminPriority - $opt(maxDest)"
    RP_wccpMibGetNext $dut3 tFltrRPDstAdminPriority $opt(maxDest) -nextTable tFltrRPDstOperPriority
    log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPDstOperPriority - $opt(maxDest)"
    RP_wccpMibGetNext $dut3 tFltrRPDstOperPriority $opt(maxDest) -nextTable tFilterRPlcySNMPTestTableLastChg
    puts "\n" 
    puts "\n" 

    if {$opt(HT) == "unicast" } {
        log_msg INFO "############################################################" 
        log_msg INFO "tFilterRPlcyUnicastRtTestTable - mibWalk"
        log_msg INFO "############################################################" 
        log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyUnicastRtTestTable - [expr $opt(maxDest) * 4] entries expected"
        # 4 accessable objects in the table
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable [expr $opt(maxDest) * 4]
        after 1000
        log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyUnicastRtTestEntry - [expr $opt(maxDest) * 4] entries expected"
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1 [expr $opt(maxDest) * 4]
        after 1000
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPUcastRtTLastChanged - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1.1 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPUcastRtTRowStatus - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1.2 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPUcastRtTLastActionTime - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1.3 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPUcastRtTLastAction - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1.4 $opt(maxDest)
        puts "\n"

        log_msg INFO "############################################################" 
        log_msg INFO "tFilterRPlcyUnicastRtTestTable - getNext"
        log_msg INFO "############################################################" 

        log_msg INFO "\n\nVerify correct number of entries with getnext"
        log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPlcyUnicastRtTestTable - 0"
        RP_wccpMibGetNext $dut3 tFilterRPlcyUnicastRtTestTable 0 -nextTable tFltrRPUcastRtTLastChanged
        log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPlcyUnicastRtTestEntry - 0"
        RP_wccpMibGetNext $dut3 tFilterRPlcyUnicastRtTestEntry 0 -nextTable tFltrRPUcastRtTLastChanged
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPUcastRtTLastChanged - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPUcastRtTLastChanged $opt(maxDest) -nextTable tFltrRPUcastRtTRowStatus
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPUcastRtTRowStatus - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPUcastRtTRowStatus $opt(maxDest) -nextTable tFltrRPUcastRtTLastActionTime
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPUcastRtTLastActionTime - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPUcastRtTLastActionTime $opt(maxDest) -nextTable tFltrRPUcastRtTLastAction
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPUcastRtTLastAction - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPUcastRtTLastAction $opt(maxDest) -nextTable tFilterSystemFilterTableLastChg
        puts "\n"
        puts "\n"
    }
    
    if {$opt(HT) == "ping" } {
        log_msg INFO "############################################################" 
        log_msg INFO "tFilterRPlcyPingTestTable - mibWalk"
        log_msg INFO "############################################################" 
        log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyPingTestTable - [expr $opt(maxDest) * 9] entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable [expr $opt(maxDest) * 9]
        after 1000
        log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyPingTestEntry - [expr $opt(maxDest) * 9] entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1 [expr $opt(maxDest) * 9]
        after 1000
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTLastChanged - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.1 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTRowStatus - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.2 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTInterval - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.3 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTTimeout - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.4 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTDropCount - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.5 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTHoldDown - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.6 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTHoldDownRemain - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.7 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTLastActionTime - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.8 $opt(maxDest)
        log_msg INFO "Verify correct number of entries with mib walk of tFltrRPPingTLastAction - $opt(maxDest) entries expected"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.9 $opt(maxDest)
        puts "\n"

        log_msg INFO "############################################################" 
        log_msg INFO "tFilterRPlcyPingTestTable - mibWalk"
        log_msg INFO "############################################################" 
        log_msg INFO "\n\nVerify correct number of entries with getnext"
        log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPlcyPingTestTable - 0"
        RP_wccpMibGetNext $dut3 tFilterRPlcyPingTestTable 0 -nextTable tFltrRPPingTLastChanged
        log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPlcyPingTestEntry - 0"
        RP_wccpMibGetNext $dut3 tFilterRPlcyPingTestEntry 0 -nextTable tFltrRPPingTLastChanged
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTLastChanged - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTLastChanged $opt(maxDest) -nextTable tFltrRPPingTRowStatus
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTRowStatus - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTRowStatus $opt(maxDest) -nextTable tFltrRPPingTInterval
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTInterval - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTInterval $opt(maxDest) -nextTable tFltrRPPingTTimeout
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTTimeout - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTTimeout $opt(maxDest) -nextTable tFltrRPPingTDropCount
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTDropCount - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTDropCount $opt(maxDest) -nextTable tFltrRPPingTHoldDown
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTHoldDown - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTHoldDown $opt(maxDest) -nextTable tFltrRPPingTHoldDownRemain
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTHoldDownRemain - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTHoldDownRemain $opt(maxDest) -nextTable tFltrRPPingTLastActionTime
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTLastActionTime - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTLastActionTime $opt(maxDest) -nextTable tFltrRPPingTLastAction
        log_msg INFO "Verify correct number of entries with mib getNext of tFltrRPPingTLastAction - $opt(maxDest)"
        RP_wccpMibGetNext $dut3 tFltrRPPingTLastAction $opt(maxDest) -nextTable tFilterRPlcyUcastRtTTableLastChg
        puts "\n"
        puts "\n"
    }
    
    
    log_msg INFO "############################################################" 
    log_msg INFO "saving Config"
    log_msg INFO "############################################################" 
    set fileName "$config_dir/Dut-$dut3-setupScale.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    set fileName2 "$config_dir/Dut-$dut3-setupScale_detail.cfg"
    log_msg INFO "saving detail config into $fileName2"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName2" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName2 FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save detail of active config Successful"
    }
    
    
    log_msg INFO "##########################"
    log_msg INFO "# start traffic"
    log_msg INFO "##########################"
    
 
            set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2

            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2 -Tx_time 60000
            after 1000 

                log_msg INFO "Delete routes to RP destinations - shutdown dest interface on Dut-$dut5"
                cliCne Dut-$dut5 "/configure router interface EC_intf shutdown"
            
            after 5000

            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
            log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
            log_msg INFO "$r"

            for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
                RP_routeCheck del [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) -method negative
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) -method negative
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) -method negative
            }
            
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId webserver -Tx_time 30000
            after 1000
    
    gash_interpreter

    log_msg INFO "##########################"
    log_msg INFO "# filter deconfig"
    log_msg INFO "##########################"
     
     
     
    set fileName "filterPolicyDeconfig.cfg"
    set file [openConfigFile $fileName ]
            
            #filter ingress 100 entries for wccp entities
            for {set i 1} {$i <= $opt(maxPol)} {incr i 1} {
                puts $file "/configure filter [getVar4 $filterType]-filter 100 create entry $i create action forward"
                puts $file "/configure filter no redirect-policy wccp_$i"
            }      
            puts $file "exit all"
            
    set r [execConfigFile $dut3 $file $fileName ]
    if { $r != "OK"} {
        log_msg ERROR "error during exec of config file $filename"
        set testResultFlag "FAILED"
        if {$opt(debug) != "false"} { return $result    }
    }
    if {[RP_filterDeconfig $setupType $opt(svcType) $svc1 $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) -scale true -IngrEgr $IngrEgr] != "OK" } {set Result "FAILED"; log_msg ERROR "Fail to deconfigure filters"}
    set r [cookCliData [Dut-$dut3 sendCliCommand "/configure filter"]]
    set r [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    log_msg DEBUG "/config filter info: \n$r" 
    after 2000 
     
     
    log_msg INFO "##########################"
    log_msg INFO "# memory leak checks"
    log_msg INFO "##########################"
 
    #check for memory leaks
    log_msg INFO "Check for memory leaks"
    set check [filterScale_memLeakChecks $dut3 check -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}]
    if {$check != "OK"} {
        log_msg ERROR "Memory leak detected after cleanup, found $check"
        set Result "FAILED"
    }
    if {[Dut-$dut3 cget -redundantSystem] != "false"} {
        set check_stb [filterScale_memLeakChecks $dut3 check -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}]
        if {$check_stb != "OK"} {
            log_msg ERROR "Memory leak detected after cleanup on standby CPM, found $check_stb"
            set Result "FAILED"
        }
    }

    Dut-$dut3 configure -cli_timeout $CliTim
    Dut-$dut3 configure -timeout $Tim
        
    

    log_msg INFO "############################################################"
    log_msg INFO "# Checks of empty SNMP tables via mibwalk and getnext"
    log_msg INFO "############################################################"
    puts "\n"
    
    
    log_msg INFO "############################################################"
    log_msg INFO "tFilterRedirectPolicyTable - mibWalk"
    log_msg INFO "############################################################"
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRedirectPolicyTable - 0"
    # within  tFilterRedirectPolicyTable there are 6 accesible objects fullfilled 
    wccpMibWalk $dut3 tFilterRedirectPolicyTable 0
    wccpMibWalk $dut3 tFilterRedirectPolicyEntry 0
    wccpMibWalk $dut3 tFilterRedirectPolicy 0
    wccpMibWalk $dut3 tFilterRPRowStatus 0
    wccpMibWalk $dut3 tFilterRPDescription 0
    wccpMibWalk $dut3 tFilterRPAdminState 0
    wccpMibWalk $dut3 tFilterRPVrtrId 0
    wccpMibWalk $dut3 tFilterRPActiveDestAddrType 0
    wccpMibWalk $dut3 tFilterRPActiveDestAddr 0
    puts "\n"
     
    log_msg INFO "############################################################"
    log_msg INFO "tFilterRedirectPolicyTable - getNext"
    log_msg INFO "############################################################"
    log_msg INFO "\n\nVerify correct number of entries with getnext"
    RP_wccpMibGetNext $dut3 tFilterRedirectPolicyTable 0
    RP_wccpMibGetNext $dut3 tFilterRedirectPolicyEntry 0 
    RP_wccpMibGetNext $dut3 tFilterRedirectPolicy 0 
    RP_wccpMibGetNext $dut3 tFilterRPRowStatus 0 
    RP_wccpMibGetNext $dut3 tFilterRPDescription 0
    RP_wccpMibGetNext $dut3 tFilterRPAdminState 0 
    RP_wccpMibGetNext $dut3 tFilterRPVrtrId 0
    RP_wccpMibGetNext $dut3 tFilterRPActiveDestAddrType 0
    RP_wccpMibGetNext $dut3 tFilterRPActiveDestAddr 0
    puts "\n" 
    puts "\n" 
   
   
   
    log_msg INFO "############################################################"
    log_msg INFO "tFilterRPlcyDstTable - mibWalk"
    log_msg INFO "############################################################" 
    log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyDstTable - 0"
    # within  tFilterRPlcyDstTable there are 7 accesible objects fullfilled 
    wccpMibWalk $dut3 tFilterRPlcyDstTable 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.1 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.2 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.3 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.4 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.5 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.6 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.7 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.8 0
    wccpMibWalk $dut3 tFilterRPlcyDstTable.1.9 0
    puts "\n" 

    log_msg INFO "############################################################"
    log_msg INFO "tFilterRPlcyDstTable - getNext"
    log_msg INFO "############################################################" 
    log_msg INFO "\n\nVerify correct number of entries with getnext"
    #RP_wccpMibGetNext $dut3 tFilterRPlcyDstTable 0 -nextTable tFilterRPlcySNMPTestTableLastChg
    RP_wccpMibGetNext $dut3 tFilterRPlcyDstTable 0
    RP_wccpMibGetNext $dut3 tFilterRPlcyDstEntry 0
    RP_wccpMibGetNext $dut3 tFltrRPDstAddrType 0
    RP_wccpMibGetNext $dut3 tFltrRPDstAddr 0
    RP_wccpMibGetNext $dut3 tFltrRPDstLastChanged 0
    RP_wccpMibGetNext $dut3 tFltrRPDstRowStatus 0
    RP_wccpMibGetNext $dut3 tFltrRPDstAdminState 0
    RP_wccpMibGetNext $dut3 tFltrRPDstOperState 0
    RP_wccpMibGetNext $dut3 tFltrRPDstDescription 0
    RP_wccpMibGetNext $dut3 tFltrRPDstAdminPriority 0
    RP_wccpMibGetNext $dut3 tFltrRPDstOperPriority 0
    puts "\n" 
    puts "\n" 

    if {$opt(HT) == "unicast" } {
        log_msg INFO "############################################################" 
        log_msg INFO "tFilterRPlcyUnicastRtTestTable - mibWalk"
        log_msg INFO "############################################################" 
        log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyUnicastRtTestTable - 0"
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable 0
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1 0
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1.1 0
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1.2 0
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1.3 0
        wccpMibWalk $dut3 tFilterRPlcyUnicastRtTestTable.1.4 0
        puts "\n"

        log_msg INFO "############################################################" 
        log_msg INFO "tFilterRPlcyUnicastRtTestTable - getNext"
        log_msg INFO "############################################################" 

        log_msg INFO "\n\nVerify correct number of entries with getnext"
        RP_wccpMibGetNext $dut3 tFilterRPlcyUnicastRtTestTable 0 -nextTable tFilterSystemFilterTableLastChg
        RP_wccpMibGetNext $dut3 tFilterRPlcyUnicastRtTestEntry 0 
        RP_wccpMibGetNext $dut3 tFltrRPUcastRtTLastChanged 0
        RP_wccpMibGetNext $dut3 tFltrRPUcastRtTRowStatus 0
        RP_wccpMibGetNext $dut3 tFltrRPUcastRtTLastActionTime 0
        RP_wccpMibGetNext $dut3 tFltrRPUcastRtTLastAction 0
        puts "\n"
        puts "\n"
    }
    
    if {$opt(HT) == "ping" } {
        log_msg INFO "############################################################" 
        log_msg INFO "tFilterRPlcyPingTestTable - mibWalk"
        log_msg INFO "############################################################" 
        log_msg INFO "Verify correct number of entries with mib walk of tFilterRPlcyPingTestTable - 0"
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.1 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.2 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.3 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.4 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.5 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.6 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.7 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.8 0
        wccpMibWalk $dut3 tFilterRPlcyPingTestTable.1.9 0
        puts "\n"

        log_msg INFO "############################################################" 
        log_msg INFO "tFilterRPlcyPingTestTable - mibWalk"
        log_msg INFO "############################################################" 
        log_msg INFO "\n\nVerify correct number of entries with getnext"

        RP_wccpMibGetNext $dut3 tFilterRPlcyPingTestTable 0 -nextTable tFilterRPlcyUcastRtTTableLastChg
        RP_wccpMibGetNext $dut3 tFilterRPlcyPingTestEntry 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTLastChanged 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTRowStatus 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTInterval 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTTimeout 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTDropCount 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTHoldDown 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTHoldDownRemain 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTLastActionTime 0
        RP_wccpMibGetNext $dut3 tFltrRPPingTLastAction 0
        puts "\n"
        puts "\n"
    }
           
      
     
           
           
    log_msg INFO "#########################################################"
    log_msg INFO "#####     Admin save exec/ Admin save detal exec     ####" 
    log_msg INFO "#########################################################"
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }    
    
    after 1000
    gash_interpreter
    log_msg INFO "Execution/Re-execution of config files"
    log_msg INFO "Exec + Re-exec $config_dir/Dut-$dut3-setupScale.cfg"
    
    
     for {set j 1} {$j <= 2} {incr j 1} { 
        set fileName "$config_dir/Dut-$dut3-setupScale.cfg"
        after 2000
        log_msg INFO "=> Executing saved config file $fileName"
            set CLI [ cookCliData [ Dut-$dut3 sendCliCommand "exec $fileName" -extendedTimeout 300  -extendedMatchString "#" ]]
            set SC [ string first "Executed" $CLI ]
            if { $SC < 1 } {
                log_msg DEBUG "$CLI"
                log_msg ERROR "Exec of $fileName FAILED - Was $SC And Should Be >= 1"
                set Result FAILED
            }
            Dut-$dut3 sendCliCommand "exit all"
    }       
           

    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    after 2000
    
    
    #recreation host on sla profile after execution of config
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        filter_subinsert_radius_recreateHost $subhostIp $srcMac_13 -numStreams $numStreams -hostType $hostType -slaName sla2 -hostSucceed true -clearFirst true
    }

    #binding filters via proc - to ensure that host will be on sla1
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"; log_msg ERROR "Fail to configure ingress filter"}
    #egress filter
    if {$IngrEgr == "true"} {
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"; log_msg ERROR "Fail to configure egress filter"}
    }
    RP_set_dut       
           
     
     gash_interpreter
           
    log_msg INFO "verifying resources on CPM and IOM are matching for Dut-$dut3"
    set r [ resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 1 ]
    if {$r != "OK"} { log_msg ERROR "resource mismatch between CPM and IOM for Dut-$dut3, found $r" ; set result FAILED }

        
    log_msg INFO "##########################"
    log_msg INFO "# start traffic"
    log_msg INFO "##########################"
    
 
            set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId webserver

         

                log_msg INFO "Add routes to RP destinations - shutdown dest interface on Dut-$dut5"
                cliCne Dut-$dut5 "/configure router interface EC_intf no shutdown"
            
            after 5000

            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
            log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
            log_msg INFO "$r"

            for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
                RP_routeCheck add [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) 
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) 
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)
            }
            
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
            log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
            log_msg INFO "$r"
            
            set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2
            
    log_msg INFO "verifying resources on CPM and IOM are matching for Dut-$dut3"
    set r [ resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 1 ]
    if {$r != "OK"} { log_msg ERROR "resource mismatch between CPM and IOM for Dut-$dut3, found $r" ; set result FAILED }

    
    
    
    log_msg INFO "#########################################################"
    log_msg INFO "##############  2x restart of active CPM   ##############"
    log_msg INFO "#########################################################"
    set IomFiltersBefore [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
    for {set i 1} {$i <= 2} {incr i 1} {
        # SWO performed
        set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
        log_msg INFO "Card Status:"
        puts $res
        log_msg INFO "Restart of active CPM"
        Dut-$dut3 sendCliCommand "exit all"
        Dut-$dut3 activitySwitch

        set rc [resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 60]
        if {$rc != "OK"} {
            log_msg ERROR "Resource mismatch after restart of IOM" ; set testResultFlag "FAILED"
        }
        set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
        if { ($buildVersion == 0 || $buildVersion >= 11) && [getGlobalVar 7710Support] == "false" } {
            # verify if all filters were downloaded to IOM 2
            set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
            if { $IomFiltersAfter != $IomFiltersBefore } {
                log_msg ERROR "Not all filters were downloaded to IOM after boot" 
                log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
                log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
                set Result "FAILED"
            }
        }
    }
    after 15000
    
            for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
                RP_routeCheck add [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) 
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) 
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)
            }
            
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
            log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
            log_msg INFO "$r"
   
                  
    log_msg INFO "############################################################"
    log_msg INFO "# CLI/SNMP check of policies - all should be in operational"
    log_msg INFO "############################################################"
    for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
        log_msg DEBUG "Checking policy WCCP_$i"
        RP_showCheck wccp_$i -RP_activeDest [ipConvert $family 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up
        RP_snmpCheck wccp_$i -RP_activeDest [ipConvert $family 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService
        for {set j 2} {$j <=9} {incr j 1} {
            RP_showCheck wccp_$i -dest [ipConvert $family 15.15.$i.$j] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
            RP_snmpCheck wccp_$i -dest [ipConvert $family 15.15.$i.$j] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        }   
        puts "\n"
    }
    
    log_msg INFO "Associations checks"
    for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
        RP_verifyRPAssoc wccp_$i "100-$i"
    } 
    
    log_msg INFO "verifying resources on CPM and IOM are matching for Dut-$dut3"
    set r [ resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 1 ]
    if {$r != "OK"} { log_msg ERROR "resource mismatch between CPM and IOM for Dut-$dut3, found $r" ; set result FAILED }    
    
    
    log_msg INFO "##########################"
    log_msg INFO "# start quick traffic"
    log_msg INFO "##########################"
    
        set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
        RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2
    


    log_msg INFO "############################################################" 
    log_msg INFO "saving Config"
    log_msg INFO "############################################################" 
    
    set fileName "$config_dir/Dut-$dut3-setupScale2.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    set fileName2 "$config_dir/Dut-$dut3-setupScale_detail2.cfg"
    log_msg INFO "saving detail config into $fileName2"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName2" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName2 FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save detail of active config Successful"
    }
    
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-setupScale.cfg $logdir/device_logs/saved_configs/Dut-$dut3-setupScale2.cfg] == "ERROR"} {set Result FAILED; log_msg ERROR "Fail in file comparism"}
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-setupScale_detail.cfg $logdir/device_logs/saved_configs/Dut-$dut3-setupScale_detail2.cfg] == "ERROR"} {set Result FAILED; log_msg ERROR "Fail in file comparism"}

    
    log_msg INFO "rollback save"
    gash_interpreter
    #save Rollback
    RP_rollbackSave $dut3 1
    
    set fileName "$config_dir/Dut-$dut3-setupScale3.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    
    
    set haTestList ""
    if {[filter_isHsa $dut3]} { lappend haTestList "HSA Active IOM Switchover" }
    if {[filter_isHsa $dut3]} { lappend haTestList "HSA Active IOM Switchover" }
    lappend haTestList "HA Switch-Over"
    lappend haTestList "HA Switch-Over"
    lappend haTestList "clear IOM"
    lappend haTestList "port shutdown"
    lappend haTestList "clear MDA"
    set IomFiltersBefore [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
    
    foreach {haTest} $haTestList {
        set res [cookCliData [Dut-$dut3 sendCliCommand "show card"]]
        log_msg INFO "Card Status:"
        puts $res
        
        
        log_msg INFO "#######################################"
        log_msg INFO " $haTest  "
        log_msg INFO "#######################################"
        
        
        if {$haTest == "HA Switch-Over"} {
            Dut-$dut3 activitySwitch
        } elseif {$haTest == "HSA Active IOM Switchover"} {
            set r [Dut-$dut3 hsa_switchAndVerify_ActiveCpmMicrocodeSlot]
            if {$r != "OK"} {
                log_msg ERROR "$haTest test failed"
            }
        } elseif {$haTest == "clear IOM"} {
            foreach {lagPort} $port_3_2 {
                Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "clear card [lindex [split $lagPort "/"] 0]"
            }
            Dut-$dut3 CnWCardStatus ; after 30000
            set rc [resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 30]
            if {$rc != "OK"} {
                log_msg ERROR "Resource mismatch after restart of IOM" ; set Result "FAILED"
            }
        } elseif {$haTest == "port shutdown"} {
            foreach {lagPort} $port_3_2 {
                Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "configure port $lagPort shutdown" ; after 5000
                if {[Dut-$dut3 getTmnxPortOperStatus 1 [Dut-$dut3 convert_port_ifIndex port $lagPort]] != "outOfService"} {
                    log_msg ERROR "port $lagPort still not outOfService 5 seconds after shutdown"
                }
                Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "configure port $lagPort no shutdown" ; after 15000
                if {[Dut-$dut3 getTmnxPortOperStatus 1 [Dut-$dut3 convert_port_ifIndex port $lagPort]] != "inService"} {
                    log_msg ERROR "port $lagPort still not inService 15 seconds after no shutdown"
                }
            }
        } elseif {$haTest == "clear MDA"} {
            foreach {lagPort} $port_3_2 {
                Dut-$dut3 sendCliCommand "exit all"
                Dut-$dut3 sendCliCommand "clear mda [lindex [split $lagPort "/"] 0]/1" ; Dut-$dut3 sendCliCommand "clear mda [lindex [split $lagPort "/"] 0]/2"
            }
            Dut-$dut3 CnWMdaStatus -Time 300
        }

        set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
        if { ($buildVersion == 0 || $buildVersion >= 11) && [getGlobalVar 7710Support] == "false" } {
            # verify if all filters were downloaded to IOM 2
            set IomFiltersAfter [filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
            if { $IomFiltersAfter != $IomFiltersBefore } {
                log_msg ERROR "Not all filters were downloaded to IOM after boot" 
                log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
                log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
                set Result "FAILED"
            }
        }
        if {($itfBind == "spoke") || ($itfBind == "mesh") } {
            log_msg DEBUG "Waiting for SDP to become operational..."
                set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }     
        }
        after 10000
    
        for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
            RP_routeCheck add [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
            RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) 
            RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) 
            RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)
        }
        
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
        log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
        log_msg INFO "$r"
        
        set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
        RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2

    }
    
    

    log_msg INFO "##########################"
    log_msg INFO "# Dut-$dut3 deconfig and exec config and deconfig and rollback revert"   
    log_msg INFO "##########################"
    
    
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }
    
    saveOrRestore delete -dut Dut-$dut3
    
    
 
    

    set fileName "$config_dir/Dut-$dut3-setupScale3.cfg"
    after 2000
    log_msg INFO "=> Executing saved config file $fileName"
        set CLI [ cookCliData [ Dut-$dut3 sendCliCommand "exec $fileName" -extendedTimeout 300  -extendedMatchString "#" ]]
        set SC [ string first "Executed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Exec of $fileName FAILED - Was $SC And Should Be >= 1"
            set Result FAILED
        }
        Dut-$dut3 sendCliCommand "exit all"
      
           
    #shutdown VPRNs, if present
    if { ($opt(dest1RC) == "VRF1")} {
       cliCne Dut-$dut3 "/configure service vprn $opt(RProuter) shutdown"
    }
    
    
         log_msg INFO "#########################################################"
    log_msg INFO "#####              Cleanup config again              ####"
    log_msg INFO "#########################################################"
    
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }
    
    saveOrRestore delete -dut Dut-$dut3 
    Dut-$dut3 sendCliCommand "configure system rollback rollback-location $dir/RP_rollback" 
    
    
    log_msg INFO "performing ROLLBACK to latest-rb"
    gash_interpreter
    
    RP_rollbackRestore $dut3 "latest-rb"

    
    if {($itfBind == "spoke") || ($itfBind == "mesh") } {
        log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
    }
    after 15000
    
     #recreation host on sla profile after execution of config
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        filter_subinsert_radius_recreateHost $subhostIp $srcMac_13 -numStreams $numStreams -hostType $hostType -slaName sla2 -hostSucceed true -clearFirst true
    }

    #binding filters via proc - to ensure that host will be on sla1
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"; log_msg ERROR "Fail to configure ingress  filter"}
    #egress filter
    if {$IngrEgr == "true"} {
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"; log_msg ERROR "Fail to configure egress  filter"}
    }
    RP_set_dut
    
    after 2000
    
    for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
            RP_routeCheck add [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
            if {[RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)] != "OK" } {
                set Result FAILED 
                set res [cookCliData [Dut-$dut3 sendCliCommand "show log log-id 99 "]]
                puts $res
                
            }
           
        }
    after 5000    
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
        log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
        log_msg INFO "$r"
    
     for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
        log_msg DEBUG "Checking policy WCCP_$i"
        RP_showCheck wccp_$i -RP_activeDest [ipConvert $family 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up
        RP_snmpCheck wccp_$i -RP_activeDest [ipConvert $family 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService
        for {set j 2} {$j <=9} {incr j 1} {
            RP_showCheck wccp_$i -dest [ipConvert $family 15.15.$i.$j] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
            RP_snmpCheck wccp_$i -dest [ipConvert $family 15.15.$i.$j] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        }   
        puts "\n"
    }
    
    log_msg INFO "Associations checks"
    for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
        RP_verifyRPAssoc wccp_$i "100-$i"
    } 

    
        set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
        RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2 -Tx_time 20000
        
        
    log_msg INFO "##########################"
    log_msg INFO "# Admin tech-support file generation"
    log_msg INFO "##########################"
       
    RP_clearAllFilter $dut3 -filterType $filterType
    filterTCAM_ixStartTraffic $trafficStreamId -direction ingress
    
    
                set fileName "$config_dir/Dut-$dut3-adminTech"
                log_msg INFO "saving admin-tech file into $fileName"
                set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin tech-support $fileName" -extendedTimeout 150  -extendedMatchString "#" ]]
                if { [regexp "Done with data collection" $CLI ] == "0" } {
                    log_msg ERROR "admin tech-support file generation failed"    
                    set Result FAILED   
                } else  {
                    log_msg INFO "admin tech-support file generation Succesful"
                }
    
    
    filterTCAM_ixStopTraffic $trafficStreamId -direction ingress
    RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2 -traffic false
    
    
    log_msg INFO "##########################"
    log_msg INFO "# Deleting all"
    log_msg INFO "##########################"
    
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }
    
 
    #clearing linux PC ethernets
    if { [RP_linuxRoutes -scale true -deconfig true] != "OK" } {set Result "FAILED"; log_msg ERROR "Fail to deconfigure linux routes"}  
    
  
        log_msg INFO "Deleting configuration"
        RP_rollbackCleanup $dut3
        saveOrRestore delete
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
 

}


proc wccp_enhanced_scale_512HT { args } {    

    global testdir logdir ixia_port testResultFlag
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    source $testdir/testsuites/filter/tests/wccp.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
  
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)          true
    set opt(debugPrint)     false
    set opt(deconfig)       true
    set opt(dual)           false
    set opt(snmp)           true
    set opt(setupType)      ""
    set opt(mode)           "regular"
    set opt(HT)             "unicast"
    set opt(filterType)     "IP"
    set opt(routing_prot)   "ospf"
    set static_routes_list  ""
    set opt(issu)           "false"
    set opt(dest4support)   "false"
    set opt(dest3support)   "false"
    set opt(iteration)      1
    set vprnId              "-1"
    set vprn2Id             "-1"
    # set vprn3Id           "-1"
    # set vprn4Id           "-1"          
    set testID              $::TestDB::currentTestCase
    set username            $::TestDB::thisTestBed
    set hostIp              $::TestDB::thisHostIpAddr
    set dir                 "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir          "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result              "PASSED"
    set testResultFlag      "OK"
    set opt(svcType)        "grt"
    set opt(itfBind)        ""
    set opt(case)           "positive"
    set opt(dest1RC)        ""
    set opt(dest2RC)        ""
    set opt(dest3RC)        ""
    set opt(dest4RC)        ""
    set opt(Tcam_full)           "true"

    set opt(maxPol)         16
    set opt(maxDest)        128
    set opt(maxHealthTests) 256
    set opt(maxUrlHealthTests) 512
    set opt(maxReturnCodes) 2048
    set opt(maxReturnValues) 1024


    
    # opt(maxPol) = 16 Redirect Policies per system
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        #set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
        set opt(dest1RC)    [ RP_lrandom "VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId


    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
     

    RP_set_dut
   
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$vprnId != "-1"} {log_msg INFO "# vprnId              $vprnId"}
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   

    ## randomly choose initial setupType of duts A,B,C   - 
    
    #subsap not supported in this scale for now
    #IXIA stream consists of various src-ip  - filter apllied on subscriber intf match only 1 of them  - TODO -do proc for applying filter on sap in case of different subsap topos
    
    set itfBind "subsap"
    while { $itfBind == "subsap" } {
        if {$opt(setupType) == ""} {
            if { $opt(svcType) == "vprn" } {
                    log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
                    if {$opt(itfBind) == "serviceAware"} {
                    set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
                    } else {
                    set setupType [RP_VrfTo_getSetupType $opt(filterType)]
                    }
            } elseif { $opt(svcType) == "L2Service" } {
                log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
                set setupType [RP_L2Service_getSetupType $opt(filterType)]
            } elseif { $opt(svcType) == "rvpls" } {
                log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
                set setupType [RP_RVPLS_getSetupType $opt(filterType)]
            } else {
                log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
                set setupType [RP_GrtTo_getSetupType $opt(filterType)]
            }
        } else {
            set setupType $opt(setupType)
            log_msg NOTICE "User defined setupType: $setupType"
            if {[regexp {rvpls} $setupType]} { 
                set opt(svcType) "rvpls"
            } elseif {[regexp {vprn} $setupType]} { 
                set opt(svcType) "vprn" 
            } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
                set opt(svcType) "L2Service"
            } else { 
                set opt(svcType) ""
            }        
        }
        if {[filterTCAM_getGlobals $setupType] != "OK"} {
            log_msg ERROR "Unable to find correct parameters for $setupType"
            set Result FAILED
        }
    }
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }  
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType
    
    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
    

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    if {[getGlobalVar physTopology] == "scaleBed"} { set ing_port 5; set eg_port 1 } else { set ing_port 1; set eg_port 3 }
        set portList [list $ixport1 ]
        scan $ixport1 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port 1
        set da_mac [join [split [stream cget -da] " "] ":"]
        set sa_mac [join [split [stream cget -sa] " "] ":"]
        if {[getGlobalVar hardwareOnly] == "true"} { set traffic_rate 90000; set traffic_burst 9000 } else { set traffic_rate 100 ; set traffic_burst 100 }
        
        if {$filterType == "IP"} {
            set trafficStreamId 9
            handlePacket -port $ing_port -dot1q 1 -dst [ipConvert $family 3.3.0.2] -numDest 1 -src [ipConvert $family 1.1.0.2] -numSource $opt(maxPol) -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        } else {
            set trafficStreamId 7
            handlePacket -port $ing_port -dot1q 1 -dst 3FFE::303:2:0:0:0:0 -numDest 1 -src 3FFE::101:2:0:0:0:2 -numSource $opt(maxPol) -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        }
        
        after 1000
        stream get $chassis $card $port $trafficStreamId
        stream config  -enable  false
        stream set $chassis $card $port $trafficStreamId
        stream write $chassis $card $port $trafficStreamId

        set portList [list $ixport3 ]
        scan $ixport3 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port 1
        set da_mac [join [split [stream cget -da] " "] ":"]
        set sa_mac [join [split [stream cget -sa] " "] ":"]
        if {$filterType == "IP"} {
             handlePacket -port $eg_port -dot1q 1 -src [ipConvert $family 3.3.0.2] -numDest $opt(maxPol) -dst [ipConvert $family 1.1.0.2] -numSource 1 -numDestMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        } else {
            handlePacket -port $eg_port -dot1q 1 -src 3FFE::303:2:0:0:0:0 -numDest $opt(maxPol) -dst 3FFE::101:2:0:0:0:2 -numSource 1 -numDestMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        }
        
        after 1000
        stream get $chassis $card $port $trafficStreamId
        stream config  -enable  false
        stream set $chassis $card $port $trafficStreamId
        stream write $chassis $card $port $trafficStreamId
  
    RP_set_dut
    
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    

     
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    
    # dutE -interfaces
    set mtu 1500
    set cmdList         ""
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/1) no shutdown"
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/1) ethernet mode network"
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/1) ethernet mtu $mtu"
    lappend cmdList "/configure router interface EC_intf address [ipConvert ipv4 $EC_Addr]/[RP_maskConvert ipv4 $subnetMask]"
    lappend cmdList "/configure router interface EC_intf ipv6 address [ipConvert ipv6 $EC_Addr]/[RP_maskConvert ipv6 $subnetMask]"
    lappend cmdList "/configure router interface EC_intf port $topoMap(Dut-$dut5,1/1/1)"       

    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/4) no shutdown"
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/4) ethernet mode network"
    lappend cmdList "/configure port $topoMap(Dut-$dut5,1/1/4) ethernet mtu $mtu"
    lappend cmdList "/configure router interface EEth3_intf address [ipConvert ipv4 15.15.0.1]/[RP_maskConvert ipv4 16]"
    lappend cmdList "/configure router interface EEth3_intf ipv6 address [ipConvert ipv6 15.15.0.1]/[RP_maskConvert ipv6 16]"
    lappend cmdList "/configure router interface EEth3_intf port $topoMap(Dut-$dut5,1/1/4)"   
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut5 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut5 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut5: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    } 
    
    
  gash_interpreter
  
            set offset 1
            set maxVprn 16
            log_msg INFO "Configure VPRNs"
            set encap1 1
            set filename "PBR_VPRNs_for_SNMPtest1"
            set lfileid [openConfigFile $filename ]
            
            puts $lfileid "/configure port $topoMap(Dut-$dut4,1/1/4) shutdown"
            puts $lfileid "/configure port $topoMap(Dut-$dut4,1/1/4) ethernet mode network"
            puts $lfileid "/configure port $topoMap(Dut-$dut4,1/1/4) ethernet encap-type dot1q"
            puts $lfileid "/configure port $topoMap(Dut-$dut4,1/1/4) ethernet mtu $mtu"  
            puts $lfileid "/configure port $topoMap(Dut-$dut4,1/1/4) no shutdown"    
                        
                       for  {set i $offset} {$i <= [expr $maxVprn ]} {incr i} {
                            puts $lfileid "exit all"
                            puts $lfileid "configure service vprn $i customer 1 create"
                            puts $lfileid "     description \"Default Description For VPRN ID $i\" "
                            puts $lfileid "     route-distinguisher 10.20.1.4:$i"
                            puts $lfileid "     service-name \"XYZ vprn $i\""
                            puts $lfileid "         interface loopBack_vprn_$i create"
                            puts $lfileid "             address 172.172.172.$i/32"
                            puts $lfileid "             ipv6"
                            puts $lfileid "                 address [ipConvert ipv6 172.172.172.$i]/128"
                            puts $lfileid "             exit"
                            puts $lfileid "             loopback"
                            puts $lfileid "         no shutdown"
                            puts $lfileid "         exit"
                            puts $lfileid "no shutdown"
                            puts $lfileid "exit all"
                            
                            
                            puts $lfileid  "/configure router interface DC_intf_$i address 172.10.$i.2/24"
                            puts $lfileid  "/configure router interface DC_intf_$i ipv6 address [ipConvert ipv6 172.10.$i.2]/56"
                            puts $lfileid  "/configure router interface DC_intf_$i port $topoMap(Dut-$dut4,1/1/4):$i"
                                           
                            incr encap1 1
                      
                       }
            
            puts $lfileid "/configure router static-route 10.20.1.3/32 next-hop 172.10.1.1"
            puts $lfileid "/configure router static-route [ipConvert ipv6 10.20.1.3]/128 next-hop [ipConvert ipv6 172.10.1.1]"             
             
            set r [execConfigFile $dut4 $lfileid $filename -execTimeout 1000]
            if { $r != "OK"} {
                log_msg ERROR "error during exec of config file $filename"
                set Result "FAILED"
            }
            
            set offset 17
            set maxVprn 32
            log_msg INFO "Configure VPRNs"
            set encap1 1
            set filename "PBR_VPRNs_for_SNMPtest2"
            set lfileid [openConfigFile $filename ]
            
            puts $lfileid "/configure port $topoMap(Dut-$dut6,1/1/4) shutdown"
            puts $lfileid "/configure port $topoMap(Dut-$dut6,1/1/4) ethernet mode network"
            puts $lfileid "/configure port $topoMap(Dut-$dut6,1/1/4) ethernet encap-type dot1q"
            puts $lfileid "/configure port $topoMap(Dut-$dut6,1/1/4) ethernet mtu $mtu"  
            puts $lfileid "/configure port $topoMap(Dut-$dut6,1/1/4) no shutdown"    
                        
                       for  {set i $offset} {$i <= [expr $maxVprn ]} {incr i} {
                            puts $lfileid "exit all"
                            puts $lfileid "configure service vprn $i customer 1 create"
                            puts $lfileid "     description \"Default Description For VPRN ID $i\" "
                            puts $lfileid "     route-distinguisher 10.20.1.6:$i"
                            puts $lfileid "     service-name \"XYZ vprn $i\""
                            puts $lfileid "         interface loopBack_vprn_$i create"
                            puts $lfileid "             address 172.172.172.$i/32"
                            puts $lfileid "             ipv6"
                            puts $lfileid "                 address [ipConvert ipv6 172.172.172.$i]/128"
                            puts $lfileid "             exit"
                            puts $lfileid "             loopback"
                            puts $lfileid "         no shutdown"
                            puts $lfileid "         exit"
                            puts $lfileid "no shutdown"
                            puts $lfileid "exit all"
                            
                            
                            puts $lfileid  "/configure router interface FC_intf_$i address 172.10.$i.2/24"
                            puts $lfileid  "/configure router interface FC_intf_$i ipv6 address [ipConvert ipv6 172.10.$i.2]/56"
                            puts $lfileid  "/configure router interface FC_intf_$i port $topoMap(Dut-$dut6,1/1/4):$i"
                                           
                            incr encap1 1
                      
                       }
            
            puts $lfileid "/configure router static-route 10.20.1.3/32 next-hop 172.10.17.1"
            puts $lfileid "/configure router static-route [ipConvert ipv6 10.20.1.3]/128 next-hop [ipConvert ipv6 172.10.17.1]"             
             
            set r [execConfigFile $dut6 $lfileid $filename -execTimeout 1000]
            if { $r != "OK"} {
                log_msg ERROR "error during exec of config file $filename"
                set Result "FAILED"
            }
 

    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut  
    if { [RP_configTestedDut_scale $opt(dest1RC) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    if { [RP_linuxRoutes -scale true -filterType IP -eth1_config true -URL true] != "OK" } {set Result "FAILED"}  
    if { [RP_linuxRoutes -scale true -filterType IPv6] != "OK" } {set Result "FAILED"}  
  
    #configuration of routes - BGP or OSPF or OSPFv3 + 100k of some static routes
    if { [RP_configRoutes_scale $opt(dest1RC) $opt(routing_prot) -filterType IP ] != "OK" } {set Result "FAILED"}
    if { [RP_configRoutes_scale $opt(dest1RC) $opt(routing_prot) -filterType IPv6] != "OK" } {set Result "FAILED"}

    
    
    gash_interpreter
 
    # log_msg INFO "##########################"
    # log_msg INFO "##########################"
    # log_msg INFO "# start memory leak checks"
    # log_msg INFO "##########################"
    
            # set CliTim [ Dut-$dut3 cget -cli_timeout ]
            # set Tim [ Dut-$dut3 cget -timeout ]
            # Dut-$dut3 configure -cli_timeout 200
            # Dut-$dut3 configure -timeout 200
                # filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}

                # if {[Dut-$dut3 cget -redundantSystem] != "false"} {
                    # # start memory leak checks on standby CPM
                    # filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}
                # }

    
    
    log_msg INFO "##########################"
    log_msg INFO "# start filter config"
    log_msg INFO "##########################"
    
            #configuration of filter (filters, redirect policy)
            set cmdList ""   
            lappend cmdList "/configure filter ip-filter 100 create default-action forward"
            lappend cmdList "/configure filter ip-filter 1500 create default-action forward"
            lappend cmdList "/configure filter ip-filter 2046 create default-action forward"
            lappend cmdList "/configure filter ip-filter 2046 create entry 1 create match dst-ip [ipConvert ip 3.3.0.0]/[RP_maskConvert ip 16]"
            lappend cmdList "/configure filter ip-filter 2046 create entry 1 create action forward"
            lappend cmdList "/configure filter ip-filter 2047 create default-action forward"
            lappend cmdList "/configure filter ip-filter 2047 create entry 1 create match dst-ip [ipConvert ip 3.3.0.0]/[RP_maskConvert ip 16]"
            lappend cmdList "/configure filter ip-filter 2047 create entry 1 create action forward"

            lappend cmdList "/configure filter ipv6-filter 100 create default-action forward"
            lappend cmdList "/configure filter ipv6-filter 1500 create default-action forward"
            lappend cmdList "/configure filter ipv6-filter 2046 create default-action forward"
            lappend cmdList "/configure filter ipv6-filter 2046 create entry 1 create match dst-ip [ipConvert ipv6 3.3.0.0]/[RP_maskConvert ipv6 16]"
            lappend cmdList "/configure filter ipv6-filter 2046 create entry 1 create action forward"
            lappend cmdList "/configure filter ipv6-filter 2047 create default-action forward"
            lappend cmdList "/configure filter ipv6-filter 2047 create entry 1 create match dst-ip [ipConvert ipv6 3.3.0.0]/[RP_maskConvert ipv6 16]"
            lappend cmdList "/configure filter ipv6-filter 2047 create entry 1 create action forward"
            lappend cmdList "   exit all"
            
            foreach {cmd} $cmdList {
                log_msg INFO "Dut-$dut3 sendCliCommand $cmd"
                set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }
            
            
            #binding filters
             
            if {$opt(filterType) == "IP"} {  
                set filterType IPv6
                set family Ipv6
                set setupType [join "IPv6 [lrange [split $setupType "_"] 1 [llength [split $setupType "_"]]]" "_"]
                
                set r [filterTCAM_applyFilter $setupType Ingress 100]
                if {$r != "noError"} { set Result "FAILED"}
                RP_set_dut
                set r [filterTCAM_applyFilter $setupType Egress 1500]
                if {$r != "noError"} { set Result "FAILED"}
                RP_set_dut
                set filterType IP
                set family Ipv4
                set setupType [join "IP [lrange [split $setupType "_"] 1 [llength [split $setupType "_"]]]" "_"]
                
                set r [filterTCAM_applyFilter $setupType Ingress 100]
                if {$r != "noError"} { set Result "FAILED"}
                RP_set_dut
                set r [filterTCAM_applyFilter $setupType Egress 1500]
                if {$r != "noError"} { set Result "FAILED"} 
                RP_set_dut
                
            }  else {
                set filterType IP
                set family Ipv4
                set setupType [join "IP [lrange [split $setupType "_"] 1 [llength [split $setupType "_"]]]" "_"]
                
                set r [filterTCAM_applyFilter $setupType Ingress 100]
                if {$r != "noError"} { set Result "FAILED"}
                RP_set_dut
                set r [filterTCAM_applyFilter $setupType Egress 1500]
                if {$r != "noError"} { set Result "FAILED"}
                RP_set_dut
                
                set filterType IPv6
                set family Ipv6
                set setupType [join "IPv6 [lrange [split $setupType "_"] 1 [llength [split $setupType "_"]]]" "_"]
                
                set r [filterTCAM_applyFilter $setupType Ingress 100]
                if {$r != "noError"} { set Result "FAILED"}
                RP_set_dut
                set r [filterTCAM_applyFilter $setupType Egress 1500]
                if {$r != "noError"} { set Result "FAILED"}   
                RP_set_dut
            }   
             
            
           
            #egress to Ixia
            set cmdList ""
            if { $opt(svcType) == "vprn" } {
                if { [regexp (WRvprnRCO) $setupType] } {
                    lappend cmdList "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter ip 2046"
                    lappend cmdList "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter ipv6 2046"
                } else {
                    lappend cmdList "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter ip 2046"
                    lappend cmdList "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter ipv6 2046"
                }
            } elseif {$opt(svcType) == "L2Service" } {
                if { $svcType == "mvpls" || $svcType == "vpls" } { 
                    lappend cmdList "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter ip 2046" 
                    lappend cmdList "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter ipv6 2046" 
                }
                if { $svcType == "epipe" || $svcType == "ipipe"} { 
                    lappend cmdList  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter ip 2046"
                    lappend cmdList  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter ipv6 2046"
                }
            } elseif {$opt(svcType) == "rvpls" } {
                lappend cmdList "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter ip 2046"
                lappend cmdList "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter ipv6 2046"
            } else {
                lappend cmdList "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter ip 2046"
                lappend cmdList "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter ipv6 2046"
            }  
            foreach cmd $cmdList {
            log_msg INFO "Dut-C $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }
           
            #egres to dest1,2,3
            if { [RP_applyFilter_Cli $dut3 egress 2047 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1) -filterType IP] != "OK" } {set Result "FAILED"}
            if { [RP_applyFilter_Cli $dut3 egress 2047 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1) -filterType IPv6] != "OK" } {set Result "FAILED"}
          

                                     

     
    log_msg INFO "###################################"
    log_msg INFO " redirect policies config "
    log_msg INFO "###################################"
        
            set fileName "filterPolicyConfig.cfg"
            set file [openConfigFile $fileName ]
            set HT_list ""        
                    # opt(maxPol) = 16 Redirect Policies
                    for {set i 1} {$i <= 4} {incr i 1} {
                        puts $file "/configure filter redirect-policy wccp_$i create"
                        puts $file "/configure filter redirect-policy wccp_$i no shutdown"
                        if {$opt(RProuter) != ""} {
                            puts $file "/configure filter redirect-policy wccp_$i router $opt(RProuter)"
                        } 
                        for {set j 2} {$j <= 9} {incr j 1} {    
                            puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv4 15.15.$i.$j] create"
                            puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv4 15.15.$i.$j] no shutdown"
                            
                            if {$opt(RProuter) != ""} {
                                set test [RP_lrandom "ping-test unicast-rt-test"]
                            } else {
                                set test "ping-test"
                            }
                            lappend HT_list $test
                            # if {$opt(HT) == "ping"} {
                                # puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv4 15.15.$i.$j] ping-test"
                            # } else {
                                # puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv4 15.15.$i.$j] unicast-rt-test"
                            # }  
                            puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv4 15.15.$i.$j] $test"
                            
                        }
                    }  
                    
                    for {set i 5} {$i <= 8} {incr i 1} {
                        puts $file "/configure filter redirect-policy wccp_$i create"
                        puts $file "/configure filter redirect-policy wccp_$i no shutdown"
                        if {$opt(RProuter) != ""} {
                            puts $file "/configure filter redirect-policy wccp_$i router $opt(RProuter)"
                        } 
                        for {set j 2} {$j <= 9} {incr j 1} {    
                            if {$opt(RProuter) != ""} {
                                puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv6 15.15.$i.$j] create"
                                puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv6 15.15.$i.$j] no shutdown"
                                
                                set test [RP_lrandom "ping-test unicast-rt-test"]
                                lappend HT_list $test
                                # if {$opt(HT) == "ping"} {
                                    # puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv6 15.15.$i.$j] ping-test"
                                # } else {
                                    # puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv6 15.15.$i.$j] unicast-rt-test"
                                # }    
                                puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv6 15.15.$i.$j] $test"       
                            } else {
                                puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv4 15.15.$i.$j] create"
                                puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv4 15.15.$i.$j] no shutdown"
                                
                                set test "ping-test"
                                lappend HT_list $test
                                # if {$opt(HT) == "ping"} {
                                    # puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv6 15.15.$i.$j] ping-test"
                                # } else {
                                    # puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv6 15.15.$i.$j] unicast-rt-test"
                                # }    
                                puts $file "/configure filter redirect-policy wccp_$i destination [ipConvert ipv4 15.15.$i.$j] $test"       
                                
                            }
                         
                        }
                    }  
                    for {set i 1} {$i <= 8} {incr i 1} {
                         puts $file "/configure filter redirect-policy wccp_$i shutdown"
                    }
                    
                    
                    puts $file "exit all"
                    
                    
                    
            set r [execConfigFile $dut3 $file $fileName ]
            if { $r != "OK"} {
                log_msg ERROR "error during exec of config file $filename"
                set Result "FAILED"
            }
            

    gash_interpreter
     
    log_msg INFO "###################################"
    log_msg INFO " Filter IP IPv6 configuration "
    log_msg INFO "###################################"
    
            set fileName "filterIpEntries.cfg"
            set file [openConfigFile $fileName ]    
            set ipv4_ingr   32
            set ipv4_egr    16   
            set ipv6_ingr   7
            set ipv6_egr    8      

            
            if {[filter_isHsa $dut3] || [GGV 7710Support]} { 
                set ipv4_ingr   32
                set ipv4_egr    16   
                set ipv6_ingr   6
                set ipv6_egr    8      
            }
            if {[GGV 7710Support]} { 
                set ipv4_ingr   16
                set ipv4_egr    8   
                set ipv6_ingr   4
                set ipv6_egr    4      
            }
            
             
                    #filter Ip
           if {[filter_isHsa $dut3]} {
                  puts $file "exit all"
                    for {set i 1} {$i <= 1022} {incr i 1} {
                        for {set j_ing 1} {$j_ing <= $ipv4_ingr} {incr j_ing 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_ing create action forward redirect-policy wccp_1"
                        puts $file "/configure filter ip-filter $i create entry $j_ing create no match "
                        }
                    }                     

                    for {set i 1023} {$i <= 2044} {incr i 1} {
                        for {set j_eg 1} {$j_eg <= $ipv4_egr} {incr j_eg 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_eg create action forward redirect-policy wccp_1"
                        puts $file "/configure filter ip-filter $i create entry $j_eg create no match"
                        }
                    }                     
                     
                    #filter Ipv6
                    puts $file "exit all"
                    for {set i 1} {$i <= 1022} {incr i 1} {
                        for {set j_ing 1} {$j_ing <= $ipv6_ingr} {incr j_ing 1 } {
                        if {$opt(RProuter) != ""} {
                            puts $file "/configure filter ipv6-filter $i create entry $j_ing create action forward redirect-policy wccp_5"
                        } else {
                            puts $file "/configure filter ipv6-filter $i create entry $j_ing create action forward"     
                        }                            
                        puts $file "/configure filter ipv6-filter $i create entry $j_ing create no match"
                        puts $file "/configure filter ipv6-filter $i create entry $j_ing create match next-header udp dst-port range 1 2"
                        }
                    }                     

                    for {set i 1023} {$i <= 2044} {incr i 1} {
                        for {set j_eg 1} {$j_eg <= $ipv6_egr} {incr j_eg 1 } {
                        if {$opt(RProuter) != ""} {
                            puts $file "/configure filter ipv6-filter $i create entry $j_eg create action forward redirect-policy wccp_5"
                        } else {
                            puts $file "/configure filter ipv6-filter $i create entry $j_eg create action forward"
                        }
                        puts $file "/configure filter ipv6-filter $i create entry $j_eg create no match"
                        }
                    }   
           } elseif {[GGV 7710Support]} {
                       
                    puts $file "exit all"
                    for {set i 1} {$i <= 510} {incr i 1} {
                        for {set j_ing 1} {$j_ing <= $ipv4_ingr} {incr j_ing 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_ing create action forward redirect-policy wccp_1"
                        puts $file "/configure filter ip-filter $i create entry $j_ing create no match "
                        puts $file "/configure filter ip-filter $i create entry $j_ing create match protocol udp dst-port range 1 6"
                        }
                    }                     

                    for {set i 511} {$i <= 1020} {incr i 1} {
                        for {set j_eg 1} {$j_eg <= $ipv4_egr} {incr j_eg 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_eg create action forward redirect-policy wccp_1"
                        puts $file "/configure filter ip-filter $i create entry $j_eg create no match"
                        puts $file "/configure filter ip-filter $i create entry $j_eg create match protocol udp dst-port range 1 6"
                        }
                    }                     
                     
                    #filter Ipv6
                    puts $file "exit all"
                    for {set i 1} {$i <= 510} {incr i 1} {
                        for {set j_ing 1} {$j_ing <= $ipv6_ingr} {incr j_ing 1 } {
                        if {$opt(RProuter) != ""} {
                            puts $file "/configure filter ipv6-filter $i create entry $j_ing create action forward redirect-policy wccp_5"
                        } else {
                            puts $file "/configure filter ipv6-filter $i create entry $j_ing create action forward"     
                        }                            
                        puts $file "/configure filter ipv6-filter $i create entry $j_ing create no match"
                        puts $file "/configure filter ipv6-filter $i create entry $j_ing create match next-header udp dst-port range 1 36"
                        }
                    }                     

                    for {set i 511} {$i <= 1020} {incr i 1} {
                        for {set j_eg 1} {$j_eg <= $ipv6_egr} {incr j_eg 1 } {
                        if {$opt(RProuter) != ""} {
                            puts $file "/configure filter ipv6-filter $i create entry $j_eg create action forward redirect-policy wccp_5"
                        } else {
                            puts $file "/configure filter ipv6-filter $i create entry $j_eg create action forward"
                        }
                        puts $file "/configure filter ipv6-filter $i create entry $j_eg create no match"
                        puts $file "/configure filter ipv6-filter $i create entry $j_eg create match next-header udp dst-port range 1 6"
                        }
                    }   

                    puts $file "exit all"  
           
           } else {
           
                    puts $file "exit all"
                    for {set i 1} {$i <= 1022} {incr i 1} {
                        for {set j_ing 1} {$j_ing <= $ipv4_ingr} {incr j_ing 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_ing create action forward redirect-policy wccp_1"
                        puts $file "/configure filter ip-filter $i create entry $j_ing create no match "
                        puts $file "/configure filter ip-filter $i create entry $j_ing create match protocol udp dst-port range 1 2"
                        }
                    }                     

                    for {set i 1023} {$i <= 2044} {incr i 1} {
                        for {set j_eg 1} {$j_eg <= $ipv4_egr} {incr j_eg 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_eg create action forward redirect-policy wccp_1"
                        puts $file "/configure filter ip-filter $i create entry $j_eg create no match"
                        puts $file "/configure filter ip-filter $i create entry $j_eg create match protocol udp dst-port range 1 2"
                        }
                    }                     
                     
                    #filter Ipv6
                    puts $file "exit all"
                    for {set i 1} {$i <= 1022} {incr i 1} {
                        for {set j_ing 1} {$j_ing <= $ipv6_ingr} {incr j_ing 1 } {
                        if {$opt(RProuter) != ""} {
                            puts $file "/configure filter ipv6-filter $i create entry $j_ing create action forward redirect-policy wccp_5"
                        } else {
                            puts $file "/configure filter ipv6-filter $i create entry $j_ing create action forward"     
                        }                            
                        puts $file "/configure filter ipv6-filter $i create entry $j_ing create no match"
                        puts $file "/configure filter ipv6-filter $i create entry $j_ing create match next-header udp dst-port range 1 6"
                        }
                    }                     

                    for {set i 1023} {$i <= 2044} {incr i 1} {
                        for {set j_eg 1} {$j_eg <= $ipv6_egr} {incr j_eg 1 } {
                        if {$opt(RProuter) != ""} {
                            puts $file "/configure filter ipv6-filter $i create entry $j_eg create action forward redirect-policy wccp_5"
                        } else {
                            puts $file "/configure filter ipv6-filter $i create entry $j_eg create action forward"
                        }
                        puts $file "/configure filter ipv6-filter $i create entry $j_eg create no match"
                        puts $file "/configure filter ipv6-filter $i create entry $j_eg create match next-header udp dst-port range 1 2"
                        }
                    }   

                    puts $file "exit all"  
            }     

                 
            set r [execConfigFile $dut3 $file $fileName ]
            if { $r != "OK"} {
                log_msg ERROR "error during exec of config file $fileName"
                set Result "FAILED"
            }
    
    gash_interpreter
    
    log_msg INFO "############################################"
    log_msg INFO " VPRNs creation to be able to apply filters"
    log_msg INFO "############################################"
   
            #create VPRNs   
            set encap1 1
            cliCne Dut-$dut3 "/configure port $topoMap(Dut-$dut3,1/1/4) shutdown"
            cliCne Dut-$dut3 "/configure port $topoMap(Dut-$dut3,1/1/4) ethernet mode access"
            cliCne Dut-$dut3 "/configure port $topoMap(Dut-$dut3,1/1/4) ethernet encap-type dot1q"
            cliCne Dut-$dut3 "/configure port $topoMap(Dut-$dut3,1/1/4) no shutdown"
            set offset 10001
            set maxVprn 4088
            log_msg INFO "Configure $maxVprn VPRNs"

            set filename "PBR_maxVPRN"
            set lfileid [openConfigFile $filename ]
             
                        
                       for  {set i $offset} {$i <= [expr $maxVprn + $offset]} {incr i} {
                            puts $lfileid "exit all"
                            puts $lfileid "configure service vprn $i customer 1 create"
                            puts $lfileid "     description \"Default Description For VPRN ID $i\" "
                            puts $lfileid "     route-distinguisher 10.20.1.3:$i"
                            puts $lfileid "     service-name \"XYZ vprn $i\""
                            puts $lfileid "         interface vprn_[set i]_intf create"
                            puts $lfileid "             address 4.4.0.1/24"
                            puts $lfileid "             ipv6"
                            puts $lfileid "                 address 3ffe:0:0404:1::/56"
                            puts $lfileid "             exit"
                            puts $lfileid "             sap $topoMap(Dut-$dut3,1/1/4):[set encap1] create"
                            puts $lfileid "             exit"
                            puts $lfileid "          exit"
                            puts $lfileid "         no shutdown"
                            puts $lfileid "no shutdown"
                            puts $lfileid "exit all"
                            incr encap1 1
                      
                       }
                       
            set r [execConfigFile $dut3 $lfileid $filename -execTimeout 1000]
            if { $r != "OK"} {
                log_msg ERROR "error during exec of config file $filename"
                set Result "FAILED"
            }
            

            #apply filter  
            if {[GGV 7710Support]} {
                  set encap1 1
                set filename "apllyFilters"
                set lfileid [openConfigFile $filename ]        
                         for  {set i $offset} {$i <= [expr 1020 + $offset -1]} {incr i} {
                                if {$encap1 <= 510} {
                                    puts $lfileid "configure service vprn $i interface vprn_[set i]_intf sap $topoMap(Dut-$dut3,1/1/4):[set encap1] ingress filter ip $encap1"
                                    puts $lfileid "configure service vprn $i interface vprn_[set i]_intf sap $topoMap(Dut-$dut3,1/1/4):[set encap1] ingress filter ipv6 $encap1"
                                } else {
                                    puts $lfileid "configure service vprn $i interface vprn_[set i]_intf sap $topoMap(Dut-$dut3,1/1/4):[set encap1] egress filter ip $encap1"
                                    puts $lfileid "configure service vprn $i interface vprn_[set i]_intf sap $topoMap(Dut-$dut3,1/1/4):[set encap1] egress filter ipv6 $encap1" 
                                }
                         incr encap1 1       
                         }          
                set r [execConfigFile $dut3 $lfileid $filename -execTimeout 1000]
                if { $r != "OK"} {
                    log_msg ERROR "error during exec of config file $filename"
                set result "FAILED"
                }
            } else {
     
                set encap1 1
                set filename "apllyFilters"
                set lfileid [openConfigFile $filename ]        
                         for  {set i $offset} {$i <= [expr 2044 + $offset -1]} {incr i} {
                                if {$encap1 <= 1022} {
                                    puts $lfileid "configure service vprn $i interface vprn_[set i]_intf sap $topoMap(Dut-$dut3,1/1/4):[set encap1] ingress filter ip $encap1"
                                    puts $lfileid "configure service vprn $i interface vprn_[set i]_intf sap $topoMap(Dut-$dut3,1/1/4):[set encap1] ingress filter ipv6 $encap1"
                                } else {
                                    puts $lfileid "configure service vprn $i interface vprn_[set i]_intf sap $topoMap(Dut-$dut3,1/1/4):[set encap1] egress filter ip $encap1"
                                    puts $lfileid "configure service vprn $i interface vprn_[set i]_intf sap $topoMap(Dut-$dut3,1/1/4):[set encap1] egress filter ipv6 $encap1" 
                                }
                         incr encap1 1       
                         }          
                set r [execConfigFile $dut3 $lfileid $filename -execTimeout 1000]
                if { $r != "OK"} {
                    log_msg ERROR "error during exec of config file $filename"
                    set result "FAILED"
                }
            }  
     
     
    set cli [cookCliData [Dut-$dut3 sendCliCommand "/tools dump filter resources iom 1"]]
    puts "$cli"
    #at this moment - max IOM entries, max filterIds, max IP entries and max IPv6 entries are installed on IOM1    
    # =======================================================
    # Number of ACL filter entries used / available on IOM1
    # =======================================================
    # Slot                          Used           Available
    # -------------------------------------------------------
    # 1                            64386                1149
    # =======================================================

    # ===========================================================================
    # Number of ACL filters and filter entries used / available on FlexPaths
    # ===========================================================================
    # Slot FlexPath    Dir  Filters  Filters   MAC/IP   MAC/IP     IPv6     IPv6
                             # used    avail  entries  entries  entries  entries
                                               # used    avail     used    avail
    # ---------------------------------------------------------------------------
    # 1    1          Ingr     2044        3    65410      126    28618       54
                     # Egr     2044        3    32706       62    16354       30
    # ===========================================================================




            set cmdList ""   
            lappend cmdList "/configure filter ip-filter 100 create entry 1 create no match"
            lappend cmdList "/configure filter ip-filter 100 create entry 1 create match dst-ip [ipConvert ipv4 3.3.0.0]/[RP_maskConvert ipv4 16] "
            lappend cmdList "/configure filter ipv6-filter 100 create entry 1 create no match"
            lappend cmdList "/configure filter ipv6-filter 100 create entry 1 create match dst-ip [ipConvert ipv6 3.3.0.0]/[RP_maskConvert ipv6 16] "
            
            lappend cmdList "   exit all"
            foreach {cmd} $cmdList {
                log_msg INFO "Dut-$dut3 sendCliCommand $cmd"
                set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }   
            after 1000
            
            
            
            
            
            if {($itfBind == "spoke") || ($itfBind == "mesh") } {
                log_msg DEBUG "Waiting for SDP to become operational..."
                            set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                            set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                            set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
            }

            
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table | match \"No. of Routes:\""]]
            log_msg INFO "Num of ip routes in router $opt(RProuter): "
            log_msg INFO "$r"
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table ipv6 | match \"No. of Routes:\""]]
            log_msg INFO "Num of ipv6 routes in router $opt(RProuter): "
            log_msg INFO "$r"
            
            #check for route 15.15.1.2 - dest1 in wccp1
                RP_routeCheck add [ipConvert $family 15.15.1.2] "" -dest1RCtx $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.1.2]  -RC $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.1.2]  -RC $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.1.2]  -RC $opt(dest1RC)
                
          
            
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table | match \"No. of Routes:\""]]
            log_msg INFO "Num of ip routes in router $opt(RProuter): "
            log_msg INFO "$r"
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table ipv6 | match \"No. of Routes:\""]]
            log_msg INFO "Num of ipv6 routes in router $opt(RProuter): "
            log_msg INFO "$r"
          
    gash_interpreter
    
    ######### config URL
    
                    
    log_msg INFO "####################################################"
    log_msg INFO " URL redirect policy  scale configuration"
    log_msg INFO "####################################################"
     
    set filename "wccpRedirectPolicy_URL_$dut3"
    set lfileid [openConfigFile $filename ] 
        

        set count 0
        for {set i 1} {$i <= 2} {incr i 1} {
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] create"
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] no shutdown"
            
            for {set j 1} {$j <= 8} {incr j 1} {
                    puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 create"
                    puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 no shutdown"
                    
                    
                    for {set k 1} {$k <= 8} {incr k 1} {
                        incr count 1
                        if { [expr $count % 60] == 0} { set count [expr $count -59]}
                        
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} url \"http://15.15.[expr $j + ($i-1)*8].[expr $k +1]/\""
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} interval $count"
                        
                        if { ($j == $k) && ($k == "1")} { 
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 307 raise-priority 70"
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 200 raise-priority 70"
                        } else {
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 911 lower-priority 10"
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 912 lower-priority 11"
                        }
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 202 raise-priority 26"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 203 lower-priority 30"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 400 450 raise-priority 20"  
                        
                    }
            }
        }   
        for {set i 3} {$i <= 4} {incr i 1} {
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] create"
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] no shutdown"
            
            for {set j 1} {$j <= 8} {incr j 1} {
                    puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 create"
                    puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 no shutdown"
                    
                    for {set k 1} {$k <= 6} {incr k 1} {
                        incr count 1
                        if { [expr $count % 60] == 0} { set count [expr $count -59]}
                        
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} url \"http://15.15.[expr $j + ($i-1)*8].[expr $k +1]/\""
                         puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} interval $count"
                        
                        if {($j == $k) && ($k == "1")} { 
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 307 raise-priority 70"
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 200 raise-priority 70"
                        } else {
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 911 lower-priority 10"
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 912 lower-priority 11"
                        }
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 202 raise-priority 26"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] destination 80.1.[expr $j + ($i-1)*8].2 url-test urlTest_[expr $i + 12]_${j}_${k} return-code 400 450 raise-priority 20"  
                        
                    }
            }
        }  
        for {set i 1} {$i <= 4} {incr i 1} {
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 12] shutdown"
        }         
          
    puts $lfileid "exit all"
    set r [execConfigFile $dut3 $lfileid $filename ]
    if { $r != "OK"} {
        log_msg ERROR "error during exec of config file $filename"
        set Result "FAILED"
    }

    
    
    
    ################## config SNMP policies
    
      
    log_msg INFO "####################################################"
    log_msg INFO " SNMP redirect policy  scale configuration"
    log_msg INFO "####################################################"
     
    set filename "wccpRedirectPolicy_SNMP_$dut3"
    set lfileid [openConfigFile $filename ] 
        set OID_list ""  
        #(getSvcType)   
        lappend OID_list "1.3.6.1.4.1.6527.3.1.2.4.2.2.1.3."
        #   return-value "4" type integer raise-priority 75
        #(getSvcId)   
        lappend OID_list "1.3.6.1.4.1.6527.3.1.2.4.2.2.1.1."
        #  return-value "1" type unsigned raise-priority 20 
        #(getSvcMtu)
        lappend OID_list "1.3.6.1.4.1.6527.3.1.2.4.2.2.1.7."
        #  return-value "0" type integer raise-priority 15
        #(getSvcVRouterId)
        lappend OID_list "1.3.6.1.4.1.6527.3.1.2.4.2.2.1.15."
        #  return-value "5" type integer lower-priority 15
        #(getSvcRowStatus
        lappend OID_list "1.3.6.1.4.1.6527.3.1.2.4.2.2.1.2."
        #  return-value "1" type integer raise-priority 5         
        #getSvcAdminStatus
        lappend OID_list " 1.3.6.1.4.1.6527.3.1.2.4.2.2.1.8."
        #  return-value "105650" type unsigned lower-priority 17
        #getSvcName
        lappend OID_list "1.3.6.1.4.1.6527.3.1.2.4.2.2.1.29."
        # return-value "XYZ vprn 1" type string raise-priority 5
        #(getSvcDescription)
        lappend OID_list "1.3.6.1.4.1.6527.3.1.2.4.2.2.1.6."
        #  return-value "Default Description For VPRN ID 1" type string lower-priority 20   

        set count 0
        
        for {set i 1} {$i <= 2} {incr i 1} {
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] create"
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] no shutdown"
            
            for {set j 1} {$j <= 8} {incr j 1} {
                    puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 create"
                    puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 no shutdown"
                    
                    for {set k 1} {$k <= 8} {incr k 1} {
                        set oid [lindex $OID_list [expr $k -1]][expr $j + ($i-1)*8]
                        incr count 1
                        if { [expr $count % 60] == 0} { set count [expr $count -59]}
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} oid $oid community private"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} interval $count"
                        
                        
                        if { ($j == $k) && ($k == "1")} { 
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value 4 type integer raise-priority 75 "
                        } else {
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value \"vprn\" type string raise-priority 5"
                        }
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value 26515 type unsigned raise-priority 10"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value \"Service 1\" type string raise-priority 15"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value 105650 type unsigned lower-priority 17"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value 32000 type integer raise-priority 5"  
                        
                    }
            }
        }   
        for {set i 3} {$i <= 4} {incr i 1} {
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] create"
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] no shutdown"
            
            for {set j 1} {$j <= 8} {incr j 1} {
                    puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 create"
                    puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 no shutdown"
                    
                    for {set k 1} {$k <= 6} {incr k 1} {
                        set oid [lindex $OID_list [expr $k -1]][expr $j + ($i-1)*8]
                        incr count 1
                        if { [expr $count % 60] == 0} { set count [expr $count -59]}
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} oid $oid community private"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} interval $count"
                        
                        if { ($j == $k) && ($k == "1")} { 
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value 4 type integer raise-priority 75 "
                        } else {
                            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value \"vprn\" type string raise-priority 5"
                        }
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value 26515 type unsigned raise-priority 10"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value \"Service 1\" type string raise-priority 15"
                        puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] destination 172.10.[expr $j + ($i-1)*8].2 snmp-test Test_[expr $i + 8]_${j}_${k} return-value 105650 type unsigned lower-priority 17"

                    }
            }
        }       
        for {set i 1} {$i <= 4} {incr i 1} {
            puts $lfileid "/configure filter redirect-policy wccp_[expr $i + 8] shutdown"
        }
        
    puts $lfileid "exit all"
    set r [execConfigFile $dut3 $lfileid $filename ]
    if { $r != "OK"} {
        log_msg ERROR "error during exec of config file $filename"
        set Result "FAILED"
    }
    after 2000  
    
    
    ########### go ahead, bro..  start all policies
    log_msg INFO "#######################################"
    log_msg INFO " Starting policies "
    log_msg INFO "#######################################"
    gash_interpreter
    
    for {set i 1} {$i <= 16} {incr i 1} {
        log_msg INFO "Starting wccp_$i now..."
        set res [cookCliData [Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_$i no shutdown" -timeout 60]]
        if {$res != ""} { log_msg ERROR "res"; set Result FAILED}
        after [expr [random_int 10]*500]
    }   
    
    
    

    #### install filter for checking SNMP req-responses counters
    cliCne Dut-$dut3 "/configure filter ip-filter 2045 create default-action forward"
    cliCne Dut-$dut3 "/configure filter ip-filter 2045 create entry 1 create action forward"
    cliCne Dut-$dut3 "/configure filter ip-filter 2045 create entry 1 create match protocol udp port eq 161"
    
    for {set i 1} {$i <= 32 } {incr i 1} {
        cliCne Dut-$dut3 "/configure router interface CD_intf_$i egress filter ip 2045"
    }
    cliCne Dut-$dut3 "/configure router interface CD_intf_1 ingress filter ip 2045"
    cliCne Dut-$dut3 "/configure router interface CD_intf_17 ingress filter ip 2045"
    
    
     #### install filter for checking URL req-responses counters
    cliCne Dut-$dut3 "/configure filter ip-filter 2045 create default-action forward"
    cliCne Dut-$dut3 "/configure filter ip-filter 2045 create entry 2 create action forward"
    cliCne Dut-$dut3 "/configure filter ip-filter 2045 create entry 2 create match protocol tcp port eq 80"
    cliCne Dut-$dut3 "/configure router interface CEth1_intf ingress filter ip 2045"
    cliCne Dut-$dut3 "/configure router interface CEth1_intf egress filter ip 2045"
    after 3000
    
    cliCne Dut-$dut3 "/clear filter ip 2045"
    
    
    
    log_msg INFO "############################################################"
    log_msg INFO "# CLI/SNMP check of policies - all should be in operational"
    log_msg INFO "############################################################"
    
    gash_interpreter
    
    for {set i 1} {$i <= 4} {incr i 1} {
        log_msg DEBUG "\n\nChecking policy WCCP_$i"
        log_msg DEBUG "-----------------------------------"
        RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv4 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up
        RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv4 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService
        for {set j 1} {$j <= 8} {incr j 1} {
            log_msg DEBUG "destination 15.15.$i.[expr $j +1]"
            RP_showCheck wccp_$i -dest [ipConvert ipv4 15.15.$i.[expr $j +1]] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
            RP_snmpCheck wccp_$i -dest [ipConvert ipv4 15.15.$i.[expr $j +1]] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT [lindex $HT_list [expr $j + ($i-1)*8 -1]]
        }
    }
    if {$opt(RProuter) != ""} {
        for {set i 5} {$i <= 8} {incr i 1} {
            log_msg DEBUG "\n\nChecking policy WCCP_$i"
            log_msg DEBUG "-----------------------------------"
            RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv6 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up -filterType IPv6
            RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv6 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService -family IPv6 -filterType IPv6
            for {set j 1} {$j <= 8} {incr j 1} {
                log_msg DEBUG "destination [ipConvert ipv6 15.15.$i.[expr $j +1]]"
                RP_showCheck wccp_$i -dest [ipConvert ipv6 15.15.$i.[expr $j +1]] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable -filterType IPv6
                RP_snmpCheck wccp_$i -dest [ipConvert ipv6 15.15.$i.[expr $j +1]] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT [lindex $HT_list [expr $j + ($i-1)*8 -1]] -family IPv6 -filterType Ipv6
            }
        }
    } else {
      
        for {set i 5} {$i <= 8} {incr i 1} {
            log_msg DEBUG "\n\nChecking policy WCCP_$i"
            log_msg DEBUG "-----------------------------------"
            RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv4 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up
            RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv4 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService
            for {set j 1} {$j <= 8} {incr j 1} {
                log_msg DEBUG "destination 15.15.$i.[expr $j +1]"
                RP_showCheck wccp_$i -dest [ipConvert ipv4 15.15.$i.[expr $j +1]] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
                RP_snmpCheck wccp_$i -dest [ipConvert ipv4 15.15.$i.[expr $j +1]] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT [lindex $HT_list [expr $j + ($i-1)*8 -1]]
            }
        }
    
    }
    
    
    for {set i 9} {$i <= 12} {incr i 1} {
       log_msg DEBUG "\n\nChecking policy WCCP_$i"
        log_msg DEBUG "-----------------------------------"
        RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv4 172.10.[expr ($i-8) + ($i-9)*7].2] -RP_router "(Not Specified)" -RP_state Up
        RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv4 172.10.[expr ($i-8) + ($i-9)*7].2] -RP_router "(Not Specified)" -RP_state inService
        for {set j 1} {$j <= 8} {incr j 1} {
            log_msg DEBUG "destination [ipConvert ipv4 172.10.[expr ($i-8) + ($i-9)*7 + $j -1].2]"
            switch $j {
                1   {set oper_priority 175}
                9   {set oper_priority 175}
                17  {set oper_priority 175}
                25  {set oper_priority 175}
                default {set oper_priority 100}
            }
            RP_showCheck wccp_$i -dest [ipConvert ipv4 172.10.[expr $j + ($i-9)*8].2] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority $oper_priority -action_taken Enable 
            RP_snmpCheck wccp_$i -dest [ipConvert ipv4 172.10.[expr $j + ($i-9)*8].2] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority $oper_priority -action_taken enable   
        }
    }
    for {set i 13} {$i <= 16} {incr i 1} {
        log_msg DEBUG "\n\nChecking policy WCCP_$i"
        log_msg DEBUG "-----------------------------------"
        RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv4 80.1.[expr ($i-12) + ($i-13)*7].2] -RP_router "(Not Specified)" -RP_state Up
        RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv4 80.1.[expr ($i-12) + ($i-13)*7].2] -RP_router "(Not Specified)" -RP_state inService
         for {set j 1} {$j <= 8} {incr j 1} {
            log_msg DEBUG "destination [ipConvert ipv4 80.1.[expr ($i-8) + ($i-9)*7 + $j -1].2]"
            switch $j {
                1   {set oper_priority 170}
                9   {set oper_priority 170}
                17  {set oper_priority 170}
                25  {set oper_priority 170}
                default {set oper_priority 100}
            }
            RP_showCheck wccp_$i -dest [ipConvert ipv4 80.1.[expr $j + ($i-13)*8].2] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority $oper_priority -action_taken Enable 
            RP_snmpCheck wccp_$i -dest [ipConvert ipv4 80.1.[expr $j + ($i-13)*8].2] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority $oper_priority -action_taken enable   
        }

    }
    
    
    log_msg INFO "Checking SNMP entry1 and URL entry2 req-resp ratio:"
    set r [cookCliData [Dut-$dut3 sendCliCommand "show filter ip 2045"]]
    puts $r
    
    
    #checking resources
    #verify assoc of wccp1 and wccp9    
    log_msg INFO "Check of filter associations - all IP entries should be associated to wccp_1"
    set count "-1"
    set r [cookCliData [Dut-$dut3 sendCliCommand "show filter redirect-policy wccp_1 associations | match \"IP Filter\" | count " -match_max 2048000 -extendedTimeout 120 -timeout 120]]
    regexp "Count: *(.*) *lines" $r match count
    log_msg INFO "IPv4 policy Wccp_1 associated with $count filter entries"
    if {[GGV 7710Support]} { 
        if {$count != "12240"} { log_msg ERROR "Pplicy not associated with filter entries"; set Result FAILED}
    } else {  
        if {$count != "49056"} { log_msg ERROR "Pplicy not associated with filter entries"; set Result FAILED}
    }
    if {$opt(RProuter) != ""} {
        log_msg INFO "Check of filter associations - all IPv6 entries should be associated to wccp_5"
        set count "-1"
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter redirect-policy wccp_5 associations | match \"IPv6 Filter\" | count " -match_max 2048000 -extendedTimeout 120 -timeout 120]]
        regexp "Count: *(.*) *lines" $r match count
        log_msg INFO "IPv6 policy Wccp_5 associated with $count filter entries"
        if {[filter_isHsa $dut3] } {
            if {$count != "14308"} { log_msg ERROR "Policy not associated with filter entries"; set Result FAILED}
        } elseif {[GGV 7710Support]} { 
            if {$count != "4080"} { log_msg ERROR "Policy not associated with filter entries"; set Result FAILED}
        } else {
            if {$count != "15330"} { log_msg ERROR "Policy not associated with filter entries"; set Result FAILED }
        }
    }
    
    log_msg INFO "Checking filter resources:"
    set r [cookCliData [Dut-$dut3 sendCliCommand "/tools dump filter resources iom 1"]]
    puts $r
    
    
 
    
    # log_msg INFO "###################################"
    # log_msg INFO " config checks"
    # log_msg INFO "###################################"

            # log_msg INFO "############################################################"
            # log_msg INFO "tFilterRedirectPolicyTable - mibWalk"
            # log_msg INFO "############################################################"
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRedirectPolicyTable - [expr $opt(maxPol) * 6] entries expected"
            # # within  tFilterRedirectPolicyTable there are 6 accesible objects fullfilled 
            # wccpMibWalk $dut3 tFilterRedirectPolicyTable [expr $opt(maxPol) * 6]
            # after 1000
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRedirectPolicyEntry - [expr $opt(maxPol) * 6] entries expected"
            # wccpMibWalk $dut3 tFilterRedirectPolicyEntry [expr $opt(maxPol) * 6]
            # after 1000
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRedirectPolicy - $opt(maxPol) Redirect Policies configured"
            # wccpMibWalk $dut3 tFilterRedirectPolicy 0
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRPRowStatus - $opt(maxPol) Redirect Policies configured"
            # wccpMibWalk $dut3 tFilterRPRowStatus $opt(maxPol)
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRPDescription - $opt(maxPol) Redirect Policies configured"
            # wccpMibWalk $dut3 tFilterRPDescription $opt(maxPol)
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRPAdminState - $opt(maxPol) Redirect Policies configured"
            # wccpMibWalk $dut3 tFilterRPAdminState $opt(maxPol)
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRPVrtrId - $opt(maxPol) Redirect Policies configured"
            # wccpMibWalk $dut3 tFilterRPVrtrId $opt(maxPol)
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRPActiveDestAddrType - $opt(maxPol) Redirect Policies configured"
            # wccpMibWalk $dut3 tFilterRPActiveDestAddrType $opt(maxPol)
            # log_msg INFO "Verify correct number of entries with mib walk of tFilterRPActiveDestAddr -   $opt(maxPol) Redirect Policies configured"
            # wccpMibWalk $dut3 tFilterRPActiveDestAddr $opt(maxPol)
            # puts "\n"
             
            # log_msg INFO "############################################################"
            # log_msg INFO "tFilterRedirectPolicyTable - getNext"
            # log_msg INFO "############################################################"
            # log_msg INFO "\n\nVerify correct number of entries with getnext"
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRedirectPolicyTable - 0"
            # RP_wccpMibGetNext $dut3 tFilterRedirectPolicyTable 0 -nextTable tFilterRPRowStatus
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRedirectPolicyEntry - 0"
            # RP_wccpMibGetNext $dut3 tFilterRedirectPolicyEntry 0 -nextTable tFilterRPRowStatus
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRedirectPolicy  - 0"
            # RP_wccpMibGetNext $dut3 tFilterRedirectPolicy 0 -nextTable tFilterRPRowStatus
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPRowStatus - $opt(maxPol) "
            # RP_wccpMibGetNext $dut3 tFilterRPRowStatus $opt(maxPol) -nextTable tFilterRPDescription 
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPDescription - $opt(maxPol)"
            # RP_wccpMibGetNext $dut3 tFilterRPDescription $opt(maxPol) -nextTable tFilterRPAdminState 
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPAdminState - $opt(maxPol)"
            # RP_wccpMibGetNext $dut3 tFilterRPAdminState $opt(maxPol) -nextTable tFilterRPVrtrId
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPVrtrId - $opt(maxPol)"
            # RP_wccpMibGetNext $dut3 tFilterRPVrtrId $opt(maxPol) -nextTable tFilterRPActiveDestAddrType
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPActiveDestAddrType -$opt(maxPol) "
            # RP_wccpMibGetNext $dut3 tFilterRPActiveDestAddrType $opt(maxPol) -nextTable tFilterRPActiveDestAddr
            # log_msg INFO "Verify correct number of entries with mib getNext of tFilterRPActiveDestAddr - $opt(maxPol)"
            # RP_wccpMibGetNext $dut3 tFilterRPActiveDestAddr $opt(maxPol) 
            # puts "\n" 
            # puts "\n" 
    
    
         
            
                    
             
    
    # log_msg INFO "############################################################" 
    # log_msg INFO "saving Config + rollback save"
    # log_msg INFO "############################################################" 
            # set fileName "$config_dir/Dut-$dut3-setupScale.cfg"
            # log_msg INFO "saving config into $fileName"
            # Dut-$dut3 sendCliCommand "exit all"
            # set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 120  -extendedMatchString "#" ]]
            # set SC [ string first "Completed" $CLI ]
            # if { $SC < 1 } {
                # log_msg DEBUG "$CLI"
                # log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
                # set Result FAILED   
            # } else  {
                # log_msg INFO "admin save of active config Successful"
            # }
            
            # set fileName2 "$config_dir/Dut-$dut3-setupScale_detail.cfg"
            # log_msg INFO "saving detail config into $fileName2"
            # Dut-$dut3 sendCliCommand "exit all"
            # set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName2" -extendedTimeout 180  -extendedMatchString "#" ]]
            # set SC [ string first "Completed" $CLI ]
            # if { $SC < 1 } {
                # log_msg DEBUG "$CLI"
                # log_msg ERROR "Save of $fileName2 FAILED - Was $SC And Should Be >= 1"
                # set Result FAILED   
            # } else  {
                # log_msg INFO "admin save detail of active config Successful"
            # }
    
    
    # log_msg INFO "rollback save"
    # RP_rollbackSave $dut3 1
    
    
    
    log_msg INFO "###################################"
    log_msg INFO " traffic checks"
    log_msg INFO "###################################"
    
            set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2 -scale2 true -filterIngr 100 -filterEgr 2047 -filterIxiaEgr 2046

            
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2 -scale2 true -filterIngr 100 -filterEgr 2047 -filterIxiaEgr 2046 -Tx_time 20000
            after 1000 

     gash_interpreter
     
     if { $opt(Tcam_full) == "false" } {
       log_msg INFO "###################################"
    log_msg INFO " Filter IP IPv6 configuration "
    log_msg INFO "###################################"
    
            set fileName "filterIpEntries.cfg"
            set file [openConfigFile $fileName ]    
         
         
         
         
         
           if {[GGV 7710Support]} {
                 #filter Ip
                    puts $file "exit all"
                    for {set i 1} {$i <= 510} {incr i 1} {
                        for {set j_ing 1} {$j_ing <= $ipv4_ingr} {incr j_ing 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_ing create action forward"
                        }
                    }                     
                    puts $file "exit all"
                          
                    puts $file "exit all"
                    for {set i 511} {$i <= 1020} {incr i 1} {
                        for {set j_eg 1} {$j_eg <= $ipv4_egr} {incr j_eg 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_eg create action forward"
                        }
                    }                     
                    
                        #filter Ipv6
                        puts $file "exit all"
                        for {set i 1} {$i <= 510} {incr i 1} {
                            for {set j_ing 1} {$j_ing <= $ipv6_ingr} {incr j_ing 1 } {
                                puts $file "/configure filter ipv6-filter $i create entry $j_ing create action forward"
                            }
                        }                     
                        puts $file "exit all"
                              
                        puts $file "exit all"
                        for {set i 511} {$i <= 1020} {incr i 1} {
                            for {set j_eg 1} {$j_eg <= $ipv6_egr} {incr j_eg 1 } {
                                puts $file "/configure filter ipv6-filter $i create entry $j_eg create action forward"
                            }
                        }   

            } else {
            
                    
                    #filter Ip
                    puts $file "exit all"
                    for {set i 1} {$i <= 1022} {incr i 1} {
                        for {set j_ing 1} {$j_ing <= $ipv4_ingr} {incr j_ing 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_ing create action forward"
                        }
                    }                     
                    puts $file "exit all"
                          
                    puts $file "exit all"
                    for {set i 1023} {$i <= 2044} {incr i 1} {
                        for {set j_eg 1} {$j_eg <= $ipv4_egr} {incr j_eg 1 } {
                        puts $file "/configure filter ip-filter $i create entry $j_eg create action forward"
                        }
                    }                     
                    
                        #filter Ipv6
                        puts $file "exit all"
                        for {set i 1} {$i <= 1022} {incr i 1} {
                            for {set j_ing 1} {$j_ing <= $ipv6_ingr} {incr j_ing 1 } {
                                puts $file "/configure filter ipv6-filter $i create entry $j_ing create action forward"
                            }
                        }                     
                        puts $file "exit all"
                              
                        puts $file "exit all"
                        for {set i 1023} {$i <= 2044} {incr i 1} {
                            for {set j_eg 1} {$j_eg <= $ipv6_egr} {incr j_eg 1 } {
                                puts $file "/configure filter ipv6-filter $i create entry $j_eg create action forward"
                            }
                        }   
                      
            }
                    puts $file "exit all"  
                    
            set r [execConfigFile $dut3 $file $fileName ]
            if { $r != "OK"} {
                log_msg ERROR "error during exec of config file $fileName"
                set Result "FAILED"
            }
    
            set cmdList ""   
            lappend cmdList "/configure filter ip-filter 100 create entry 1 create no match"
            lappend cmdList "/configure filter ip-filter 100 create entry 1 action forward redirect-policy wccp_1"
            lappend cmdList "/configure filter ip-filter 100 create entry 1 create match dst-ip [ipConvert ipv4 3.3.0.0]/[RP_maskConvert ipv4 16] "
            lappend cmdList "/configure filter ipv6-filter 100 create entry 1 create no match"
            lappend cmdList "/configure filter ipv6-filter 100 create entry 1 create match dst-ip [ipConvert ipv6 3.3.0.0]/[RP_maskConvert ipv6 16] "
            
            lappend cmdList "   exit all"
            foreach {cmd} $cmdList {
                log_msg INFO "Dut-$dut3 sendCliCommand $cmd"
                set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }   
            after 1000
     
     
     }
     

    
           gash_interpreter
     
            log_msg INFO "##################################"
            log_msg INFO " shutdown policy wccp_1"
            log_msg INFO "##################################"
            
            gash_interpreter 
            Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_1"
            Dut-$dut3 sendCliCommand "shutdown" -timeout 60
            after 1000
            
            for {set i 1} {$i <= 5} {incr i 1} {
                set r [cookCliData [Dut-$dut3 sendCliCommand "info" -timeout 5]]
                puts $r
                if { [regexp "WARNING" $r] == "1"} { log_msg ERROR "CLI timeout after policy shutdown"; set Result "FAILED"}  
                after 2000
            }
            
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp_1 -method [RP_lrandom "CLI SNMP"] 
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId webserver -scale2 true -filterIngr 100 -filterEgr 2047 -filterIxiaEgr 2046 -Tx_time 10000
     
            log_msg INFO "##################################"
            log_msg INFO "no shutdown policy wccp_1"
            log_msg INFO "##################################"         
            
            Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_1"
            Dut-$dut3 sendCliCommand "no shutdown" -timeout 60
            after 1000
            
            for {set i 1} {$i <= 5} {incr i 1} {
                set r [cookCliData [Dut-$dut3 sendCliCommand "info" -timeout 5]]
                puts $r
                if { [regexp "WARNING" $r] == "1"} { log_msg ERROR "CLI timeout after policy no shutdown"; set Result "FAILED"}  
                after 2000
            }
            
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 15.15.1.2]]] wccp_1 -method [RP_lrandom "CLI SNMP"]
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2 -scale2 true -filterIngr 100 -filterEgr 2047 -filterIxiaEgr 2046 -Tx_time 10000
            
            
                    
            log_msg INFO "#######################################################################"
            log_msg INFO "Delete routes to RP destinations - shutdown dest interface on Dut-$dut5"
            log_msg INFO "#######################################################################"
    
            cliCne Dut-$dut5 "/configure router interface EC_intf shutdown"
            after 5000

            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table | match \"No. of Routes:\""]]
            log_msg INFO "Num of IP routes in router $opt(RProuter): "
            log_msg INFO "$r"
            
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table ipv6 | match \"No. of Routes:\""]]
            log_msg INFO "Num of IPv6 routes in router $opt(RProuter): "
            log_msg INFO "$r"

            for {set i 1} {$i <=4} {incr i 1} {
                RP_routeCheck del [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) -method negative
            }
            after 5000
            
            for {set i 1} {$i <= 2} {incr i 1} {
                set r [cookCliData [Dut-$dut3 sendCliCommand "show filter redirect-policy wccp_1" -timeout 5]]
                puts $r
                if { [regexp "WARNING" $r] == "1"} { log_msg ERROR "CLI timeout after policy shutdown"; set Result "FAILED"}  
                after 2000
            }
            
            for {set i 5} {$i <=8} {incr i 1} {
                RP_routeCheck del [ipConvert ipv6 15.15.$i.2] "" -dest1RCtx $opt(dest1RC) -filterType IPv6
                RP_DestReachablityCheck -addr [ipConvert ipv6 15.15.$i.2]  -RC $opt(dest1RC) -method negative
            }
            
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp_1 -method [RP_lrandom "CLI SNMP"] -wait_timer 240
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId webserver -scale2 true -filterIngr 100 -filterEgr 2047 -filterIxiaEgr 2046 -Tx_time 10000
            after 1000 
    
            log_msg INFO "#######################################################################"
            log_msg INFO "Add routes to RP destinations - no shutdown dest interface on Dut-$dut5"
            log_msg INFO "#######################################################################"
    
            cliCne Dut-$dut5 "/configure router interface EC_intf no shutdown"
            after 10000

            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table | match \"No. of Routes:\""]]
            log_msg INFO "Num of IP routes in router $opt(RProuter): "
            log_msg INFO "$r"
            
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table ipv6 | match \"No. of Routes:\""]]
            log_msg INFO "Num of IPv6 routes in router $opt(RProuter): "
            log_msg INFO "$r"

            for {set i 1} {$i <=4} {incr i 1} {
                RP_routeCheck add [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)
            }
            after 5000
            
            for {set i 1} {$i <= 2} {incr i 1} {
                set r [cookCliData [Dut-$dut3 sendCliCommand "show filter redirect-policy wccp_1" -timeout 5]]
                puts $r
                if { [regexp "WARNING" $r] == "1"} { log_msg ERROR "CLI timeout after policy no shutdown"; set Result "FAILED"}  
                after 2000
            }
            
            
            for {set i 5} {$i <=8} {incr i 1} {
                RP_routeCheck add [ipConvert ipv6 15.15.$i.2] "" -dest1RCtx $opt(dest1RC) -filterType IPv6
                RP_DestReachablityCheck -addr [ipConvert ipv6 15.15.$i.2]  -RC $opt(dest1RC)
            }
                  
            
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 15.15.1.2]]] wccp_1 -method [RP_lrandom "CLI SNMP"] -wait_timer 240
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2 -scale2 true -filterIngr 100 -filterEgr 2047 -filterIxiaEgr 2046 -Tx_time 10000
            after 1000  
    
  
    
    if { $opt(mode) == "extensive" } {
        #HA tests
        log_msg INFO "###################################"
        log_msg INFO " High Availability checks"
        log_msg INFO "###################################"
     set haTestList ""
        if {[filter_isHsa $dut3]} { lappend haTestList "HSA Active IOM Switchover" }
        if {[filter_isHsa $dut3]} { lappend haTestList "HSA Active IOM Switchover" }
        lappend haTestList "HA Switch-Over"
        lappend haTestList "HA Switch-Over"
        lappend haTestList "clear IOM"
        lappend haTestList "port shutdown"
        lappend haTestList "clear MDA"
        set IomFiltersBefore [RP_filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
        
        foreach {haTest} $haTestList {
            log_msg INFO "#######################################"
            log_msg INFO " $haTest  "
            log_msg INFO "#######################################"
           
            
            if {$haTest == "HA Switch-Over"} {
                Dut-$dut3 activitySwitch
            } elseif {$haTest == "HSA Active IOM Switchover"} {
                set r [Dut-$dut3 hsa_switchAndVerify_ActiveCpmMicrocodeSlot]
                if {$r != "OK"} {
                    log_msg ERROR "$haTest test failed"
                }
            } elseif {$haTest == "clear IOM"} {
                foreach {lagPort} $port_3_2 {
                    Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "clear card [lindex [split $lagPort "/"] 0]"
                }
                Dut-$dut3 CnWCardStatus ; after 30000
                set rc [resMgr_verify_resources OK -dut Dut-$dut3 -maxTries 30]
                if {$rc != "OK"} {
                    log_msg ERROR "Resource mismatch after restart of IOM" ; set Result "FAILED"
                }
            } elseif {$haTest == "port shutdown"} {
                foreach {lagPort} $port_3_2 {
                    Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "configure port $lagPort shutdown" ; after 5000
                    if {[Dut-$dut3 getTmnxPortOperStatus 1 [Dut-$dut3 convert_port_ifIndex port $lagPort]] != "outOfService"} {
                        log_msg ERROR "port $lagPort still not outOfService 5 seconds after shutdown"
                    }
                    Dut-$dut3 sendCliCommand "exit all" ; Dut-$dut3 sendCliCommand "configure port $lagPort no shutdown" ; after 15000
                    if {[Dut-$dut3 getTmnxPortOperStatus 1 [Dut-$dut3 convert_port_ifIndex port $lagPort]] != "inService"} {
                        log_msg ERROR "port $lagPort still not inService 15 seconds after no shutdown"
                    }
                }
            } elseif {$haTest == "clear MDA"} {
                foreach {lagPort} $port_3_2 {
                    Dut-$dut3 sendCliCommand "exit all"
                    Dut-$dut3 sendCliCommand "clear mda [lindex [split $lagPort "/"] 0]/1" ; Dut-$dut3 sendCliCommand "clear mda [lindex [split $lagPort "/"] 0]/2"
                }
                Dut-$dut3 CnWMdaStatus -Time 300
            }

            set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
            if { ($buildVersion == 0 || $buildVersion >= 11) && [getGlobalVar 7710Support] == "false" } {
                # verify if all filters were downloaded to IOM 2
                set IomFiltersAfter [RP_filterScaleGetDownloadedFilters $dut3 [lindex [split $port_3_2 "/"] 0] $filterType]
                if { $IomFiltersAfter != $IomFiltersBefore } {
                    log_msg ERROR "Not all filters were downloaded to IOM after boot" 
                    log_msg ERROR "downloaded filters before restart: $IomFiltersBefore"
                    log_msg ERROR "downloaded filters after restart: $IomFiltersAfter"
                    set Result "FAILED"
                }
            }
            if {($itfBind == "spoke") || ($itfBind == "mesh") } {
                log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }     
            }
            after 10000
        
            for {set i 1} {$i <=$opt(maxPol)} {incr i 1} {
                RP_routeCheck add [ipConvert $family 15.15.$i.2] "" -dest1RCtx $opt(dest1RC)
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) 
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC) 
                RP_DestReachablityCheck -addr [ipConvert $family 15.15.$i.2]  -RC $opt(dest1RC)
            }
            
            set r [cookCliData [Dut-$dut3 sendCliCommand "show router $opt(RProuter) route-table [string tolower [getVar2 $filterType]] | match \"No. of Routes:\""]]
            log_msg INFO "Num of $filterType routes in router $opt(RProuter): "
            log_msg INFO "$r"
            
            set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
            RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2

        }
    
    }

    #need to wait due time snmp url intervals
    after 100000
    cliCne Dut-$dut3 "/clear filter ip 2045"

    
    
    log_msg INFO "############################################################"
    log_msg INFO "# CLI/SNMP check of policies - all should be in operational"
    log_msg INFO "############################################################"
    for {set i 1} {$i <= 4} {incr i 1} {
        log_msg DEBUG "\n\nChecking policy WCCP_$i"
        log_msg DEBUG "-----------------------------------"
        RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv4 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up
        RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv4 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService
        for {set j 1} {$j <= 8} {incr j 1} {
            log_msg DEBUG "destination 15.15.$i.[expr $j +1]"
            RP_showCheck wccp_$i -dest [ipConvert ipv4 15.15.$i.[expr $j +1]] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
            RP_snmpCheck wccp_$i -dest [ipConvert ipv4 15.15.$i.[expr $j +1]] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT [lindex $HT_list [expr $j + ($i-1)*8 -1]]
        }
    }
    if {$opt(RProuter) != ""} {
        for {set i 5} {$i <= 8} {incr i 1} {
            log_msg DEBUG "\n\nChecking policy WCCP_$i"
            log_msg DEBUG "-----------------------------------"
            RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv6 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up -filterType IPv6
            RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv6 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService -family IPv6 -filterType IPv6
            for {set j 1} {$j <= 8} {incr j 1} {
                log_msg DEBUG "destination [ipConvert ipv6 15.15.$i.[expr $j +1]]"
                RP_showCheck wccp_$i -dest [ipConvert ipv6 15.15.$i.[expr $j +1]] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable -filterType IPv6
                RP_snmpCheck wccp_$i -dest [ipConvert ipv6 15.15.$i.[expr $j +1]] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT [lindex $HT_list [expr $j + ($i-1)*8 -1]] -family IPv6 -filterType Ipv6
            }
        }
    } else {
      
        for {set i 5} {$i <= 8} {incr i 1} {
            log_msg DEBUG "\n\nChecking policy WCCP_$i"
            log_msg DEBUG "-----------------------------------"
            RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv4 15.15.$i.2] -RP_router $opt(RProuter) -RP_state Up
            RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv4 15.15.$i.2] -RP_router $opt(RProuter) -RP_state inService
            for {set j 1} {$j <= 8} {incr j 1} {
                log_msg DEBUG "destination 15.15.$i.[expr $j +1]"
                RP_showCheck wccp_$i -dest [ipConvert ipv4 15.15.$i.[expr $j +1]] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
                RP_snmpCheck wccp_$i -dest [ipConvert ipv4 15.15.$i.[expr $j +1]] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT [lindex $HT_list [expr $j + ($i-1)*8 -1]]
            }
        }

    }
    
    if { $opt(Tcam_full) == "false" } {
        for {set i 9} {$i <= 12} {incr i 1} {
           log_msg DEBUG "\n\nChecking policy WCCP_$i"
            log_msg DEBUG "-----------------------------------"
            RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv4 172.10.[expr ($i-8) + ($i-9)*7].2] -RP_router "(Not Specified)" -RP_state Up
            RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv4 172.10.[expr ($i-8) + ($i-9)*7].2] -RP_router "(Not Specified)" -RP_state inService
            for {set j 1} {$j <= 8} {incr j 1} {
                log_msg DEBUG "destination [ipConvert ipv4 172.10.[expr ($i-8) + ($i-9)*7].2]"
                switch $j {
                    1   {set oper_priority 175}
                    9   {set oper_priority 175}
                    17  {set oper_priority 175}
                    25  {set oper_priority 175}
                    default {set oper_priority 100}
                }
                RP_showCheck wccp_$i -dest [ipConvert ipv4 172.10.[expr $j + ($i-9)*8].2] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority $oper_priority -action_taken Enable 
                RP_snmpCheck wccp_$i -dest [ipConvert ipv4 172.10.[expr $j + ($i-9)*8].2] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority $oper_priority -action_taken enable   
            }
        }
        for {set i 13} {$i <= 16} {incr i 1} {
            log_msg DEBUG "\n\nChecking policy WCCP_$i"
            log_msg DEBUG "-----------------------------------"
            RP_showCheck wccp_$i -RP_activeDest [ipConvert ipv4 80.1.[expr ($i-12) + ($i-13)*7].2] -RP_router "(Not Specified)" -RP_state Up
            RP_snmpCheck wccp_$i -RP_activeDest [ipConvert ipv4 80.1.[expr ($i-12) + ($i-13)*7].2] -RP_router "(Not Specified)" -RP_state inService
             for {set j 1} {$j <= 8} {incr j 1} {
                log_msg DEBUG "destination [ipConvert ipv4 172.10.[expr ($i-8) + ($i-9)*7].2]"
                switch $j {
                    1   {set oper_priority 170}
                    9   {set oper_priority 170}
                    17  {set oper_priority 170}
                    25  {set oper_priority 170}
                    default {set oper_priority 100}
                }
                RP_showCheck wccp_$i -dest [ipConvert ipv4 80.1.[expr $j + ($i-13)*8].2] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority $oper_priority -action_taken Enable 
                RP_snmpCheck wccp_$i -dest [ipConvert ipv4 80.1.[expr $j + ($i-13)*8].2] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority $oper_priority -action_taken enable   
            }

        }
    }
    
    log_msg INFO "Checking SNMP entry1 and URL entry2 req-resp ratio:"
    set r [cookCliData [Dut-$dut3 sendCliCommand "show filter ip 2045"]]
    puts $r
    
    
    #checking resources
    if { $opt(Tcam_full) == "true" } {
        #verify assoc of wccp1 and wccp9    
        log_msg INFO "Check of filter associations - all IP entries should be associated to wccp_1"
        set count "-1"
        set r [cookCliData [Dut-$dut3 sendCliCommand "show filter redirect-policy wccp_1 associations | match \"IP Filter\" | count " -match_max 2048000 -extendedTimeout 120 -timeout 120]]
        regexp "Count: *(.*) *lines" $r match count
        log_msg INFO "IPv4 policy Wccp_1 associated with $count filter entries"
        if {[GGV 7710Support]} { 
            if {$count != "12240"} { log_msg ERROR "Pplicy not associated with filter entries"; set Result FAILED}
        } else {  
            if {$count != "49056"} { log_msg ERROR "Pplicy not associated with filter entries"; set Result FAILED}
        }
        if {$opt(RProuter) != ""} {
            log_msg INFO "Check of filter associations - all IPv6 entries should be associated to wccp_5"
            set count "-1"
            set r [cookCliData [Dut-$dut3 sendCliCommand "show filter redirect-policy wccp_5 associations | match \"IPv6 Filter\" | count " -match_max 2048000 -extendedTimeout 120 -timeout 120]]
            regexp "Count: *(.*) *lines" $r match count
            log_msg INFO "IPv6 policy Wccp_5 associated with $count filter entries"
            if {[filter_isHsa $dut3] } {
                if {$count != "14308"} { log_msg ERROR "Policy not associated with filter entries"; set Result FAILED}
            } elseif {[GGV 7710Support]} { 
                if {$count != "4080"} { log_msg ERROR "Policy not associated with filter entries"; set Result FAILED}
            } else {
                if {$count != "15330"} { log_msg ERROR "Policy not associated with filter entries"; set Result FAILED }
            }
        }
    }
    log_msg INFO "Checking filter resources:"
    set r [cookCliData [Dut-$dut3 sendCliCommand "/tools dump filter resources iom 1"]]
    puts $r
    



   
# delete VPRNs   
# # set encap1 1
# # cliCne Dut-$dut3 "/configure port $topoMap(Dut-$dut3,1/1/4) shutdown"
# # cliCne Dut-$dut3 "/configure port $topoMap(Dut-$dut3,1/1/4) ethernet mode access"
# # cliCne Dut-$dut3 "/configure port $topoMap(Dut-$dut3,1/1/4) ethernet encap-type dot1q"
# # cliCne Dut-$dut3 "/configure port $topoMap(Dut-$dut3,1/1/4) no shutdown"
# # set offset 10001
# # set maxVprn 2044
# # log_msg INFO "Configure $maxVprn VPRNs"

# # set filename "PBR_maxVPRN"
# # set lfileid [openConfigFile $filename ]
 
            
           # # for  {set i $offset} {$i <= [expr $maxVprn + $offset]} {incr i} {
                # # puts $lfileid "exit all"
                # # puts $lfileid "configure service vprn $i"
                # # puts $lfileid "         interface vprn_[set i]_intf "
                # # puts $lfileid "             sap 1/1/4:[set encap1] shutdown"
                # # puts $lfileid "             no sap 1/1/4:[set encap1]"              
                # # puts $lfileid "         shutdown"
                # # puts $lfileid "         exit"
                # # puts $lfileid "         no interface vprn_[set i]_intf"                
                # # puts $lfileid "shutdown"
                # # puts $lfileid "exit all"
                # # puts $lfileid "configure service no vprn $i"                
                # # incr encap1 1
          
           # # }
           
# # set r [execConfigFile C $lfileid $filename -execTimeout 1000]
# # if { $r != "OK"} {
    # # log_msg ERROR "error during exec of config file $filename"
    # # set result "FAILED"
# # }    
            
    
    
   
        
    # log_msg INFO "##########################"
    # log_msg INFO "# Admin tech-support file generation"
    # log_msg INFO "##########################"
       
    # RP_clearAllFilter $dut3 -filterType $filterType
    # filterTCAM_ixStartTraffic $trafficStreamId -direction ingress
    
    
                # set fileName "$config_dir/Dut-$dut3-adminTech"
                # log_msg INFO "saving admin-tech file into $fileName"
                # set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin tech-support $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
                # if { [regexp "Done with data collection" $CLI ] == "0" } {
                    # log_msg WARNING "admin tech-support file generation failed"    
                    # set Result FAILED   
                # } else  {
                    # log_msg INFO "admin tech-support file generation Succesful"
                # }
    
    
    # filterTCAM_ixStopTraffic $trafficStreamId -direction ingress
    # RP_verifyTrafficFlowCheckScale $streamBit $trafficStreamId dest2 -traffic false
    
    
    log_msg INFO "##########################"
    log_msg INFO "# Deleting all"
    log_msg INFO "##########################"
    
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }
    
 
    #clearing linux PC ethernets
    if { [RP_linuxRoutes -scale true -deconfig true -eth1_config true] != "OK" } {set Result "FAILED"}  
    
  
        log_msg INFO "Deleting configuration"
        RP_rollbackCleanup $dut3
        saveOrRestore delete
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
 

}


proc filterWccpEnhancedURPF { args } {
    global testdir logdir ixia_port testResultFlag
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         [RP_lrandom "ping unicast"]
    set opt(filterType) "IP"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) ""
    set opt(itfBind) ""
    set opt(case)    "positive"
    set opt(dest1RC)    ""
    set opt(dest2RC)    ""
    set opt(dest3RC)    ""
    set opt(dest4RC)    ""
    set opt(quick)      "true"
    set opt(ecmp)       [RP_lrandom "true false"]
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
   

    ## randomly choose initial setupType of duts A,B,C
    set itfBind "subsap"
    while { ($itfBind == "subsap") ||  ([regexp "exSpoke" $itfBind]) || ([regexp "autobind" $itfBind]) } {
        if {$opt(setupType) == ""} {
            if { $opt(svcType) == "vprn" } {
                log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
                if {$opt(itfBind) == "serviceAware"} {
                    set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
                } else {
                    set setupType [RP_VrfTo_getSetupType $opt(filterType)]
                }
            } elseif { $opt(svcType) == "L2Service" } {
                log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
                set setupType [RP_L2Service_getSetupType $opt(filterType)]
            } elseif { $opt(svcType) == "rvpls" } {
                log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
                set setupType [RP_RVPLS_getSetupType $opt(filterType)]
            } else {
                log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
                set setupType [RP_GrtTo_getSetupType $opt(filterType)]
            }
        } else {
            set setupType $opt(setupType)
            log_msg NOTICE "User defined setupType: $setupType"
            if {[regexp {rvpls} $setupType]} { 
                set opt(svcType) "rvpls"
            } elseif {[regexp {vprn} $setupType]} { 
                set opt(svcType) "vprn" 
            } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
                set opt(svcType) "L2Service"
            } else { 
                set opt(svcType) "grt"
            }        
        }
        if {[filterTCAM_getGlobals $setupType] != "OK"} {
            log_msg ERROR "Unable to find correct parameters for $setupType"
            set Result FAILED
        }
    }
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }    
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
 
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
 
 

       
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr $IngrEgr  ] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    #egress filter
    if {$IngrEgr == "true"} {
        set r [filterTCAM_applyFilter $setupType Egress 100]
    }
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }
     
     Dut-$dut3 sendCliCommand "/configure filter [getVar4 $filterType]-filter 100 entry 1 log 101 "
     # if { [RP_applyFilter_Cli $dut6 ingress 61 -RC GRT -intf FD_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut6 ingress 62 -RC VRF -intf FE_intf -sap $topoMap(Dut-$dut6,1/1/2)] != "OK" } {set Result "FAILED"}   
     # if { [RP_applyFilter_Cli $dut5 ingress 52 -RC GRT -intf EC_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut5 ingress 502 -RC GRT -intf EF_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut4 ingress 41 -RC GRT -intf DC_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut4 ingress 401 -RC GRT -intf DF_intf ] != "OK" } {set Result "FAILED"}
    #End of setup, filter config
    
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true" } {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"}    {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"}   {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"}   {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"}   {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC) 
    
    ##########################################################################################################################################
    #### 1st part - Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP
    ########################################################################################################################################## 
    
    set description [boxifyText "Step 1 - Verify traffic without RP, configure RP, verify traffic with active RP destinations w/wo HTs, deconfigure RP"]
    log_msg INFO "\n$description \n"
    
    log_msg INFO "verification of stream"
    log_msg INFO "--------------------------------------------"

    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]
        set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
        if {[RP_verifyTrafficFlow $streamBit 1 webserver] != "OK"} {set Result "FAILED"}
    
    set stats2 [RP_CollectStats 2]
    if { [RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType)] != "OK" } {
        RP_PrintStats $stats1 $stats2
    }
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    set stats1 [RP_CollectStats 1]

 
    #Create destinations
    gash_interpreter
     
    #if CLI if SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router Base"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp router $opt(RProuter)"        
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    } elseif {$method == "SNMP"} { 
         #set r [Dut-$dut3 setTFilterRPRowStatus wccp createAndGo]
          #   set testResultFlag [RP_CompareOutputString "noError" $r] 
        set r [Dut-$dut3 setTFilterRPVrtrId wccp 1 ]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFilterRPAdminState wccp 2]
            set testResultFlag [RP_CompareOutputString "noError" $r]                   
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]            
        if {$opt(HT)== "ping"} {
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
        } else {
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]                
        }
        if {$opt(RProuter) != "Base"} { 
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
        }
        set testResultFlag [RP_CompareOutputString "noError" $r]
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest1Addr] inService
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] inService
        Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService
        
    }    
        


     #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    if {[getGlobalVar physTopology] == "scaleBed"} { set ing_port 5; set eg_port 1 } else { set ing_port 1; set eg_port 3 }
        set portList [list $ixport1 ]
        scan $ixport1 "%d %d %d" chassis card port
        port get $chassis $card $port
        stream get $chassis $card $port 1
        set da_mac [join [split [stream cget -da] " "] ":"]
        set sa_mac [join [split [stream cget -sa] " "] ":"]
        if {[getGlobalVar hardwareOnly] == "true"} { set traffic_rate 90000; set traffic_burst 9000 } else { set traffic_rate 100 ; set traffic_burst 100 }
        
        if {$filterType == "IP"} {
            set trafficStreamId_loose 9
            handlePacket -port $ing_port -dot1q 1 -dst [ipConvert $family 3.3.0.2] -numDest 1 -src [ipConvert $family 3.3.9.9] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId_loose -framesize 100 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        } else {
            set trafficStreamId_loose 7
            handlePacket -port $ing_port -dot1q 1 -dst 3FFE::303:2:0:0:0:0 -numDest 1 -src 3FFE::303:909:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId_loose -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        }
        
        after 1000
        stream get $chassis $card $port $trafficStreamId_loose
        stream config  -enable  false
        stream set $chassis $card $port $trafficStreamId_loose
        stream write $chassis $card $port $trafficStreamId_loose

      
       if {$filterType == "IP"} {
            set trafficStreamId_spoofed 10
            handlePacket -port $ing_port -dot1q 1 -dst [ipConvert $family 3.3.0.2] -numDest 1 -src [ipConvert $family 9.2.0.1] -numSource 1 -numSourceMask [RP_maskConvert $family 24] -damac $da_mac -samac $sa_mac -stream $trafficStreamId_spoofed  -framesize 100 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        } else {
            set trafficStreamId_spoofed 8
            handlePacket -port $ing_port -dot1q 1 -dst 3FFE::303:2:0:0:0:0 -numDest 1 -src 3FFE::902:1:0:0:0:0 -numSource 1 -numSourceMask 96 -damac $da_mac -samac $sa_mac -stream $trafficStreamId_spoofed -framesize 1200 -rawProtocol 17 -packetsPerBurst $traffic_burst -rate $traffic_rate -loop 1 -action createdownloadstart
        }
        
        after 1000
        stream get $chassis $card $port $trafficStreamId_spoofed
        stream config  -enable  false
        stream set $chassis $card $port $trafficStreamId_spoofed
        stream write $chassis $card $port $trafficStreamId_spoofed
      
  
    RP_set_dut
    
    
    set ipType          [string tolower [getVar2 $filterType]]
    if {$filterType == "IPv6"} { set delay 55000} else {set delay 55000}
    
    #find interface
    gash_interpreter
   
    if {$itfBind == "subsap"} {
        set r1 [cookCliData [Dut-C sendCliCommand "show service id 1 all | match \"If Name\" | match grp"]]
        set intf1 ""
        regexp -line "If Name *: *(.*)" $r1 match intf1
        
        set r2 [cookCliData [Dut-C sendCliCommand "show service id 1 all | match \"If Name\" | match vprn"]]
        set intf2 ""
        regexp -line "If Name *: *(.*)\n" $r2 match intf2

    } else {
        set r [cookCliData [Dut-C sendCliCommand "show service id 1 all | match \"If Name\""]]
        set intf ""
        regexp -line "If Name *: *(.*)\n" $r match intf
    }
    
    if {$svcType == "router"} {
        set intf "link2"
        set nextHop "10.10.2.2"
    } else {
        set nextHop "1.1.1.2"
    }
    
    
    if {$svcType == "vprn" } {
        set routerId 1
        set service "vprn"
        
        if {$opt(ecmp) == "true"} {
            set cmdList ""
            lappend cmdList "/configure port $topoMap(Dut-$dut3,1/1/1) shutdown"
            lappend cmdList "/configure port $topoMap(Dut-$dut3,1/1/1) ethernet mode access"
            lappend cmdList "/configure port $topoMap(Dut-$dut3,1/1/1) ethernet encap dot1q"
            lappend cmdList "/configure port $topoMap(Dut-$dut3,1/1/1) no shutdown"
            
            lappend cmdList "/configure service vprn 1 ecmp 16"
            lappend cmdList "/configure service vprn 1 interface linkA1 create"    
            lappend cmdList "/configure service vprn 1 interface linkA1 $ipType address [ipConvert $family 7.7.1.1]/[RP_maskConvert $family 24]"
            lappend cmdList "/configure service vprn 1 interface linkA1 sap $topoMap(Dut-$dut3,1/1/1):1 create" 
            lappend cmdList "/configure service vprn 1 interface linkA1 sap $topoMap(Dut-$dut3,1/1/1):1 no shutdown"
            lappend cmdList "/configure service vprn 1 interface linkA1 no shutdown"
            
            lappend cmdList "/configure service vprn 1 interface linkA2 create" 
            lappend cmdList "/configure service vprn 1 interface linkA2 $ipType address [ipConvert $family 7.7.2.1]/[RP_maskConvert $family 24]"
            lappend cmdList "/configure service vprn 1 interface linkA2 sap $topoMap(Dut-$dut3,1/1/1):2 create" 
            lappend cmdList "/configure service vprn 1 interface linkA2 sap $topoMap(Dut-$dut3,1/1/1):2 no shutdown"
            lappend cmdList "/configure service vprn 1 interface linkA2 no shutdown"

            
            lappend cmdList "/configure service vprn 1 static-route [ipConvert $family 1.1.0.2]/[RP_maskConvert $family 32] next-hop [ipConvert $family 7.7.1.2]"
            lappend cmdList "/configure service vprn 1 static-route [ipConvert $family 1.1.0.2]/[RP_maskConvert $family 32] next-hop [ipConvert $family 7.7.2.2]"
            lappend cmdList "/configure service vprn 1 static-route [ipConvert $family 3.3.9.9]/[RP_maskConvert $family 32] next-hop [ipConvert $family 7.7.1.2]"
            lappend cmdList "/configure service vprn 1 static-route [ipConvert $family 3.3.9.9]/[RP_maskConvert $family 32] next-hop [ipConvert $family 7.7.2.2]"
            
            foreach {cmd} $cmdList {
                log_msg INFO "Dut-$dut3 - $cmd"
                set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }
               
        }
    } else {
        set routerId ""
        if {$svcType == "ies" } {set service "ies"}
        if {$svcType == "router" } {set service ""}
        
        if {$opt(ecmp) == "true"} {
            set cmdList ""
            lappend cmdList "/configure port $topoMap(Dut-$dut3,1/1/1) shutdown"
            lappend cmdList "/configure port $topoMap(Dut-$dut3,1/1/1) ethernet mode network"
            lappend cmdList "/configure port $topoMap(Dut-$dut3,1/1/1) ethernet encap dot1q"
            lappend cmdList "/configure port $topoMap(Dut-$dut3,1/1/1) no shutdown"
            
            lappend cmdList "/configure router ecmp 16"
            lappend cmdList "/configure router interface linkA1"    
            lappend cmdList "/configure router interface linkA1 $ipType address [ipConvert $family 7.7.1.1]/[RP_maskConvert $family 24]"
            lappend cmdList "/configure router interface linkA1 port $topoMap(Dut-$dut3,1/1/1):1" 
            lappend cmdList "/configure router interface linkA1 no shutdown"
            
            lappend cmdList "/configure router interface linkA2" 
            lappend cmdList "/configure router interface linkA2 $ipType address [ipConvert $family 7.7.2.1]/[RP_maskConvert $family 24]"
            lappend cmdList "/configure router interface linkA2 port $topoMap(Dut-$dut3,1/1/1):2" 
            lappend cmdList "/configure router interface linkA2 no shutdown"

            
            lappend cmdList "/configure router static-route [ipConvert $family 1.1.0.2]/[RP_maskConvert $family 32] next-hop [ipConvert $family 7.7.1.2]"
            lappend cmdList "/configure router static-route [ipConvert $family 1.1.0.2]/[RP_maskConvert $family 32] next-hop [ipConvert $family 7.7.2.2]"
            lappend cmdList "/configure router static-route [ipConvert $family 3.3.9.9]/[RP_maskConvert $family 32] next-hop [ipConvert $family 7.7.1.2]"
            lappend cmdList "/configure router static-route [ipConvert $family 3.3.9.9]/[RP_maskConvert $family 32] next-hop [ipConvert $family 7.7.2.2]"
            
            foreach {cmd} $cmdList {
                log_msg INFO "Dut-$dut3 - $cmd"
                set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
                if {$errMsg != ""} { 
                    log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                    set Result "ERROR"
                }
            }
               
        }
    }
    
     
    #strict mode
    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF STRICT MODE - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
    
    gash_interpreter
    
    puts "\n"
    log_msg INFO "Expected behaviour:"
    if {$opt(ecmp) == "true"} {
        log_msg INFO "strict IP :  redirected"
        log_msg INFO "loose IP  :  redirected"
        log_msg INFO "spoofed IP:  dropped"
    } else {
        log_msg INFO "strict IP:   redirected"
        log_msg INFO "loose IP:    dropped"
        log_msg INFO "spoofed IP:  dropped"
    }
    
    if {$itfBind != "subsap"} { 
        if {$svcType == "router"} {
            set cmd "/configure router interface $intf $ipType urpf-check mode strict"
        } else { 
            set cmd "/configure service $service 1 interface $intf $ipType urpf-check mode strict"
        }
    } else {
        set cmd "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check mode strict"
    }
    log_msg INFO "Dut-$dut3 - $cmd"
    cliCne Dut-$dut3 $cmd
    
    after 10000
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    foreach "stream dest" "1 dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
         if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
    

    
    if {$opt(ecmp) == "true"} {  
        foreach "stream dest" "$trafficStreamId_loose dest1" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "No urpf check failed packets"}
        }
    } else {
        foreach "stream dest" "$trafficStreamId_loose none" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "No urpf check failed packets"}
        }
    }
    
    foreach "stream dest" "$trafficStreamId_spoofed none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "No urpf check failed packets"}
    }

 

   #strict mode
    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF STRICT MODE + defualt route - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
        
    log_msg INFO "Expected behaviour:"
    
    if {$opt(ecmp) == "true"} {
        log_msg INFO "strict IP:  redirected"
        log_msg INFO "loose IP:  redirected"
        log_msg INFO "spoofed IP:  redirected"
    } else {
        log_msg INFO "strict IP:  redirected"
        log_msg INFO "loose IP:  dropped"
        log_msg INFO "spoofed IP:  redirected"
    }

        #cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check mode strict"
        if {$routerId != ""} {
            set cmd "/configure service $service 1 static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else {
            set cmd "/configure router static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        log_msg INFO "$cmd"
        cliCne Dut-$dut3 $cmd
        
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"
    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    foreach "stream dest" "1 dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
     
    if {$opt(ecmp) == "true"} {        
        foreach "stream dest" "$trafficStreamId_loose dest1" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    } else {
        foreach "stream dest" "$trafficStreamId_loose none" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    }    
    
    foreach "stream dest" "$trafficStreamId_spoofed dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
     
     
     
     
     #strict mode
    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF STRICT MODE + defualt route + ignore default enabled - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
    log_msg INFO "Expected behaviour:"
    if {$opt(ecmp) == "true"} { 
        log_msg INFO "strict IP:  redirected"
        log_msg INFO "loose IP:  redirected"
        log_msg INFO "spoofed IP:  dropped"
    } else {
        log_msg INFO "strict IP:  redirected"
        log_msg INFO "loose IP:  dropped"
        log_msg INFO "spoofed IP:  dropped"
    }
    

        set cmdList ""
        if {$itfBind != "subsap"} { 
            if {$svcType == "router"} {
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check mode strict"
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check ignore-default"
            } else { 
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check mode strict"
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check ignore-default"
            }
        } else {
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check mode strict"
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check ignore-default"
        }        
        
        if {$routerId != ""} {
            cliCne Dut-$dut3 "/configure service $service 1 static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else { 
            cliCne Dut-$dut3 "/configure router static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"

    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    foreach "stream dest" "1 dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
      
    if {$opt(ecmp) == "true"} {  
        foreach "stream dest" "$trafficStreamId_loose dest1" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    } else {
        foreach "stream dest" "$trafficStreamId_loose none" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    }  
    
    foreach "stream dest" "$trafficStreamId_spoofed none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
      
     
     
     

    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF LOOSE MODE - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
    log_msg INFO "Expected behaviour:"
    
        log_msg INFO "strict IP:  redirected"
        log_msg INFO "loose IP:  redirected"
        log_msg INFO "spoofed IP:  dropped"

    
    
        if {$itfBind != "subsap"} { 
            if {$svcType == "router"} {
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check mode loose"
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check no ignore-default"
            } else { 
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check mode loose"
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check no ignore-default"
            }
        } else {
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check mode loose"
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check no ignore-default"
        }    
        
        if {$routerId != ""} {
            cliCne Dut-$dut3 "/configure service $service 1 no static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else { 
            cliCne Dut-$dut3 "/configure router no static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"
    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    foreach "stream dest" "1 dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
      
    foreach "stream dest" "$trafficStreamId_loose dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
    
    foreach "stream dest" "$trafficStreamId_spoofed none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
       
     
     
 
    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF LOOSE MODE + default route - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
    log_msg INFO "Expected behaviour:"
    log_msg INFO "strict IP:  redirected"
    log_msg INFO "loose IP:  redirected"
    log_msg INFO "spoofed IP:  redirected"
    

        if {$routerId != ""} {
            cliCne Dut-$dut3 "/configure service $service 1 static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else { 
            cliCne Dut-$dut3 "/configure router static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"
    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    foreach "stream dest" "1 dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
      
    foreach "stream dest" "$trafficStreamId_loose dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
    
    foreach "stream dest" "$trafficStreamId_spoofed dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
       
     
    


    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF LOOSE MODE + default route + ignore default - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
    log_msg INFO "Expected behaviour:"
    log_msg INFO "strict IP:  redirected"
    log_msg INFO "loose IP:  redirected"
    log_msg INFO "spoofed IP:  dropped"
    
        if {$itfBind != "subsap"} { 
            if {$svcType == "router"} {
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check mode loose"
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check ignore-default"
            } else { 
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check mode loose"
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check ignore-default"
            }
        } else {
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check mode loose"
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check ignore-default"
        }    
        if {$routerId != ""} {
            cliCne Dut-$dut3 "/configure service $service 1 static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else { 
            cliCne Dut-$dut3 "/configure router static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"
    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    foreach "stream dest" "1 dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
      
    foreach "stream dest" "$trafficStreamId_loose dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
    
    foreach "stream dest" "$trafficStreamId_spoofed none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
           
           
           
           
           
           
           
    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF MODE STRICT-NO-ECMP - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
    log_msg INFO "Expected behaviour:"
    if {$opt(ecmp) == "true"} {
        log_msg INFO "strict IP:  dropped"
        log_msg INFO "loose IP:  dropped"
        log_msg INFO "spoofed IP:  dropped"
    } else {
        log_msg INFO "strict IP:  redirected"
        log_msg INFO "loose IP:  dropped"
        log_msg INFO "spoofed IP:  dropped"

    }
    
        
        if {$itfBind != "subsap"} { 
            if {$svcType == "router"} {
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check mode strict-no-ecmp"
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check no ignore-default"
            } else { 
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check mode strict-no-ecmp"
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check no ignore-default"
            }
        } else {
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check mode strict-no-ecmp"
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check no ignore-default"
        }     
        if {$routerId != ""} {
            cliCne Dut-$dut3 "/configure service $service 1 no static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else { 
            cliCne Dut-$dut3 "/configure router no static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"
    
    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    if {$opt(ecmp) == "true"} {
        foreach "stream dest" "1 none" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    } else {
        foreach "stream dest" "1 dest1" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    }      

    foreach "stream dest" "$trafficStreamId_loose none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
    
    foreach "stream dest" "$trafficStreamId_spoofed none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
                  
           
           
           
           
           
       
    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF MODE STRICT-NO-ECMP + default route - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
    log_msg INFO "Expected behaviour:"    
    if {$opt(ecmp) == "true"} {    
        log_msg INFO "strict IP:  dropped"
        log_msg INFO "loose IP:  dropped"
        log_msg INFO "spoofed IP:  redirected"
    } else {
        log_msg INFO "strict IP:  redirected"
        log_msg INFO "loose IP:  dropped"
        log_msg INFO "spoofed IP:  redirected"

    }
    
    
    

        if {$routerId != ""} {
            cliCne Dut-$dut3 "/configure service $service 1 static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else { 
            cliCne Dut-$dut3 "/configure router static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"
    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    if {$opt(ecmp) == "true"} {     
        foreach "stream dest" "1 none" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    } else {
        foreach "stream dest" "1 dest1" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    }    
    foreach "stream dest" "$trafficStreamId_loose none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
    
    foreach "stream dest" "$trafficStreamId_spoofed dest1" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
                         
           
           
    log_msg INFO "##########################################################################"
    log_msg INFO " uRPF MODE STRICT-NO-ECMP + default route + ignore default - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
    log_msg INFO "Expected behaviour:"
    if {$opt(ecmp) == "true"} {    
        log_msg INFO "strict IP:  dropped"
        log_msg INFO "loose IP:  dropped"
        log_msg INFO "spoofed IP:  dropped"
    } else {
        log_msg INFO "strict IP:  redirected"
        log_msg INFO "loose IP:  dropped"
        log_msg INFO "spoofed IP:  dropped"
    }
    
    
        if {$itfBind != "subsap"} { 
            if {$svcType == "router"} {
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check mode strict-no-ecmp"
                cliCne Dut-$dut3 "/configure router interface $intf $ipType urpf-check ignore-default"
            } else { 
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check mode strict-no-ecmp"
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType urpf-check ignore-default"
            }
        } else {
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check mode strict-no-ecmp"
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType urpf-check ignore-default"
        }  
        if {$routerId != ""} {
            cliCne Dut-$dut3 "/configure service $service 1 static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else { 
            cliCne Dut-$dut3 "/configure router static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"
    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    
    if {$opt(ecmp) == "true"} {  
        foreach "stream dest" "1 none" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    } else {
        foreach "stream dest" "1 dest1" {
            cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
            RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
            if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] != 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
        }
    }
      
    foreach "stream dest" "$trafficStreamId_loose none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
    
    foreach "stream dest" "$trafficStreamId_spoofed none" {
        cliCne Dut-$dut3 "/clear router $routerId interface $intf urpf-stats"
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
        if {[RP_urpf_check $dut3 $routerId $intf -delay $delay] == 0 } { set Result FAILED; log_msg ERROR "urpf check failed"}
    }
                         
    
    
    
    
    log_msg INFO "##########################################################################"
    log_msg INFO " NO uRPF - ecmp: $opt(ecmp)"
    log_msg INFO "##########################################################################"
        puts "\n"
    log_msg INFO "Expected behaviour:"
    log_msg INFO "strict IP:  redirected"
    log_msg INFO "loose IP:  redirected"
    log_msg INFO "spoofed IP:  redirected"
    
        if {$itfBind != "subsap"} { 
            if {$svcType == "router"} {
                cliCne Dut-$dut3 "/configure router interface $intf $ipType no urpf-check"
            } else { 
                cliCne Dut-$dut3 "/configure service $service 1 interface $intf $ipType no urpf-check"
            }
        } else {
            cliCne Dut-$dut3 "/configure service $service 1 subscriber-interface $intf2 group-interface $intf1 $ipType no urpf-check"
        }  
        if {$routerId != ""} {
            cliCne Dut-$dut3 "/configure service $service 1 no static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        } else { 
            cliCne Dut-$dut3 "/configure router no static-route [ipConvert $family 0.0.0.0]/0 next-hop [ipConvert $family $nextHop]"
        }
        set r [cookCliData [Dut-$dut3 sendCliCommand "show router $routerId route-table [string tolower [getVar2 $filterType]]"]]
        log_msg INFO "Route table: \n$r"
    
    
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    foreach "stream dest" "1 dest1" { 
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
    }
      
    foreach "stream dest" "$trafficStreamId_loose dest1" {
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
    }
    
    foreach "stream dest" "$trafficStreamId_spoofed dest1" {
        RP_verifyTrafficFlowCheckScale $streamBit $stream $dest -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -Tx_time 1000
    }
    
    
    
    log_msg INFO "##########################"
    log_msg INFO "# Deleting all"
    log_msg INFO "##########################"
    
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp6 lease-state all"
    Dut-$dut3 sendCliCommand "clear service id 1 dhcp lease-state all"
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
            set subhostIp [ipConvert $filterType $subhostIp1]
            set hostType "dhcp6_IANA"
            filter_subinsert_radius_clearHost $subhostIp -hostType $hostType
    }
    
 
  
        log_msg INFO "Deleting configuration"
        RP_rollbackCleanup $dut3
        saveOrRestore delete
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
        
      
}


proc filterWccpEnhancedRollback {  }  {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
    
    

    set wccp_1_Addr [ipConvert ipv6 1.2.3.4]
    set wccp_2_Addr [ipConvert ipv4 1.2.3.4]
    set wccp_3_Addr [ipConvert ipv4 10.20.30.40]
    set wccp_4_Addr [ipConvert ipv6 10.20.30.40]
    set wccp_5_Addr [ipConvert ipv6 5.5.5.5]
    set wccp_6_Addr [ipConvert ipv6 6.6.6.1]
    set wccp_6_1_Addr [ipConvert ipv6 6.6.6.2]
    
    
    set wccp_7_Addr [ipConvert ipv6 7.7.7.1]
    set wccp_7_1_Addr [ipConvert ipv6 7.7.7.2]
    
    set wccp_8_Addr [ipConvert ipv4 8.8.8.1]
    set wccp_8_1_Addr [ipConvert ipv4 8.8.8.2]
    set wccp_8_2_Addr [ipConvert ipv4 8.8.8.3]

    set wccp_9_Addr [ipConvert ipv6 9.9.9.1]
    set wccp_9_1_Addr [ipConvert ipv6 9.9.9.2]
    
    set wccp_10_Addr [ipConvert ipv6 10.10.10.1]
    set wccp_11_Addr [ipConvert ipv6 11.11.11.1]
    set wccp_12_Addr [ipConvert ipv6 12.12.12.1]
    set wccp_13_Addr [ipConvert ipv6 13.13.13.1]
    set wccp_14_Addr [ipConvert ipv6 14.14.14.1]
    set wccp_15_Addr [ipConvert ipv6 15.15.15.1]
    set wccp_16_Addr [ipConvert ipv6 16.16.16.1]
     
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK

   
    
    RP_rollbackCleanup $dut3 
    
    set cmdList ""
    lappend cmdList "/configure service vprn 100 customer 1 create no shutdown"
    
    #wccp_1    - pure policy without test   -test+router willbe added + vprn
    lappend cmdList "/configure filter redirect-policy wccp_1 create destination $wccp_1_Addr create no shutdown"
    
    #wccp_2    - pure policy without test   -test+router willbe added
    lappend cmdList "/configure filter redirect-policy wccp_2 create destination $wccp_2_Addr create no shutdown"
    lappend cmdList "/configure service vprn 2 customer 1 create no shutdown"
    
    #wccp_3    - Base policy with unicast test   -unicast will be replaced by snmp, url, ping
    lappend cmdList "/configure filter redirect-policy wccp_3 create destination $wccp_3_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_3 router Base"
    lappend cmdList "/configure filter redirect-policy wccp_3 create destination $wccp_3_Addr unicast-rt-test"
    
    
    #wccp_4    - Base ipv6 policy with unicast test - ipv6 policy will be replaced by ipv4
    lappend cmdList "/configure filter redirect-policy wccp_4 create destination $wccp_4_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_4 router Base"
    lappend cmdList "/configure filter redirect-policy wccp_4 create destination $wccp_4_Addr unicast-rt-test"
   
     
     
    #wccp_5    - ipv6 policy with unicast test - ipv6 policy will be replaced by ping+ vprn will be deleted
    lappend cmdList "/configure service vprn 5 customer 1 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_5 create router 5"
    lappend cmdList "/configure filter redirect-policy wccp_5 create destination $wccp_5_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_5 create destination $wccp_5_Addr unicast-rt-test"
    
        
    
    #wccp_6    - ipv6 policy with unicast test - ipv6 policy will be replaced by unicast
    lappend cmdList "/configure service vprn 6 customer 1 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_6 create router 6"  
    lappend cmdList "/configure filter redirect-policy wccp_6 create destination $wccp_6_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_6 create destination $wccp_6_Addr ping-test"
    lappend cmdList "/configure filter redirect-policy wccp_6 create destination $wccp_6_1_Addr create no shutdown"

    #wccp_7    - ipv6 policy with unicast test - ipv6 policy router will be changed
    lappend cmdList "/configure service vprn 7 customer 1 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_7 create router 7"  
    lappend cmdList "/configure filter redirect-policy wccp_7 create destination $wccp_7_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_7 create destination $wccp_7_Addr ping-test"
    lappend cmdList "/configure filter redirect-policy wccp_7 create destination $wccp_7_1_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_7 create destination $wccp_7_1_Addr unicast-rt-test"
    
    #wccp_8    -
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_Addr ping-test"
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_1_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_1_Addr url-test URL8 create"
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_2_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_2_Addr snmp-test SNMP8 create"
    
    #wccp_9
    lappend cmdList "/configure filter redirect-policy wccp_9 create destination $wccp_9_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_9 create router 100"
    lappend cmdList "/configure filter redirect-policy wccp_9 create destination $wccp_9_Addr ping-test"
    lappend cmdList "/configure filter redirect-policy wccp_9 create destination $wccp_9_1_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_9 create destination $wccp_9_1_Addr unicast-rt-test"
    
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }
    
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 sendCliCommand "configure filter"
    set r1 [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts "\n"
    log_msg DEBUG "Configure filter info: \n $r1"
    
    RP_rollbackSave $dut3 1
    
    set fileName "$config_dir/Dut-$dut3-init.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    set fileName "$config_dir/Dut-$dut3-init_detail.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }

    

    
    set cmdList ""
    #wccp_1    - pure policy without test   -test+router willbe added + vprn
    lappend cmdList "/configure service vprn 1 customer 1 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_1 router 1"
    lappend cmdList "/configure filter redirect-policy wccp_1 create destination $wccp_1_Addr unicast-rt-test"
    
    #wccp_2    - pure policy without test   -test+router willbe added
    lappend cmdList "/configure filter redirect-policy wccp_2 router 2"
    lappend cmdList "/configure filter redirect-policy wccp_2 create destination $wccp_2_Addr unicast-rt-test"
    
    #wccp_3    - Base policy with unicast test   -unicast will be replaced by snmp, url, ping
    lappend cmdList "/configure filter redirect-policy wccp_3 create destination $wccp_3_Addr no unicast-rt-test"
    lappend cmdList "/configure filter redirect-policy wccp_3 create destination $wccp_3_Addr snmp-test SNMP create"
    lappend cmdList "/configure filter redirect-policy wccp_3 create destination $wccp_3_Addr url-test URL create"
    lappend cmdList "/configure filter redirect-policy wccp_3 create destination $wccp_3_Addr ping-test"
    
    #wccp_4    - Base ipv6 policy with unicast test - ipv6 policy will be replaced by ipv4
    lappend cmdList "/configure filter redirect-policy wccp_4 create no destination $wccp_4_Addr"
    lappend cmdList "/configure filter redirect-policy wccp_4 create destination [ipConvert ipv4 $wccp_4_Addr] create"
    lappend cmdList "/configure filter redirect-policy wccp_4 create destination [ipConvert ipv4 $wccp_4_Addr] unicast-rt-test"
   
     
     
    #wccp_5    - ipv6 policy with unicast test - ipv6 policy will be replaced by ping
    lappend cmdList "/configure filter redirect-policy wccp_5 create destination $wccp_5_Addr no unicast-rt-test"
    lappend cmdList "/configure filter redirect-policy wccp_5 no router"
    lappend cmdList "/configure filter redirect-policy wccp_5 create destination $wccp_5_Addr ping-test"
    lappend cmdList "/configure service vprn 5 shutdown"
    lappend cmdList "/configure service no vprn 5"
        
    
    #wccp_6    - ipv6 policy with unicast test - ipv6 policy will be replaced by unicast
    lappend cmdList "/configure filter redirect-policy wccp_6 create destination $wccp_6_Addr no ping-test"
    lappend cmdList "/configure filter redirect-policy wccp_6 create destination $wccp_6_Addr unicast-rt-test"
    lappend cmdList "/configure filter redirect-policy wccp_6 create destination $wccp_6_1_Addr unicast-rt-test"

    
    #wccp_7    - ipv6 policy with unicast test - ipv6 policy router will be changed
    lappend cmdList "/configure filter redirect-policy wccp_7 create router Base"  
    lappend cmdList "/configure filter redirect-policy wccp_7 create destination $wccp_7_Addr no ping-test"
    lappend cmdList "/configure filter redirect-policy wccp_7 create destination $wccp_7_1_Addr unicast-rt-test"
    
    #wccp_8
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_1_Addr no url-test URL8"
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_2_Addr no snmp-test SNMP8"
    lappend cmdList "/configure service vprn 8 customer 1 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_8 router 8"
    lappend cmdList "/configure filter redirect-policy wccp_8 create destination $wccp_8_2_Addr unicast-rt-test"
    
    #wccp_9
    lappend cmdList "/configure filter redirect-policy wccp_9 create destination $wccp_9_Addr create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_9 create router Base"
    lappend cmdList "/configure filter redirect-policy wccp_9 create destination $wccp_9_Addr ping-test"
    lappend cmdList "/configure filter redirect-policy wccp_9 create destination $wccp_9_1_Addr unicast-rt-test"
    
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }
    RP_rollbackSave $dut3 2
    
        set fileName "$config_dir/Dut-$dut3-Change1.cfg"
        log_msg INFO "saving config into $fileName"
        Dut-$dut3 sendCliCommand "exit all"
        set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
        set SC [ string first "Completed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
            set Result FAILED   
        } else  {
            log_msg INFO "admin save of active config Successful"
        }
        
        set fileName "$config_dir/Dut-$dut3-Change1_detail.cfg"
        log_msg INFO "saving config into $fileName"
        Dut-$dut3 sendCliCommand "exit all"
        set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
        set SC [ string first "Completed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
            set Result FAILED   
        } else  {
            log_msg INFO "admin save of active config Successful"
        }
    
    
    RP_rollbackRestore $dut3 "1"
    
    
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 sendCliCommand "configure filter"
    set r2 [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts "\n"
    log_msg DEBUG "Configure filter info: \n $r2"
    
    
        set fileName "$config_dir/Dut-$dut3-Restore1.cfg"
        log_msg INFO "saving config into $fileName"
        Dut-$dut3 sendCliCommand "exit all"
        set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
        set SC [ string first "Completed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
            set Result FAILED   
        } else  {
            log_msg INFO "admin save of active config Successful"
        }
        
        set fileName "$config_dir/Dut-$dut3-Restore1_detail.cfg"
        log_msg INFO "saving config into $fileName"
        Dut-$dut3 sendCliCommand "exit all"
        set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
        set SC [ string first "Completed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
            set Result FAILED   
        } else  {
            log_msg INFO "admin save of active config Successful"
        }
  
    
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-init.cfg $logdir/device_logs/saved_configs/Dut-$dut3-Restore1.cfg] == "ERROR"} {set Result FAILED}
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-init_detail.cfg $logdir/device_logs/saved_configs/Dut-$dut3-Restore1_detail.cfg] == "ERROR"} {set Result FAILED}
        
        
    RP_rollbackRestore $dut3 "latest-rb"  
    
        set fileName "$config_dir/Dut-$dut3-Restore2.cfg"
        log_msg INFO "saving config into $fileName"
        Dut-$dut3 sendCliCommand "exit all"
        set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
        set SC [ string first "Completed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
            set Result FAILED   
        } else  {
            log_msg INFO "admin save of active config Successful"
        }
        
        set fileName "$config_dir/Dut-$dut3-Restore2_detail.cfg"
        log_msg INFO "saving config into $fileName"
        Dut-$dut3 sendCliCommand "exit all"
        set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
        set SC [ string first "Completed" $CLI ]
        if { $SC < 1 } {
            log_msg DEBUG "$CLI"
            log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
            set Result FAILED   
        } else  {
            log_msg INFO "admin save of active config Successful"
        }
        
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-Change1.cfg $logdir/device_logs/saved_configs/Dut-$dut3-Restore2.cfg] == "ERROR"} {set Result FAILED}
    if {[RP_full_compare $logdir/device_logs/saved_configs/Dut-$dut3-Change1_detail.cfg $logdir/device_logs/saved_configs/Dut-$dut3-Restore2_detail.cfg] == "ERROR"} {set Result FAILED}
    
        
        
        
        
    log_msg INFO "Deleting configuration"
    RP_rollbackCleanup $dut3
    saveOrRestore delete

    log_msg INFO "[exec date]"
    # ---- Common end for regression
    if { $Result == "PASSED" } {
    log_result PASSED "Test Case $testID PASSED"
    } else {
    log_result FAILED "Test Case $testID FAILED"
    }
    return $Result 
        
}


proc filterWccpEnhancedOamPoll { args } {

    global testdir logdir ixia_port testResultFlag
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         [RP_lrandom "ping ping ping ping unicast"]
    #set opt(HT)         "ping"
    #set opt(filterType)  [RP_lrandom "IP IPv6"]
    set opt(filterType)  "IP"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) ""
    set opt(itfBind) ""
    set opt(case)    "positive"
    set opt(dest1RC)    ""
    set opt(dest2RC)    ""
    set opt(dest3RC)    ""
    set opt(dest4RC)    ""
    set opt(quick)      "true"
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "vprn rvpls L2Service grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
   

    ## randomly choose initial setupType of duts A,B,C
    if {$opt(setupType) == ""} {
        if { $opt(svcType) == "vprn" } {
            log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
            if {$opt(itfBind) == "serviceAware"} {
                set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
            } else {
                set setupType [RP_VrfTo_getSetupType $opt(filterType)]
            }
        } elseif { $opt(svcType) == "L2Service" } {
            log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
            set setupType [RP_L2Service_getSetupType $opt(filterType)]
        } elseif { $opt(svcType) == "rvpls" } {
            log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
            set setupType [RP_RVPLS_getSetupType $opt(filterType)]
        } else {
            log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
            set setupType [RP_GrtTo_getSetupType $opt(filterType)]
        }
    } else {
        set setupType $opt(setupType)
        log_msg NOTICE "User defined setupType: $setupType"
        if {[regexp {rvpls} $setupType]} { 
            set opt(svcType) "rvpls"
        } elseif {[regexp {vprn} $setupType]} { 
            set opt(svcType) "vprn" 
        } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
            set opt(svcType) "L2Service"
        } else { 
            set opt(svcType) "grt"
        }        
    }
    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    }
    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }    
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
 
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
    
 
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
  
    
    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr $IngrEgr  ] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    #egress filter
    if {$IngrEgr == "true"} {
        set r [filterTCAM_applyFilter $setupType Egress 100]
    }
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }
     # if { [RP_applyFilter_Cli $dut6 ingress 61 -RC GRT -intf FD_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut6 ingress 62 -RC VRF -intf FE_intf -sap $topoMap(Dut-$dut6,1/1/2)] != "OK" } {set Result "FAILED"}   
     # if { [RP_applyFilter_Cli $dut5 ingress 52 -RC GRT -intf EC_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut5 ingress 502 -RC GRT -intf EF_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut4 ingress 41 -RC GRT -intf DC_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut4 ingress 401 -RC GRT -intf DF_intf ] != "OK" } {set Result "FAILED"}
    #End of setup, filter config
    
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true" } {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"}    {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"}   {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"}   {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"}   {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    
     #Create destinations
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
     
     
    
    #if CLI if SNMP
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router Base"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test drop-count 60"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create ping-test"
        } else { 
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create unicast-rt-test"
        }
        lappend cmdList "/configure filter redirect-policy wccp router $opt(RProuter)"        
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown" 
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] priority 200"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    } elseif {$method == "SNMP"} { 
         #set r [Dut-$dut3 setTFilterRPRowStatus wccp createAndGo]
          #   set testResultFlag [RP_CompareOutputString "noError" $r] 
        set r [Dut-$dut3 setTFilterRPVrtrId wccp 1 ]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFilterRPAdminState wccp 2]
            set testResultFlag [RP_CompareOutputString "noError" $r]                   
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]            
        if {$opt(HT)== "ping"} {
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]   
                set r [Dut-$dut3 setTFltrRPPingTDropCount wccp [string tolower $family] [ipConvert $family $dest1Addr] 60]
                    set testResultFlag [RP_CompareOutputString "noError" $r]     
                    
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPPingTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
        } else {
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest1Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest2Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]
                set r [Dut-$dut3 setTFltrRPUcastRtTRowStatus wccp [string tolower $family] [ipConvert $family $dest3Addr] 4]
                    set testResultFlag [RP_CompareOutputString "noError" $r]                
        }
        if {$opt(RProuter) != "Base"} { 
            set r [Dut-$dut3 setTFilterRPVrtrId wccp [Dut-$dut3 getSvcVRouterId  $opt(RProuter)]]
        } else {
            set r [Dut-$dut3 setTFilterRPVrtrId wccp 1]
        }
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest1Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminPriority wccp [string tolower $family] [ipConvert $family $dest1Addr] 200]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest2Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setTFltrRPDstAdminState wccp [string tolower $family] [ipConvert $family $dest3Addr] inService]
        set testResultFlag [RP_CompareOutputString "noError" $r]
        
    }    
        
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
    
    RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up -filterId 100 -entryId 1
    RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 200 -oper_priority 200 -action_taken Enable  
    RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
    RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
    
    RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService -filterId 100 -entryId 1
    RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 200 -oper_priority 200 -action_taken enable -HT $opt(HT)
    RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
    RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
    
    set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        if {$IngrEgr == "true"} { RP_verifyRPAssoc wccp "100-1 100-3" } else { RP_verifyRPAssoc wccp "100-1"  }
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        if {$IngrEgr == "true"} {
            RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        }
        
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
    RP_verifyTrafficFlow $streamDestBit 1 dest1
    RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
    
    #deat dest1 before HA
    RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method subnet 
    RP_routeCheck del [ipConvert $family $R_primary] "" -dest1RCtx $opt(dest1RC)   
    RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"] -wait_timer 80 
    
    RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 200 -oper_priority 0 -action_taken Disable 
    RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 200 -oper_priority 0 -action_taken disable -HT $opt(HT)    
    
    
    
    log_msg INFO "#########################################################"
    log_msg INFO "################  restart of active CPM   ###############"
    log_msg INFO "#########################################################"

    # SWO performed
    log_msg INFO "Restart of active CPM. Verify redirected traffic flow after switch-over"
    Dut-$dut3 sendCliCommand "exit all"
    gash_interpreter
    
    if {$opt(HT)== "unicast"} {
        RP_clearAllFilter $dut3 -filterType $filterType
        filterTCAM_ixStartTraffic 1 -direction ingress
    }
    #activity Switch takes toooo long - not suitable for this test
    #Dut-$dut3 activitySwitch
    Dut-$dut3 sendCliCommand "/admin reboot active now"
    after 2000
    reconnect
    
        
    RP_routeCheck add "" [ipConvert $family $R_secondary] -dest2RCtx $opt(dest2RC)
    after 20000
    if {$opt(HT)== "unicast"} {
        filterTCAM_ixStopTraffic 1 -direction ingress
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    }    
    
    log_msg INFO "Show filter redirect-policy wccp"
    set r [cookCliData [Dut-$dut3 sendCliCommand "show filter redirect-policy wccp"]]
    puts $r
    
    RP_showCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter) -RP_state Up -filterId 100 -entryId 1
    RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 200 -oper_priority 0 -action_taken Disable   
    RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
    RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable 
    
    RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter) -RP_state inService -filterId 100 -entryId 1
    RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 200 -oper_priority 0 -action_taken disable -HT $opt(HT)  
    RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
    RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
    
    set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        if {$IngrEgr == "true"} { RP_verifyRPAssoc wccp "100-1 100-3" } else { RP_verifyRPAssoc wccp "100-1"  }
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest2Addr]]
        if {$IngrEgr == "true"} {
            RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest2Addr]]
        }
    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
    RP_verifyTrafficFlow $streamDestBit 1 dest2
    RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
    
    log_msg INFO "Deleting configuration"
    RP_rollbackCleanup $dut3
    saveOrRestore delete

    log_msg INFO "[exec date]"
    # ---- Common end for regression
    #if { ($testResultFlag != "PASSED") || ($testResultFlag != "OK") } { set Result "FAILED" }
    

    if { $Result == "PASSED" } {
        log_result PASSED "Test Case $testID PASSED"
    } else {
        log_result FAILED "Test Case $testID FAILED"
    }
    return $Result 
    
}


proc filterWccpEnhancedCliAutocompleteHelp {} {
     
    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
    
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    
    
    set cmdList ""
    lappend cmdList "/configure service vprn 20 customer 1 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 router 20"
    for  {set i 1} {$i <= 8} {incr i 1} {
        lappend cmdList "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.$i create"
        lappend cmdList "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.$i [RP_lrandom "ping-test unicast-rt-test"]"
        lappend cmdList "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.$i no shutdown"
    }
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 router 20"
    for  {set i 1} {$i <= 8} {incr i 1} {
        lappend cmdList "/configure filter redirect-policy wccp_ipv6 destination [ipConvert ipv6 15.15.4.$i] create"
        lappend cmdList "/configure filter redirect-policy wccp_ipv6 destination [ipConvert ipv6 15.15.4.$i] [RP_lrandom "ping-test unicast-rt-test"]"
        lappend cmdList "/configure filter redirect-policy wccp_ipv6 destination [ipConvert ipv6 15.15.4.$i] no shutdown"
    }
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }
    
    #check autocomplete of dest
    set dut "Dut-$dut3"
    set session [becomeRootUser -ip [lindex [split [getDutIpAddress $dut] "/"] 0] -login admin -pw admin]
    unixCommand $session "/environment no more"
    for { set i 1 } { $i <= 1 } { incr i } {
        set cmd "show filter redirect-policy \"wccp_ipv4\" dest "
        if { $i } {
            exp_send -i $session $cmd
            set matchPrompt "\r\n\\*[getActiveCpm $dut]:${dut}# ${cmd}$"
        } 
        exp_send -i $session "\t"
        set cli [waitForUnixPrompt $session -matchPrompt $matchPrompt]
    puts $cli
        if { $i } {
            if { [regexp "15.15.4.1.*15.15.4.2.*15.15.4.3.*15.15.4.4.*15.15.4.5.*15.15.4.6.*15.15.4.7.*15.15.4.8.*${matchPrompt}$" $cli] } {
                log_msg INFO "$dut: ${cmd}<tab> .. PASSED"
            } else {
                set Result ERROR
                log_msg ERROR "$dut: ${cmd}<tab> .. FAILED"
            }
        }    
        exp_send -i $session "[char 4]"
        exp_send -i $session "\r\n"
        waitForUnixPrompt $session
        unixCommand $session "exit all"
    }
    closeRootUser $session   
    
    set session [becomeRootUser -ip [lindex [split [getDutIpAddress $dut] "/"] 0] -login admin -pw admin]
    unixCommand $session "/environment no more"
    for { set i 1 } { $i <= 1 } { incr i } {
        set cmd "show filter redirect-policy \"wccp_ipv6\" dest "
        if { $i } {
            exp_send -i $session $cmd
            set matchPrompt "\r\n\\*[getActiveCpm $dut]:${dut}# ${cmd}$"
        } 
        exp_send -i $session "\t"
        set cli [waitForUnixPrompt $session -matchPrompt $matchPrompt]
    puts $cli
        if { $i } {
            if { [regexp "3ffe:0:f0f:401::.*3ffe:0:f0f:402::.*3ffe:0:f0f:403::.*3ffe:0:f0f:404::.*3ffe:0:f0f:405::.*3ffe:0:f0f:406::.*3ffe:0:f0f:407::.*3ffe:0:f0f:408::.*${matchPrompt}$" $cli] } {
                log_msg INFO "$dut: ${cmd}<tab> .. PASSED"
            } else {
                set Result ERROR
                log_msg ERROR "$dut: ${cmd}<tab> .. FAILED"
            }
        }    
        exp_send -i $session "[char 4]"
        exp_send -i $session "\r\n"
        waitForUnixPrompt $session
        unixCommand $session "exit all"
    }
    closeRootUser $session   
    
    
    #check autocomplete of policy
    set dut "Dut-$dut3"
    set session [becomeRootUser -ip [lindex [split [getDutIpAddress $dut] "/"] 0] -login admin -pw admin]
    unixCommand $session "/environment no more"
    for { set i 1 } { $i <= 1 } { incr i } {
        set cmd "show filter redirect-policy \"wccp_ipv4\" "
        if { $i } {
            exp_send -i $session $cmd
            set matchPrompt "\r\n\\*[getActiveCpm $dut]:${dut}# ${cmd}$"
        } 
        exp_send -i $session "\t"
        set cli [waitForUnixPrompt $session -matchPrompt $matchPrompt]
        regsub -all {\[1D} [regsub -all {\u001b} $cli ""] "" cli_clear
        puts $cli_clear
        if { $i } {
            if { [regexp "show filter redirect-policy \"wccp_ipv4\" *\r\nassociations\r\ndest <ip-address>\r\n${matchPrompt}$" $cli_clear match] } {
                log_msg INFO "$dut: ${cmd}<tab> .. PASSED"
            } else {
                set Result ERROR
                log_msg ERROR "$dut: ${cmd}<tab> .. FAILED"
            }
        }    
        exp_send -i $session "[char 21]"
        exp_send -i $session "\r\n"
        puts [waitForUnixPrompt $session]
        unixCommand $session "exit all"
    }
    closeRootUser $session   
    
    
    
    set session [becomeRootUser -ip [lindex [split [getDutIpAddress $dut] "/"] 0] -login admin -pw admin]
    unixCommand $session "/environment no more"
    for { set i 1 } { $i <= 1 } { incr i } {
        set cmd "show filter redirect-policy \"wccp_ipv6\" "
        if { $i } {
            exp_send -i $session $cmd
            set matchPrompt "\r\n\\*[getActiveCpm $dut]:${dut}# ${cmd}$"
        } 
        exp_send -i $session "\t"
        set cli [waitForUnixPrompt $session -matchPrompt $matchPrompt]
        regsub -all {\[1D} [regsub -all {\u001b} $cli ""] "" cli_clear
        puts $cli_clear
        if { $i } {
            if { [regexp "show filter redirect-policy \"wccp_ipv6\" *\r\nassociations\r\ndest <ip-address>\r\n${matchPrompt}$" $cli_clear match] } {
                log_msg INFO "$dut: ${cmd}<tab> .. PASSED"
            } else {
                set Result ERROR
                log_msg ERROR "$dut: ${cmd}<tab> .. FAILED"
            }
        }    
        exp_send -i $session "[char 21]"
        exp_send -i $session "\r\n"
        waitForUnixPrompt $session
        unixCommand $session "exit all"
    }
    closeRootUser $session   
    
    
    #filters added
    set cmdList ""
    lappend cmdList "/configure filter ip-filter 100 create entry 1 create no match"
    lappend cmdList "/configure filter ip-filter 100 create entry 1 create action forward redirect-policy wccp_ipv4"
    lappend cmdList "/configure filter ipv6-filter 100 create entry 1 create no match"
    lappend cmdList "/configure filter ipv6-filter 100 create entry 1 create action forward redirect-policy wccp_ipv6"
   
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }
  
    #check autocomplete of associations
    set dut "Dut-$dut3"
    set session [becomeRootUser -ip [lindex [split [getDutIpAddress $dut] "/"] 0] -login admin -pw admin]
    unixCommand $session "/environment no more"
    for { set i 1 } { $i <= 1 } { incr i } {
        set cmd "show filter redirect-policy \"wccp_ipv4\" associations "
        if { $i } {
            exp_send -i $session $cmd
            set matchPrompt "\r\n\\*[getActiveCpm $dut]:${dut}# ${cmd}$"
        } 
        exp_send -i $session "\t"
        set cli [waitForUnixPrompt $session -matchPrompt $matchPrompt]
        regsub -all {\[1D} [regsub -all {\u001b} $cli ""] "" cli_clear
        puts $cli_clear
        if { $i } {
            if { [regexp "show filter redirect-policy \"wccp_ipv4\" associations *${matchPrompt}$" $cli_clear] } {
                log_msg INFO "$dut: ${cmd}<tab> .. PASSED"
            } else {
                set Result ERROR
                log_msg ERROR "$dut: ${cmd}<tab> .. FAILED"
            }
        }    
        exp_send -i $session "\r\n"
        set res [waitForUnixPrompt $session]
        puts $res
        if {[regexp "IP Filter *: *100 *Entry *: *1" $res] == "0"} {log_msg ERROR "Incorrect association in wccp_ipv4"; set Result ERROR} else { log_msg INFO "Association verified correctly"}
        unixCommand $session "exit all"
    }
    closeRootUser $session   
    
    
    
    set dut "Dut-$dut3"
    set session [becomeRootUser -ip [lindex [split [getDutIpAddress $dut] "/"] 0] -login admin -pw admin]
    unixCommand $session "/environment no more"
    for { set i 1 } { $i <= 1 } { incr i } {
        set cmd "show filter redirect-policy \"wccp_ipv6\" associations "
        if { $i } {
            exp_send -i $session $cmd
            set matchPrompt "\r\n\\*[getActiveCpm $dut]:${dut}# ${cmd}$"
        } 
        exp_send -i $session "\t"
        set cli [waitForUnixPrompt $session -matchPrompt $matchPrompt]
        regsub -all {\[1D} [regsub -all {\u001b} $cli ""] "" cli_clear
        puts $cli_clear
        if { $i } {
            if { [regexp "show filter redirect-policy \"wccp_ipv6\" associations *${matchPrompt}$" $cli_clear] } {
                log_msg INFO "$dut: ${cmd}<tab> .. PASSED"
            } else {
                set Result ERROR
                log_msg ERROR "$dut: ${cmd}<tab> .. FAILED"
            }
        }    
        exp_send -i $session "\r\n"
        set res [waitForUnixPrompt $session]
        puts $res
        if {[regexp "IPv6 Filter *: *100 *Entry *: *1" $res] == "0"} {log_msg ERROR "Incorrect association in wccp_ipv6"; set Result ERROR} else { log_msg INFO "Association verified correctly"}
        unixCommand $session "exit all"
    }
    closeRootUser $session   
    
    
    
    #check autocomplete of specific dest
    set dut "Dut-$dut3"
    set session [becomeRootUser -ip [lindex [split [getDutIpAddress $dut] "/"] 0] -login admin -pw admin]
    unixCommand $session "/environment no more"
    for { set i 1 } { $i <= 1 } { incr i } {
        set cmd "show filter redirect-policy \"wccp_ipv4\" dest 15.15.4.1 "
        if { $i } {
            exp_send -i $session $cmd
            set matchPrompt "\r\n\\*[getActiveCpm $dut]:${dut}# ${cmd}$"
        } 
        exp_send -i $session "\t"
        set cli [waitForUnixPrompt $session -matchPrompt $matchPrompt]
        regsub -all {\[1D} [regsub -all {\u001b} $cli ""] "" cli_clear
        puts $cli_clear
        if { $i } {
            if { [regexp "show filter redirect-policy \"wccp_ipv4\" dest 15.15.4.1 *${matchPrompt}$" $cli_clear] } {
                log_msg INFO "$dut: ${cmd}<tab> .. PASSED"
            } else {
                set Result ERROR
                log_msg ERROR "$dut: ${cmd}<tab> .. FAILED"
            }
        }     
        exp_send -i $session "\r\n"
        set res [waitForUnixPrompt $session]
        puts $res
        if {[regexp "Destination *: *15.15.4.1" $res] == "0"} {log_msg ERROR "Incorrect destination in wccp_ipv4"; set Result ERROR} else { log_msg INFO "Destination verified correctly"}
        unixCommand $session "exit all"
    }
    closeRootUser $session   
    

    set dut "Dut-$dut3"
    set session [becomeRootUser -ip [lindex [split [getDutIpAddress $dut] "/"] 0] -login admin -pw admin]
    unixCommand $session "/environment no more"
    for { set i 1 } { $i <= 1 } { incr i } {
        set cmd "show filter redirect-policy \"wccp_ipv6\" dest 3ffe:0:f0f:401:: "
        if { $i } {
            exp_send -i $session $cmd
            set matchPrompt "\r\n\\*[getActiveCpm $dut]:${dut}# ${cmd}$"
        } 
        exp_send -i $session "\t"
        set cli [waitForUnixPrompt $session -matchPrompt $matchPrompt]
        regsub -all {\[1D} [regsub -all {\u001b} $cli ""] "" cli_clear
        puts $cli_clear
        if { $i } {
            if { [regexp "show filter redirect-policy \"wccp_ipv6\" dest 3ffe:0:f0f:401:: *${matchPrompt}$" $cli_clear] } {
                log_msg INFO "$dut: ${cmd}<tab> .. PASSED"
            } else {
                set Result ERROR
                log_msg ERROR "$dut: ${cmd}<tab> .. FAILED"
            }
        }     
        exp_send -i $session "\r\n"
        set res [waitForUnixPrompt $session]
        puts $res
        if {[regexp "Destination *: *3ffe:0:f0f:401::" $res] == "0"} {log_msg ERROR "Incorrect destination in wccp_ipv6"; set Result ERROR} else { log_msg INFO "Destination verified correctly"}
        unixCommand $session "exit all"
    }
    closeRootUser $session   
    
    
    #check invalid inputs from old behavoir
    set cmd "show filter redirect-policy \"wccp_ipv4\" associations dest 15.15.4.1"
    puts $cmd
    set res [cookCliData [Dut-$dut3 sendCliCommand $cmd]]
    puts $res
    if {[regexp  "Error: Invalid parameter." $res] == "0"} {set Result ERROR; log_msg ERROR "Invalid command passed"}
    
    set cmd "show filter redirect-policy \"wccp_ipv6\" associations dest 3ffe:0:f0f:401::"
    puts $cmd
    set res [cookCliData [Dut-$dut3 sendCliCommand $cmd]]
    puts $res
    if {[regexp  "Error: Invalid parameter." $res] == "0"} {set Result ERROR; log_msg ERROR "Invalid command passed"}
    
    
    
    set cmd "show filter redirect-policy \"wccp_ipv4\" dest 15.15.4.1 associations"
    puts $cmd
    set res [cookCliData [Dut-$dut3 sendCliCommand $cmd]]
    puts $res
    if {[regexp  "Error: Invalid parameter." $res] == "0"} {set Result ERROR; log_msg ERROR "Invalid command passed"}
    
    set cmd "show filter redirect-policy \"wccp_ipv6\" dest 3ffe:0:f0f:401:: associations"
    puts $cmd
    set res [cookCliData [Dut-$dut3 sendCliCommand $cmd]]
    puts $res
    if {[regexp  "Error: Invalid parameter." $res] == "0"} {set Result ERROR; log_msg ERROR "Invalid command passed"}
    

    set cmd "show filter redirect-policy \"wccp_ipv4\" dest 15.15.4.150 associations"
    puts $cmd
    set res [cookCliData [Dut-$dut3 sendCliCommand $cmd]]
    puts $res
    if {[regexp  "Error: Invalid parameter." $res] == "0"} {set Result ERROR; log_msg ERROR "Invalid command passed"}
    
    set cmd "show filter redirect-policy \"wccp_ipv6\" dest 3ffe:0:f0f:4099:: associations"
    puts $cmd
    set res [cookCliData [Dut-$dut3 sendCliCommand $cmd]]
    puts $res
    if {[regexp  "Error: Invalid parameter." $res] == "0"} {set Result ERROR; log_msg ERROR "Invalid command passed"}
    
    
    
    log_msg INFO "Deleting configuration"
    RP_rollbackCleanup $dut3
    saveOrRestore delete

    log_msg INFO "[exec date]"
    # ---- Common end for regression
    if { $Result == "PASSED" } {
    log_result PASSED "Test Case $testID PASSED"
    } else {
    log_result FAILED "Test Case $testID FAILED"
    }
    return $Result 

}


proc filterWccpEnhancedOamPollUrlSnmp { args } {

    global testdir logdir ixia_port testResultFlag
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         [RP_lrandom "snmp url"]
    set opt(filterType) "IP"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) ""
    set opt(itfBind) ""
    set opt(case)    "positive"
    set opt(dest1RC)    "GRT"
    set opt(dest2RC)    "GRT"
    set opt(dest3RC)    "GRT"
    set opt(dest4RC)    ""
    set opt(quick)      "true"
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "grt" ]
    }
    
    if {$opt(case) == ""} {
        set opt(case)       [ RP_lrandom "positive collision backward" ]   
    }
    
    #set random destinations
    if {$opt(dest1RC) == ""} {
        set opt(dest1RC)    [ RP_lrandom "GRT VRF1 VRF2"]  
    }   
    if {$opt(dest2RC) == ""} {
        if {$opt(case) != "collision"} {set opt(dest2RC) $opt(dest1RC) }
        if {$opt(case) == "collision"} {set opt(dest2RC) [ RP_lrandom "GRT VRF1 VRF2" -except $opt(dest1RC)]  }
    }
    set opt(dest3RC) $opt(dest1RC)
    set opt(dest4RC)    "GRT"

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    if {($opt(case) == "positive") || ($opt(case) == "collision")}   {     
        switch $opt(dest1RC) {
            "GRT"  {set opt(RProuter) "Base"}
            default {set opt(RProuter) "$vprnId"}
        }        
    }

    
    if {$opt(case) == "backward"}   { set opt(RProuter) "" }
    RP_set_dut
   

    ## randomly choose initial setupType of duts A,B,C
    if {$opt(setupType) == ""} {
        if { $opt(svcType) == "vprn" } {
            log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
            if {$opt(itfBind) == "serviceAware"} {
                set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
            } else {
                set setupType [RP_VrfTo_getSetupType $opt(filterType)]
            }
        } elseif { $opt(svcType) == "L2Service" } {
            log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
            set setupType [RP_L2Service_getSetupType $opt(filterType)]
        } elseif { $opt(svcType) == "rvpls" } {
            log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
            set setupType [RP_RVPLS_getSetupType $opt(filterType)]
        } else {
            log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
            set setupType [RP_GrtTo_getSetupType $opt(filterType)]
        }
    } else {
        set setupType $opt(setupType)
        log_msg NOTICE "User defined setupType: $setupType"
        if {[regexp {rvpls} $setupType]} { 
            set opt(svcType) "rvpls"
        } elseif {[regexp {vprn} $setupType]} { 
            set opt(svcType) "vprn" 
        } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
            set opt(svcType) "L2Service"
        } else { 
            set opt(svcType) "grt"
        }        
    }
    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    }
    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }    
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
 
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
    
 
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
  
    
    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr $IngrEgr  ] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    #egress filter
    if {$IngrEgr == "true"} {
        set r [filterTCAM_applyFilter $setupType Egress 100]
    }
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }
     # if { [RP_applyFilter_Cli $dut6 ingress 61 -RC GRT -intf FD_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut6 ingress 62 -RC VRF -intf FE_intf -sap $topoMap(Dut-$dut6,1/1/2)] != "OK" } {set Result "FAILED"}   
     # if { [RP_applyFilter_Cli $dut5 ingress 52 -RC GRT -intf EC_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut5 ingress 502 -RC GRT -intf EF_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut4 ingress 41 -RC GRT -intf DC_intf] != "OK" } {set Result "FAILED"}
     # if { [RP_applyFilter_Cli $dut4 ingress 401 -RC GRT -intf DF_intf ] != "OK" } {set Result "FAILED"}
    #End of setup, filter config
    
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true" } {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"}    {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"}   {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"}   {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"}   {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    
     #Create destinations
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)
     
     gash_interpreter
    
    
        # todo - test also drop-coun 1 and interval 60  - seems after CPM SWO first request has issue
        set cmdList ""    
        lappend cmdList "/configure filter redirect-policy wccp create router Base"
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        if {$opt(HT) == "url"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create no shutdown"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] url-test URL create"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] url-test URL drop-count 3"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] url-test URL interval 3"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] url-test URL url \"http://$dest3Addr/\""
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] priority 200"
        } else {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create no shutdown"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] snmp-test SNMP create"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] snmp-test SNMP drop-count 3"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] snmp-test SNMP interval 3"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] snmp-test SNMP oid 1.3.6.1.2.1.1.4.0 community private"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] priority 200"
        }
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create no shutdown"
            #lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] ping-test"
 
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    if {$opt(HT) == "url"} {
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter) -RP_state Up -filterId 100 -entryId 1
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 200 -oper_priority 200 -action_taken Enable  
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 

        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter) -RP_state inService -filterId 100 -entryId 1
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 200 -oper_priority 200 
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        if {$IngrEgr == "true"} { RP_verifyRPAssoc wccp "100-1 100-3" } else { RP_verifyRPAssoc wccp "100-1"  }
            RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest3Addr]]
        if {$IngrEgr == "true"} {
            RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest3Addr]]
        }

        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        cliCne Dut-$dut3 "/configure filter redirect-policy wccp shutdown"
        cliCne Dut-$dut3 "/configure filter redirect-policy wccp no shutdown"
        after 3000
         RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
        # #deat dest3 before HA
        # RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method dest_interface
        # RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"] -wait_timer 80 

        # RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 200 -oper_priority 0 -action_taken Disable 
        # RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 200 -oper_priority 0  
    } else {
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up -filterId 100 -entryId 1
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 200 -oper_priority 200 -action_taken Enable  
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100

        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService -filterId 100 -entryId 1
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 200 -oper_priority 200 
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 

        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        if {$IngrEgr == "true"} { RP_verifyRPAssoc wccp "100-1 100-3" } else { RP_verifyRPAssoc wccp "100-1"  }
            RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        if {$IngrEgr == "true"} {
            RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        }

        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        cliCne Dut-$dut3 "/configure filter redirect-policy wccp shutdown"
        cliCne Dut-$dut3 "/configure filter redirect-policy wccp no shutdown"
        after 3000
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]  
        # #deat dest1 before HA
        # RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method interface
        # RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"] -wait_timer 80 

        # RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 200 -oper_priority 0 -action_taken Disable 
        # RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 200 -oper_priority 0  
    }
    
  
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    if {[GGV 7710Support]} {
        #to clear standby statistics
        log_msg INFO "Restart of standby CPM due to statistics. Verify reconcile"
        Dut-$dut3 sendCliCommand "exit all"
        Dut-$dut3 sendCliCommand "admin reboot standby now"
        after 5000
        set data [Dut-$dut3 sendCliCommand "show card"] ; log_msg DEBUG $data
        if { [Dut-$dut3 CnWRedCardStatus] != "OK" } {
            log_msg ERROR "Reconcile was not successful" ; set testResultFlag "FAILED"
        }
        set data [Dut-$dut3 sendCliCommand "show card"] ; log_msg DEBUG $data
    }
    
    log_msg INFO "#########################################################"
    log_msg INFO "################  restart of active CPM   ###############"
    log_msg INFO "#########################################################"

    # SWO performed
    log_msg INFO "Restart of active CPM. Verify redirected traffic flow after switch-over"
    Dut-$dut3 sendCliCommand "exit all"
    gash_interpreter
    after 1000
    
    set cli [cookCliData [Dut-$dut3 sendCliCommand "show system time"]]
    puts "\n\n $cli \n"
    
    filterTCAM_ixStartTraffic 1 -direction ingress
    
    #activity Switch takes toooo long - not suitable for this test
    #Dut-$dut3 activitySwitch
    Dut-$dut3 sendCliCommand "/admin reboot active now"
    after 2000
    reconnect 
    after 20000
    
    log_msg INFO "Show filter redirect-policy wccp"
    set r [cookCliData [Dut-$dut3 sendCliCommand "show filter redirect-policy wccp"]]
    puts $r
    filterTCAM_ixStopTraffic 1 -direction ingress
    after 2000
    
    log_msg INFO "eveluation of traffic during SWO"
    set streamBit [RP_streamBit $opt(svcType) $iom3 $opt(RProuter) ]
    if {$opt(HT) == "url"} {
        RP_verifyTrafficFlowCheckScale $streamBit 1 dest3 -scale2 true -filterIngr 100 -filterEgr 3 -filterIxiaEgr 300 -traffic false
    } else {
        RP_verifyTrafficFlowCheckScale $streamBit 1 dest1 -scale2 true -filterIngr 100 -filterEgr 1 -filterIxiaEgr 300 -traffic false
    }    
    RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

    
     if {$opt(HT) == "url"} {
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter) -RP_state Up -filterId 100 -entryId 1
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 200 -oper_priority 200 -action_taken Enable  
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100  

        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter) -RP_state inService -filterId 100 -entryId 1
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 200 -oper_priority 200 
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        if {$IngrEgr == "true"} { RP_verifyRPAssoc wccp "100-1 100-3" } else { RP_verifyRPAssoc wccp "100-1"  }
            RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest3Addr]]
        if {$IngrEgr == "true"} {
            RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest3Addr]]
        }

            if {($itfBind == "spoke") || ($itfBind == "mesh") } {
                log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }     
            }
            if {$opt(itfBind) == "serviceAware"} { 
                log_msg NOTICE "Wait 55 seconds for network convergence ..."
                printDotsWhileWaiting 55
                RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
            }  
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]


        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1


        # #deat dest3 before HA
        # RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method dest_interface
        # RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"] -wait_timer 80 

        # RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 200 -oper_priority 0 -action_taken Disable 
        # RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 200 -oper_priority 0  
    } else {
       
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up -filterId 100 -entryId 1
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 200 -oper_priority 200 -action_taken Enable  
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 

        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService -filterId 100 -entryId 1
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 200 -oper_priority 200 
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 

        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        if {$IngrEgr == "true"} { RP_verifyRPAssoc wccp "100-1 100-3" } else { RP_verifyRPAssoc wccp "100-1"  }
            RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        if {$IngrEgr == "true"} {
            RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]]
        }

            if {($itfBind == "spoke") || ($itfBind == "mesh") } {
                log_msg DEBUG "Waiting for SDP to become operational..."
                    set rc [waitForSdpUp Dut-$dut3 30] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut2 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }
                    set rc [waitForSdpUp Dut-$dut1 15] ; if {$rc != "OK"} { log_msg ERROR "SDP is not operational" ; set Result "FAILED" }     
            }
            if {$opt(itfBind) == "serviceAware"} { 
                log_msg NOTICE "Wait 55 seconds for network convergence ..."
                printDotsWhileWaiting 55
                RP_routeCheck2 add [ipConvert $family 1.0.0.0] -router 1  
            }  
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]
            
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1


        # #deat dest1 before HA
        # RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method interface
        # RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"] -wait_timer 80 

        # RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 200 -oper_priority 0 -action_taken Disable 
        # RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 200 -oper_priority 0  
    }
    
    log_msg INFO "Deleting configuration"
    RP_rollbackCleanup $dut3
    saveOrRestore delete

    log_msg INFO "[exec date]"
    # ---- Common end for regression
    #if { ($testResultFlag != "PASSED") || ($testResultFlag != "OK") } { set Result "FAILED" }
    

    if { $Result == "PASSED" } {
        log_result PASSED "Test Case $testID PASSED"
    } else {
        log_result FAILED "Test Case $testID FAILED"
    }
    return $Result 
    
}


proc filterWccpEnhanced_IomRouterVprnChecks { args } {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)      true
    set opt(debugPrint) false
    set opt(deconfig)   true
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(mode)       "regular"
    set opt(HT)         "ping"
    set opt(filterType) "IP"
    set opt(routing_prot) "ospf"
    set static_routes_list ""
    set opt(issu)       "false"
    set opt(dest4support) "false"
    set opt(dest3support) "true"
    set opt(iteration)  1
    set vprnId          "-1"
    set vprn2Id         "-1"
    set vprn3Id         "-1"
    set vprn4Id         "-1"          
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set opt(svcType) ""
    set opt(itfBind) ""
    set opt(case)    "collision"
    set opt(dest1RC)    "VRF1"
    set opt(dest2RC)    "VRF2"
    set opt(dest3RC)    "GRT"
    set opt(dest4RC)    ""
    
    getopt opt $args
    
    #randomize setup in case of no options
    if {$opt(svcType) == ""} {
        set opt(svcType)    [ RP_lrandom "grt" ]
    }
    

    #set vprnIDs
    if {$opt(dest1RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprnId "1"
        } else {
            set vprnId "10"
        }
    } elseif {$opt(dest1RC) == "VRF2"} {
            set vprnId "20"
    }
    
    if {$opt(dest2RC) == "VRF1"} {
        if {$opt(svcType) == "vprn"} {
            set vprn2Id "1"
        } else {
            set vprn2Id "10"
        }
    } elseif {$opt(dest2RC) == "VRF2"} {
            set vprn2Id "20"
    }
    set vprn3Id $vprnId

    

    #set RP RouterInstance     
    set opt(RProuter)  "$vprnId"
    set opt(RProuter2) "$vprn2Id"
    set opt(RProuter3) "Base"
    set opt(RProuter4) "(Not Specified)"



   
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"

    log_msg INFO "############################################################################################################"
   

    ## randomly choose initial setupType of duts A,B,C
    if {$opt(setupType) == ""} {
        if { $opt(svcType) == "vprn" } {
           log_msg INFO "Service under VRF Routing context is used for filter testing - PBR taken into account"
            if {$opt(itfBind) == "serviceAware"} {
                set setupType [RP_VrfTo_getSetupType $opt(filterType) -itfBind "serviceAware"]
            } else {
                set setupType [RP_VrfTo_getSetupType $opt(filterType)]
            }
        } elseif { $opt(svcType) == "L2Service" } {
            log_msg INFO "L2 service is used for filter testing - traffic will be just forwarded and PBR is not taken into account"
            set setupType [RP_L2Service_getSetupType $opt(filterType)]
        } elseif { $opt(svcType) == "rvpls" } {
            log_msg INFO "Routed VPLS is used for filter testing - PBR is taken into account"
            set setupType [RP_RVPLS_getSetupType $opt(filterType)]
        } else {
            log_msg INFO "Service udder GRT is used for filter testing - PBR taken into account"
            set setupType [RP_GrtTo_getSetupType $opt(filterType)]
        }
    } else {
        set setupType $opt(setupType)
        log_msg NOTICE "User defined setupType: $setupType"
        if {[regexp {rvpls} $setupType]} { 
            set opt(svcType) "rvpls"
        } elseif {[regexp {vprn} $setupType]} { 
            set opt(svcType) "vprn" 
        } elseif {([regexp {vpls} $setupType]) || ([regexp {pipe} $setupType])} { 
            set opt(svcType) "L2Service"
        } else { 
            set opt(svcType) "grt"
        }        
    }
    if {[filterTCAM_getGlobals $setupType] != "OK"} {
        log_msg ERROR "Unable to find correct parameters for $setupType"
        set Result FAILED
    }
    
    switch $itfBind {
        "exSpokeGre"     {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLsp"    {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindGre"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdp"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpoke3107"   {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "exSpokeMplsLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        "autobindLdpOverRsvp"  {set IngrEgr false; set opt(itfBind) "serviceAware"}
        default         {set IngrEgr true}
    }    
    
    # configuration and IxiaInit, IxiaStreams
    #filterTCAM_config $setupType
    
    if {($filterType == "IPv6") && ($itfBind == "subsap")} {
        # no static v6 hosts => use radOverride/subinsert setup with dhcp6 subhost
        set r [filter_radOverride_runTest $filterType -select [string trimleft $setupType IPv6_ ] -hostType dhcp6_IANA -cleanup false -dual $opt(dual)]
        set opt(dest4support) "false"
    } else {
        # configure base setup
        set r [filterTCAM_config $setupType -dual $opt(dual)]
    } 
    filterTCAM_ixInit $setupType

    #set numStreams [filterTCAM_ixConfigStreams $setupType -ipOptions false]
    set numStreams [filterTCAM_ixConfigStreams $setupType]
    set streamIdList ""
    for {set i 1} {$i <= $numStreams} {incr i} { lappend streamIdList $i }
    filterTCAM_ixTestTraffic $streamIdList
   
   
    #IOM card compatibility check - IOM3+ support,  
    if { $itfType == "lag" } {
        set iom3 ""
        foreach {port} $port_3_2 {
            if {[Dut-$dut3 isIom3Equipped [lindex [split $port "/"] 0]] != "TRUE"} {
                if {$iom3 == "true"} {set iom3 "none"} else {set iom3 "false"}
            } else {
                if {$iom3 == "false"} {set iom3 "none"} else {set iom3 "true"}
            }
        }
        log_msg NOTICE "iom3 $iom3"
        if {$iom3 == "none"} { log_msg ERROR "testing on lag with mixture of iom3 and non-iom3 ports, Results for action forward router tests could be unpredictable" }
    } else {
        set iom3 [ string tolower [Dut-$dut3 isIom3Equipped [lindex [split $port_3_2 "/"] 0]]]
        if { $iom3 == "false" } {
            log_msg INFO "Used line card is NOT IOM3 and higher - verify, that traffic will be just forwarded and PBR is not taken into account"
        }
    }
    
    #chassis mode compatibility check - for IPv6 D
    set initmode [Dut-$dut3 getTmnxChassisAdminMode 1]
    
  
    
    #configuration of system IPs
    if { [RP_configSystemIPs] != "OK" } {set Result "FAILED"}  
    #configuration of dutD, dutE, dutF -interfaces
    if { [RP_configDuts] != "OK" } {set Result "FAILED"}    
    #configuration of interfaces for dest1,2,3,4 on dutC - tested dut 
    if { [RP_configTestedDut $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(svcType)] != "OK" } {set Result "FAILED"}  
    #configuration of routes - BGP or OSPF or OSPFv3 or static routes
    if { [RP_configRoutes $opt(dest1RC) $opt(dest2RC) $opt(dest3RC) $opt(dest4RC) $opt(dest3support) $opt(dest4support) $opt(routing_prot)] != "OK" } {set Result "FAILED"}

    if {$opt(dest3support) == "true"} { 
        if { [RP_setMACforARP -dest3RC $opt(dest3RC)] != "OK" } {set Result "FAILED"}
    }
    
 
    
    #configuration of filter (filters, redirect policy)
    if { [RP_configFilters -dest3supp $opt(dest3support) -dest4supp $opt(dest4support) -IngrEgr true] != "OK" } {set Result "FAILED"}
    #binding filters
    #ingress filter
    set r [filterTCAM_applyFilter $setupType Ingress 100]
    if {$r != "noError"} { set Result "FAILED"}
    RP_set_dut
    if {$IngrEgr == "true"} { 
        #egress filter for ICMp unreachable
        set r [filterTCAM_applyFilter $setupType Egress 100]
        if {$r != "noError"} { set Result "FAILED"}
    }
    RP_set_dut
    
    #egress to Ixia
    set cmd ""
    if { $opt(svcType) == "vprn" } {
        if { [regexp (WRvprnRCO) $setupType] } {
            set cmd "/configure service vprn 2000 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        } else {
            set cmd "/configure service vprn $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
        }
    } elseif {$opt(svcType) == "L2Service" } {
        if { $svcType == "mvpls" || $svcType == "vpls" } { set cmd "/configure service vpls $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300" }
        if { $svcType == "epipe" || $svcType == "ipipe"} { set cmd  "/configure service $svcType $svc1 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"}
    } elseif {$opt(svcType) == "rvpls" } {
        set cmd "/configure service ies 100 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    } else {
        set cmd "/configure service ies $svc1 interface itfToIxia3 sap $port_3_3:$svc1 egress filter [getVar4 $filterType] 300"
    }  
    set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
        
    #egres to dest1,2,3
     if { [RP_applyFilter_Cli $dut3 egress 1 -RC $opt(dest1RC) -intf CD_intf -sap $topoMap(Dut-$dut3,2/1/2)] != "OK" } {set Result "FAILED"}
     if { [RP_applyFilter_Cli $dut3 egress 2 -RC $opt(dest2RC) -intf CE_intf -sap $topoMap(Dut-$dut3,2/1/1)] != "OK" } {set Result "FAILED"}
     if {$opt(dest3support) == "true"} {
        if { [RP_applyFilter_Cli $dut3 egress 3 -RC $opt(dest3RC) -intf CEth1_intf -sap $topoMap(Dut-$dut3,1/1/5) ] != "OK" } {set Result "FAILED"}
     }
     if {$opt(dest4support) == "true"} { 
        if { [RP_applyFilter_Cli $dut3 egress 4 -RC $opt(dest4RC) -intf CEth2_intf -sap $topoMap(Dut-$dut3,2/1/6) ] != "OK" } {set Result "FAILED"}
     }

    #End of setup, filter config
   ##gash_interpreter
    

    
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    
   
  
    
    log_msg INFO "Test will be started with following options :\n"
    log_msg INFO "############################################################################################################"
    log_msg INFO "# opt(HT)             $opt(HT)"  
    log_msg INFO "# opt(filterType)     $opt(filterType)"
    log_msg INFO "# opt(svcType)        $opt(svcType)"
    log_msg INFO "# opt(routing_prot)   $opt(routing_prot)"
    log_msg INFO "# opt(dest1RC)        $opt(dest1RC)"
    log_msg INFO "# opt(dest2RC)        $opt(dest2RC)"
    if {$opt(dest3support) == "true" } {log_msg INFO "# opt(dest3RC)        $opt(dest3RC)"}
    if {$opt(dest4support) == "true" } {log_msg INFO "# opt(dest4RC)        $opt(dest4RC)"}    
    if {$vprnId != "-1"}    {log_msg INFO "# vprnId              $vprnId"}
    if {$vprn2Id != "-1"}   {log_msg INFO "# vprn2Id             $vprn2Id"}
    if {$vprn3Id != "-1"}   {log_msg INFO "# vprn3Id             $vprn3Id"}
    if {$vprn4Id != "-1"}   {log_msg INFO "# vprn4Id             $vprn4Id"}   
    log_msg INFO "# opt(RProuter)       $opt(RProuter)"
    log_msg INFO "# opt(case)           $opt(case)"
    log_msg INFO "############################################################################################################"
   
    RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
    RP_routeCheck add [ipConvert $family $R_primary] [ipConvert $family $R_secondary] -dest1RCtx $opt(dest1RC) -dest2RCtx $opt(dest2RC)     
    
    log_msg INFO "policy wccp:"

        set cmdList ""
        lappend cmdList "/configure filter redirect-policy wccp create" 
        lappend cmdList "/configure filter redirect-policy wccp no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create"
        if {$opt(HT)== "ping"} {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create ping-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create ping-test"
        } else {
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] create unicast-rt-test"
            lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] create unicast-rt-test"           
        }
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest1Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest2Addr] no shutdown"
        lappend cmdList "/configure filter redirect-policy wccp create destination [ipConvert $family $dest3Addr] no shutdown"
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }    
               
        log_msg INFO "###########################"
        log_msg INFO " setup:  no router - dest3 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter4) = no router       
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 3 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method interface
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        
        #dest3 is reachable again
        log_msg INFO "\n Active dest is going up... \n"
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        
        
        log_msg INFO "###########################"
        log_msg INFO " setup:  router Base - dest3 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter3) = router Base   
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter3)"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 3 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method interface
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        
        #dest3 is reahable again
        log_msg INFO "\n Active dest is going up... \n"
         RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
         log_msg INFO "###########################"
        log_msg INFO " setup:  no router - dest3 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter4) = no router      
        set cmd "/configure filter redirect-policy wccp no router"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }    
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 3 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method interface
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        
        #dest3 is reachable again
        log_msg INFO "\n Active dest is going up... \n"
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        log_msg INFO "###########################"
        log_msg INFO " setup:  router VRF1 - dest1 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter) = router VRF1   
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter)"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        after 6000 
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 1 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest1 -dest1RC $opt(dest1RC) -method subnet
        RP_routeCheck del [ipConvert $family $R_primary] ""  -dest1RCtx $opt(dest1RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC) -method negative
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        
        
        #dest1 is reahable again
        log_msg INFO "\n Active dest is going up... \n"
        RP_act_dest dest1 -dest1RC $opt(dest1RC)
        RP_routeCheck add [ipConvert $family $R_primary] "" -dest1RCtx $opt(dest1RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest1Addr]  -RC $opt(dest1RC)
        
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest1Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter) [ip::normalize [ipConvert $family $dest1Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest1Addr] -RP_router $opt(RProuter) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter) $opt(dest1RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest1
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        

        
         log_msg INFO "###########################"
        log_msg INFO " setup:  router 20 - dest2 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter2) = router VRF2   
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter2)"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter2) $opt(dest2RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest2
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 2 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest2 -dest2RC $opt(dest2RC) -method subnet
        RP_routeCheck del "" [ipConvert $family $R_secondary] -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC) -method negative
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter2) $opt(dest2RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        
        
        #dest2 is reahable again
        log_msg INFO "\n Active dest is going up... \n"
        RP_act_dest dest2 -dest2RC $opt(dest2RC)
        RP_routeCheck add "" [ipConvert $family $R_secondary] -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
        
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter2) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest2
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        

        
        
         log_msg INFO "###########################"
        log_msg INFO " setup:  no router - dest3 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter4) = no router      
        set cmd "/configure filter redirect-policy wccp no router"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }    
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 3 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method interface
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        
        #dest3 is reachable again
        log_msg INFO "\n Active dest is going up... \n"
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        
        
        log_msg INFO "###########################"
        log_msg INFO " setup:  router 20 - dest2 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter2) = router VRF2   
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter2)"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter2) $opt(dest2RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest2
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 2 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest2 -dest2RC $opt(dest2RC) -method subnet
        RP_routeCheck del "" [ipConvert $family $R_secondary] -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC) -method negative
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter2) $opt(dest2RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        
        
        #dest2 is reahable again
        log_msg INFO "\n Active dest is going up... \n"
        RP_act_dest dest2 -dest2RC $opt(dest2RC)
        RP_routeCheck add "" [ipConvert $family $R_secondary] -dest2RCtx $opt(dest2RC)
        RP_DestReachablityCheck -addr [ipConvert $family $dest2Addr]  -RC $opt(dest2RC)
        
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest2Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter2) [ip::normalize [ipConvert $family $dest2Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest2Addr] -RP_router $opt(RProuter2) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter2) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest2
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        log_msg INFO "###########################"
        log_msg INFO " setup:  router Base - dest3 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter3) = router Base   
        set cmd "/configure filter redirect-policy wccp router $opt(RProuter3)"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 3 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method interface
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        
        #dest3 is reahable again
        log_msg INFO "\n Active dest is going up... \n"
         RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter3) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter3) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        
        log_msg INFO "#####################"
        log_msg INFO " vprn interaction"
        log_msg INFO "#####################"
        
        set cmdList ""
        lappend cmdList  "/configure service vprn 50 customer 1 create no shutdown"
        lappend cmdList  "/configure service vprn 100 customer 1 create no shutdown"
        lappend cmdList  "/configure service vprn 1550 customer 1 create no shutdown"
        foreach cmd $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
        log_msg INFO "###########################"
        log_msg INFO " setup:  router 50 - nothing reachable"
        log_msg INFO "###########################"        
        #opt(RProuter3) = router Base   
        set cmd "/configure filter redirect-policy wccp router 50"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0 
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest None -RP_router 50 -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family 0.0.0.0] -RP_router 50 -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        puts "\n\n"
        log_msg INFO "Vprn 50 deletion - CLI"
        cliCne Dut-$dut3 "/configure service vprn 50 shutdown"
        set cmd "/configure service no vprn 50"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            log_msg INFO "$errMsg"
            if {[regexp "MINOR: .*Cannot delete a VPRN used in a redirect policy" $errMsg] !=  "1"} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            } else {
                log_msg INFO "OK, vprn is not deleted via CLI"
            }
        
        log_msg INFO "Vprn 50 deletion - SNMP"
        set r [Dut-$dut3 setSvcAdminStatus 50 down]
            set testResultFlag [RP_CompareOutputString "noError" $r]
        set r [Dut-$dut3 setSvcRowStatus 50 destroy]
            set testResultFlag [RP_CompareOutputString "inconsistentValue" $r -ExtraString "Cannot delete a VPRN used in a redirect policy"]
        
        
         #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest None -RP_router 50 -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family 0.0.0.0] -RP_router 50 -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter3) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        puts "\n\n"
        log_msg INFO "Vprn 50 deletion - CLI"
        cliCne Dut-$dut3 "/configure service vprn 50 shutdown"
        cliCne Dut-$dut3 "/configure filter redirect-policy wccp no router"
        set cmd "/configure service no vprn 50"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if { $errMsg !=  ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
            
            
            
        log_msg INFO "###########################"
        log_msg INFO " setup:  no router - dest3 reachable"
        log_msg INFO "###########################"        
        #opt(RProuter4) = no router      
        set cmd "/configure filter redirect-policy wccp no router"
        log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }    
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
        
        
        #dest 3 is unreachable
        log_msg INFO "\n Active dest is going down... \n"
        RP_deact_dest dest3 -dest3RC $opt(dest3RC) -method interface
        
        RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family 0.0.0.0]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 "" "" -print true -findPBR 0
        RP_IomShellVerify 100 3 "" "" -print true -findPBR 0
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 webserver
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1

        RP_act_dest dest3 -dest3RC $opt(dest3RC)
        RP_linuxRoutes
        RP_DestReachablityCheck -addr [ipConvert $family $dest3Addr]  -RC $opt(dest3RC)
        
        #dest3 is reachable again
        log_msg INFO "\n Active dest is going up... \n"
            RP_ActiveDestReachabilityCheck [ip::normalize [ mibVal2Ip [ipConvert $family $dest3Addr]]] wccp -method [RP_lrandom "CLI SNMP"]              
        RP_verifyRPAssoc wccp "100-1 100-3"
        
        RP_IomShellVerify 100 1 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true
        RP_IomShellVerify 100 3 $opt(RProuter4) [ip::normalize [ipConvert $family $dest3Addr]] -print true   
         
        
        #checks of policies wccp
        log_msg INFO "Check of WCCP"
        RP_showCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state Up 
        RP_showCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state Up -oper_state Up -admin_priority 100 -oper_priority 100 -action_taken Enable
        RP_showCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        RP_showCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state Up -oper_state Down -admin_priority 100 -oper_priority 0 -action_taken Disable
        
        RP_snmpCheck wccp -RP_activeDest [ipConvert $family $dest3Addr] -RP_router $opt(RProuter4) -RP_state inService
        RP_snmpCheck wccp -dest [ipConvert $family $dest3Addr] -admin_state inService -oper_state inService -admin_priority 100 -oper_priority 100 -action_taken enable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest1Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        RP_snmpCheck wccp -dest [ipConvert $family $dest2Addr] -admin_state inService -oper_state outOfService -admin_priority 100 -oper_priority 0 -action_taken disable -HT $opt(HT)
        
        set streamDestBit [ RP_Set_streamDestBit $opt(svcType) $iom3 $opt(case) $opt(RProuter4) $opt(dest3RC) ]
        RP_clearFilter $dut3 $opt(dest3support) $opt(dest4support) -filterType $opt(filterType)
        #RP_verifyTrafficFlow $streamDestBit $streamIdList dest1   - it is enough to test stream 1
        RP_verifyTrafficFlow $streamDestBit 1 dest3
        RP_verifyPacketLoss $dut3 -dest3support $opt(dest3support) -dest4support $opt(dest4support) -filterType $opt(filterType) -host_filter_entry 1
             
        
        
        log_msg INFO "Deleting configuration"
        RP_rollbackCleanup $dut3
        saveOrRestore delete

        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
        log_result PASSED "Test Case $testID PASSED"
        } else {
        log_result FAILED "Test Case $testID FAILED"
        }
        return $Result 
            
        
}


proc filterWccpEnhancedCliDefaultInfo {} {
     
    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
    
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    set match ""
    
    set method [RP_lrandom "CLI SNMP"]
    if {$method == "CLI"} {
        set cmdList ""
        lappend cmdList "/configure filter redirect-policy wccp_ipv4 create"
        lappend cmdList "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.1 create"

        lappend cmdList "/configure filter redirect-policy wccp_ipv6 create"
        lappend cmdList "/configure filter redirect-policy wccp_ipv6 destination [ipConvert ipv6 15.15.4.1] create"
        
        foreach {cmd} $cmdList {
            log_msg INFO "Dut-$dut3 - $cmd"
            set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }
    } else {
         set r [Dut-$dut3 setTFilterRPRowStatus wccp_ipv4 createAndGo]
             set testResultFlag [RP_CompareOutputString "noError" $r] 
         set r [Dut-$dut3 setTFltrRPDstRowStatus wccp_ipv4 ipv4 15.15.4.1 createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
            
         set r [Dut-$dut3 setTFilterRPRowStatus wccp_ipv6 createAndGo]
             set testResultFlag [RP_CompareOutputString "noError" $r] 
         set r [Dut-$dut3 setTFltrRPDstRowStatus wccp_ipv6 ipv6 [ipConvert ipv6 15.15.4.1] createAndGo]
            set testResultFlag [RP_CompareOutputString "noError" $r]
    }
    
    
    #find if we support sticky in build
    set branch ""
    set stickyDest "false"
    set buildVersion [lindex [split [lindex [split [cookCliData [Dut-C sendCliCommand "show version"]] .] 0] "-"] 2 ]
    regexp "^(.).*" [lindex [split [lindex [cookCliData [Dut-C sendCliCommand "show version"]] 0] .] 2] match branch
    if { (($buildVersion == "13" ) && ($branch == "F")) || ($buildVersion == "0")  } { set stickyDest "true" }
    
    
    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO "Context - configure filter"
    log_msg INFO "##########################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *redirect-policy \"wccp_ipv4\" create\n *destination 15.15.4.1 create\n *exit\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *destination 3ffe:0:f0f:401:: create\n *exit\n *exit\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp { *redirect-policy \"wccp_ipv4\" create\n *no description\n *no router\n *destination 15.15.4.1 create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *no description\n *no router\n *destination 3ffe:0:f0f:401:: create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *exit\n} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp { *redirect-policy \"wccp_ipv4\" create\n *no description\n *no sticky-dest\n *no router\n *destination 15.15.4.1 create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *no description\n *no sticky-dest\n *no router\n *destination 3ffe:0:f0f:401:: create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *exit\n} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    
    }
    puts "\n\n"
    log_msg INFO "####################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv4"
    log_msg INFO "####################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv4"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *destination 15.15.4.1 create\n *exit\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\-\-*\n *no description\n *no router\n *destination 15.15.4.1 create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp {\-\-*\n *no description\n *no sticky-dest\n *no router\n *destination 15.15.4.1 create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    }
    
    puts "\n\n"
    log_msg INFO "####################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv6"
    log_msg INFO "####################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv6"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *destination 3ffe:0:f0f:401:: create\n *exit\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\-\-*\n *no description\n *no router\n *destination 3ffe:0:f0f:401:: create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp {\-\-*\n *no description\n *no sticky-dest\n *no router\n *destination 3ffe:0:f0f:401:: create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    }
     
    puts "\n\n"
    log_msg INFO "###########################################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv4 destination 15.15.4.1 "
    log_msg INFO "###########################################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.1"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if { [regexp {\-\-*\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO DETAIL... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
    }

    puts "\n\n"
    log_msg INFO "###########################################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv6 destination 3ffe:0:f0f:401:: "
    log_msg INFO "###########################################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv6 destination 3ffe:0:f0f:401::"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if { [regexp {\-\-*\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO DETAIL... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
    }

    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " admin display-config"
    log_msg INFO "##########################"
   
    log_msg INFO "Check default settings via admin display-config:"
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 sendCliCommand "environment no more"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "admin display-config"]]
    puts $cli
    if { [regexp {\#\-*\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\n *destination 15.15.4.1 create\n *exit\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *destination 3ffe:0:f0f:401:: create\n *exit\n *exit\n *exit.*?\n *\#\-*} $cli match] } {
        log_msg INFO "default settings via admin display-config... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin display-config... \t\t NOK"
    }
     
    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " admin save"
    log_msg INFO "##########################"
   
    set fileName "$config_dir/Dut-$dut3-default.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/saved_configs/Dut-$dut3-default.cfg" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    puts $cli
    if { [regexp {\#\-*\r\r\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *destination 15.15.4.1 create\r\r\n *exit\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *exit\r\r\n *exit\r\r\n *exit \r\r\n *\#\-*} $cli match] } {
        log_msg INFO "default settings via admin save... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin save... \t\t NOK"
    }
    

    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " admin save detail"
    log_msg INFO "##########################"
   
    set fileName "$config_dir/Dut-$dut3-default_Detail.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/saved_configs/Dut-$dut3-default_Detail.cfg" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    #puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\#\-*\r\r\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *no description\r\r\n *no router\r\r\n *destination 15.15.4.1 create\r\r\n *no description\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *shutdown\r\r\n *exit\r\r\n *shutdown\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *no description\r\r\n *no router\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *no description\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *shutdown\r\r\n *exit\r\r\n *shutdown\r\r\n *exit\r\r\n} $cli match] } {
            log_msg INFO "default settings via admin save detail... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via admin save detail... \t\t NOK"
        }
    } else {
        if { [regexp {\#\-*\r\r\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *no description\r\r\n *no sticky-dest\r\r\n *no router\r\r\n *destination 15.15.4.1 create\r\r\n *no description\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *shutdown\r\r\n *exit\r\r\n *shutdown\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *no description\r\r\n *no sticky-dest\r\r\n *no router\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *no description\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *shutdown\r\r\n *exit\r\r\n *shutdown\r\r\n *exit\r\r\n} $cli match] } {
            log_msg INFO "default settings via admin save detail... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via admin save detail... \t\t NOK"
        }
    }
    
    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " rollback"
    log_msg INFO "##########################"
    
    RP_rollbackSave $dut3 1
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/RP_rollback.rb" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    puts $cli
    if { [regexp {\#\-*\r\r\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *destination 15.15.4.1 create\r\r\n *exit\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *exit\r\r\n *exit\r\r\n *exit \r\r\n *\#\-*} $cli match] } {
        log_msg INFO "default settings via rollback save... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via rollback save... \t\t NOK"
    }
  
    
    
    puts "\n\n"    
    log_msg INFO "##########################"
    log_msg INFO " enable RP, enable RP dest, add RP description, add RP dest description"
    log_msg INFO "##########################"
    
    set cmdList ""
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 create router Base"
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 description \"Main IPv4 policy\""
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.1 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.1 description \"primary ip dest\""

    lappend cmdList "/configure filter redirect-policy wccp_ipv6 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 create router Base"
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 description \"Main IPv6 policy\""
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 destination [ipConvert ipv6 15.15.4.1] create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 destination [ipConvert ipv6 15.15.4.1] description \"primary ipv6 dest\""
    
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }
    
    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO "Context - configure filter"
    log_msg INFO "##########################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *redirect-policy \"wccp_ipv4\" create\n *description \"Main IPv4 policy\" \n *router \"Base\"\n *destination 15.15.4.1 create\n *description \"primary ip dest\"\n *no shutdown\n *exit\n *no shutdown\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *description \"Main IPv6 policy\" \n *router \"Base\"\n *destination 3ffe:0:f0f:401:: create\n *description \"primary ipv6 dest\"\n *no shutdown\n *exit\n *no shutdown\n *exit\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
     
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\n *redirect-policy \"wccp_ipv4\" create\n *description \"Main IPv4 policy\" \n *router \"Base\"\n *destination 15.15.4.1 create\n *description \"primary ip dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *exit\n *no shutdown\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *description \"Main IPv6 policy\" \n *router \"Base\"\n *destination 3ffe:0:f0f:401:: create\n *description \"primary ipv6 dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *exit\n *no shutdown\n *exit\n} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp {\n *redirect-policy \"wccp_ipv4\" create\n *description \"Main IPv4 policy\" \n *no sticky-dest\n *router \"Base\"\n *destination 15.15.4.1 create\n *description \"primary ip dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *exit\n *no shutdown\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *description \"Main IPv6 policy\" \n *no sticky-dest\n *router \"Base\"\n *destination 3ffe:0:f0f:401:: create\n *description \"primary ipv6 dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *exit\n *no shutdown\n *exit\n} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    }
    puts "\n\n"
    log_msg INFO "####################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv4"
    log_msg INFO "####################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv4"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *description \"Main IPv4 policy\" \n *router \"Base\"\n *destination 15.15.4.1 create\n *description \"primary ip dest\"\n *no shutdown\n *exit\n *no shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\-\-*\n *description \"Main IPv4 policy\" \n *router \"Base\"\n *destination 15.15.4.1 create\n *description \"primary ip dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *exit\n *no shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp {\-\-*\n *description \"Main IPv4 policy\" \n *no sticky-dest\n *router \"Base\"\n *destination 15.15.4.1 create\n *description \"primary ip dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *exit\n *no shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    }
    
    puts "\n\n"
    log_msg INFO "####################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv6"
    log_msg INFO "####################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv6"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *description \"Main IPv6 policy\" \n *router \"Base\"\n *destination 3ffe:0:f0f:401:: create\n *description \"primary ipv6 dest\"\n *no shutdown\n *exit\n *no shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\-\-*\n *description \"Main IPv6 policy\" \n *router \"Base\"\n *destination 3ffe:0:f0f:401:: create\n *description \"primary ipv6 dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *exit\n *no shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp {\-\-*\n *description \"Main IPv6 policy\" \n *no sticky-dest\n *router \"Base\"\n *destination 3ffe:0:f0f:401:: create\n *description \"primary ipv6 dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *exit\n *no shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    }    
 
     
    puts "\n\n"
    log_msg INFO "###########################################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv4 destination 15.15.4.1 "
    log_msg INFO "###########################################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.1"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *description \"primary ip dest\"\n *no shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if { [regexp {\-\-*\n *description \"primary ip dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO DETAIL... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
    }

    puts "\n\n"
    log_msg INFO "###########################################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv6 destination 3ffe:0:f0f:401:: "
    log_msg INFO "###########################################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv6 destination 3ffe:0:f0f:401::"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
     if { [regexp {\-\-*\n *description \"primary ipv6 dest\"\n *no shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if { [regexp {\-\-*\n *description \"primary ipv6 dest\"\n *priority 100\n *no unicast-rt-test\n *no shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO DETAIL... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
    }

    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " admin display-config" 
    log_msg INFO "##########################"
   
    log_msg INFO "Check default settings via admin display-config:"
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 sendCliCommand "environment no more"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "admin display-config"]]
    puts $cli
    if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\n *description \"Main IPv4 policy\" \n *destination 15.15.4.1 create\n *description \"primary ip dest\"\n *no shutdown\n *exit\n *no shutdown\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *description \"Main IPv6 policy\" \n *destination 3ffe:0:f0f:401:: create\n *description \"primary ipv6 dest\"\n *no shutdown\n *exit\n *no shutdown\n *exit\n *exit.*?\n} $cli match] } {
        log_msg INFO "default settings via admin display-config part1... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin display-config part1... \t\t NOK"
    }
    if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\n *router \"Base\"\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *router \"Base\".*\n *exit\n *exit\n} $cli match] } {
        log_msg INFO "default settings via admin display-config part2... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin display-config part2... \t\t NOK"
    }
     
     
    puts "\n\n" 
    
    log_msg INFO "##########################"
    log_msg INFO " admin save"
    log_msg INFO "##########################"
   
    set fileName "$config_dir/Dut-$dut3-default.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/saved_configs/Dut-$dut3-default.cfg" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    puts $cli
    if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *description \"Main IPv4 policy\" \r\r\n *destination 15.15.4.1 create\r\r\n *description \"primary ip dest\"\r\r\n *no shutdown\r\r\n *exit\r\r\n *no shutdown\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *description \"Main IPv6 policy\" \r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *description \"primary ipv6 dest\"\r\r\n *no shutdown\r\r\n *exit\r\r\n *no shutdown\r\r\n *exit\r\r\n *exit.*?\r\r\n} $cli match] } {
        log_msg INFO "default settings via admin save part1... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin save part1... \t\t NOK"
    }
    if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *router \"Base\"\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *router \"Base\".*\r\r\n *exit\r\r\n *exit\r\r\n} $cli match] } {
        log_msg INFO "default settings via admin save part2... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin save part2... \t\t NOK"
    }
    
    puts "\n\n"
 
    log_msg INFO "##########################"
    log_msg INFO " admin save detail"
    log_msg INFO "##########################"
   
    set fileName "$config_dir/Dut-$dut3-default_Detail.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/saved_configs/Dut-$dut3-default_Detail.cfg" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    #puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *description \"Main IPv4 policy\" \r\r\n *destination 15.15.4.1 create\r\r\n *description \"primary ip dest\"\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *no shutdown\r\r\n *exit\r\r\n *no shutdown\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *description \"Main IPv6 policy\" \r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *description \"primary ipv6 dest\"\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *no shutdown\r\r\n *exit\r\r\n *no shutdown\r\r\n *exit\r\r\n} $cli match] } {
            log_msg INFO "default settings via admin save part1... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via admin save part1... \t\t NOK"
        }
    } else {
        if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *description \"Main IPv4 policy\" \r\r\n *no sticky-dest\r\r\n *destination 15.15.4.1 create\r\r\n *description \"primary ip dest\"\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *no shutdown\r\r\n *exit\r\r\n *no shutdown\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *description \"Main IPv6 policy\" \r\r\n *no sticky-dest\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *description \"primary ipv6 dest\"\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *no shutdown\r\r\n *exit\r\r\n *no shutdown\r\r\n *exit\r\r\n} $cli match] } {
            log_msg INFO "default settings via admin save part1... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via admin save part1... \t\t NOK"
        }
    }
    if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *router \"Base\"\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *router \"Base\".*\r\r\n *exit\r\r\n *exit\r\r\n} $cli match] } {
        log_msg INFO "default settings via admin save part2... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin save part2... \t\t NOK"
    }
    

    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " rollback"
    log_msg INFO "##########################"
    
    RP_rollbackSave $dut3 2
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/RP_rollback.rb" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    puts $cli
    if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *description \"Main IPv4 policy\" \r\r\n *destination 15.15.4.1 create\r\r\n *description \"primary ip dest\"\r\r\n *no shutdown\r\r\n *exit\r\r\n *no shutdown\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *description \"Main IPv6 policy\" \r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *description \"primary ipv6 dest\"\r\r\n *no shutdown\r\r\n *exit\r\r\n *no shutdown\r\r\n *exit\r\r\n *exit.*?\r\r\n} $cli match] } {
        log_msg INFO "default settings via admin save part1... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin save part1... \t\t NOK"
    }
    if { [regexp {\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *router \"Base\"\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *router \"Base\".*\r\r\n *exit\r\r\n *exit\r\r\n} $cli match] } {
        log_msg INFO "default settings via admin save part2... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin save part2... \t\t NOK"
    }
  
    
    puts "\n\n"
    
    log_msg INFO "##########################"
    log_msg INFO " deconfig to default"
    log_msg INFO "##########################"
 
    RP_rollbackRestore $dut3 "1"
    
    
    
   puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO "Context - configure filter"
    log_msg INFO "##########################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *redirect-policy \"wccp_ipv4\" create\n *destination 15.15.4.1 create\n *exit\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *destination 3ffe:0:f0f:401:: create\n *exit\n *exit\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp { *redirect-policy \"wccp_ipv4\" create\n *no description\n *no router\n *destination 15.15.4.1 create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *no description\n *no router\n *destination 3ffe:0:f0f:401:: create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *exit\n} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp { *redirect-policy \"wccp_ipv4\" create\n *no description\n *no sticky-dest\n *no router\n *destination 15.15.4.1 create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *no description\n *no sticky-dest\n *no router\n *destination 3ffe:0:f0f:401:: create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *exit\n} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    
    }
    puts "\n\n"
    log_msg INFO "####################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv4"
    log_msg INFO "####################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv4"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *destination 15.15.4.1 create\n *exit\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\-\-*\n *no description\n *no router\n *destination 15.15.4.1 create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp {\-\-*\n *no description\n *no sticky-dest\n *no router\n *destination 15.15.4.1 create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    }
    
    puts "\n\n"
    log_msg INFO "####################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv6"
    log_msg INFO "####################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv6"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *destination 3ffe:0:f0f:401:: create\n *exit\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\-\-*\n *no description\n *no router\n *destination 3ffe:0:f0f:401:: create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    } else {
        if { [regexp {\-\-*\n *no description\n *no sticky-dest\n *no router\n *destination 3ffe:0:f0f:401:: create\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *exit\n *shutdown\n *\-\-*} $cli match] } {
            log_msg INFO "default settings via INFO DETAIL... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
        }
    }
     
    puts "\n\n"
    log_msg INFO "###########################################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv4 destination 15.15.4.1 "
    log_msg INFO "###########################################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv4 destination 15.15.4.1"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if { [regexp {\-\-*\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO DETAIL... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
    }

    puts "\n\n"
    log_msg INFO "###########################################################################"
    log_msg INFO "Context - configure filter redirect-policy wccp_ipv6 destination 3ffe:0:f0f:401:: "
    log_msg INFO "###########################################################################"
    
    log_msg INFO "Check default settings via INFO:"
    Dut-$dut3 sendCliCommand "/configure filter redirect-policy wccp_ipv6 destination 3ffe:0:f0f:401::"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info"]]
    puts $cli
    if { [regexp {\-\-*\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO... \t\t NOK"
    }
    
    puts "\n\n"
    log_msg INFO "Check default settings via INFO DETAIL:"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "info detail"]]
    puts $cli
    if { [regexp {\-\-*\n *no description\n *priority 100\n *no unicast-rt-test\n *shutdown\n *\-\-*} $cli match] } {
        log_msg INFO "default settings via INFO DETAIL... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via INFO DETAIL... \t\t NOK"
    }

    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " admin display-config"
    log_msg INFO "##########################"
   
    log_msg INFO "Check default settings via admin display-config:"
    Dut-$dut3 sendCliCommand "exit all"
    Dut-$dut3 sendCliCommand "environment no more"
    set cli [cookCliData [Dut-$dut3 sendCliCommand "admin display-config"]]
    puts $cli
    if { [regexp {\#\-*\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\n *destination 15.15.4.1 create\n *exit\n *exit\n *redirect-policy \"wccp_ipv6\" create\n *destination 3ffe:0:f0f:401:: create\n *exit\n *exit\n *exit.*?\n *\#\-*} $cli match] } {
        log_msg INFO "default settings via admin display-config... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin display-config... \t\t NOK"
    }
     
    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " admin save"
    log_msg INFO "##########################"
   
    set fileName "$config_dir/Dut-$dut3-default.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/saved_configs/Dut-$dut3-default.cfg" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    puts $cli
    if { [regexp {\#\-*\r\r\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *destination 15.15.4.1 create\r\r\n *exit\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *exit\r\r\n *exit\r\r\n *exit \r\r\n *\#\-*} $cli match] } {
        log_msg INFO "default settings via admin save... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via admin save... \t\t NOK"
    }
    

    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " admin save detail"
    log_msg INFO "##########################"
   
    set fileName "$config_dir/Dut-$dut3-default_Detail.cfg"
    log_msg INFO "saving config into $fileName"
    Dut-$dut3 sendCliCommand "exit all"
    set CLI [cookCliData [ Dut-$dut3 sendCliCommand "/admin save detail $fileName" -extendedTimeout 60  -extendedMatchString "#" ]]
    set SC [ string first "Completed" $CLI ]
    if { $SC < 1 } {
        log_msg DEBUG "$CLI"
        log_msg ERROR "Save of $fileName FAILED - Was $SC And Should Be >= 1"
        set Result FAILED   
    } else  {
        log_msg INFO "admin save of active config Successful"
    }
    
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/saved_configs/Dut-$dut3-default_Detail.cfg" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    #puts $cli
    if {$stickyDest == "false"} {
        if { [regexp {\#\-*\r\r\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *no description\r\r\n *no router\r\r\n *destination 15.15.4.1 create\r\r\n *no description\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *shutdown\r\r\n *exit\r\r\n *shutdown\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *no description\r\r\n *no router\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *no description\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *shutdown\r\r\n *exit\r\r\n *shutdown\r\r\n *exit\r\r\n} $cli match] } {
            log_msg INFO "default settings via admin save detail... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via admin save detail... \t\t NOK"
        }
    } else {
        if { [regexp {\#\-*\r\r\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *no description\r\r\n *no sticky-dest\r\r\n *no router\r\r\n *destination 15.15.4.1 create\r\r\n *no description\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *shutdown\r\r\n *exit\r\r\n *shutdown\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *no description\r\r\n *no sticky-dest\r\r\n *no router\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *no description\r\r\n *priority 100\r\r\n *no unicast-rt-test\r\r\n *shutdown\r\r\n *exit\r\r\n *shutdown\r\r\n *exit\r\r\n} $cli match] } {
            log_msg INFO "default settings via admin save detail... \t\t OK"
        } else {
            set Result FAILED
            log_msg ERROR "default settings via admin save detail... \t\t NOK"
        }
    }
    
    puts "\n\n"
    log_msg INFO "##########################"
    log_msg INFO " rollback"
    log_msg INFO "##########################"
    
    RP_rollbackSave $dut3 1
    
    set linux [becomeRootUser]
    set cli [unixCommand $linux "cat $logdir/device_logs/RP_rollback.rb" -matchPrompt "root@${username} ~]#" -verbose true -timeout 10]
    closeRootUser $linux
    puts $cli
    if { [regexp {\#\-*\r\r\n *filter.*?\n *redirect-policy \"wccp_ipv4\" create\r\r\n *destination 15.15.4.1 create\r\r\n *exit\r\r\n *exit\r\r\n *redirect-policy \"wccp_ipv6\" create\r\r\n *destination 3ffe:0:f0f:401:: create\r\r\n *exit\r\r\n *exit\r\r\n *exit \r\r\n *\#\-*} $cli match] } {
        log_msg INFO "default settings via rollback save... \t\t OK"
    } else {
        set Result FAILED
        log_msg ERROR "default settings via rollback save... \t\t NOK"
    }
  
    puts "\n\n"
    log_msg INFO "Deleting configuration"
    RP_rollbackCleanup $dut3
    saveOrRestore delete

    log_msg INFO "[exec date]"
    # ---- Common end for regression
    if { $Result == "PASSED" } {
    log_result PASSED "Test Case $testID PASSED"
    } else {
    log_result FAILED "Test Case $testID FAILED"
    }
    return $Result 

}


proc filterWccpEnhancedRestrictions {} {
    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    #source $testdir/testsuites/filter/tests/wccp_enhanced.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl   
    
    
    set testID $::TestDB::currentTestCase
    set username $::TestDB::thisTestBed
    set hostIp $::TestDB::thisHostIpAddr
    set dir         "ftp://${username}:tigris@${hostIp}/$logdir/device_logs"
    set config_dir  "ftp://${username}:tigris@${hostIp}/$logdir/device_logs/saved_configs"
    set Result PASSED
    set testResultFlag OK
    
    set cmdList ""
    lappend cmdList "/configure service vprn 10 customer 1 create no shutdown"
    lappend cmdList "/configure service vprn 20 customer 1 create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 create no shutdown" 
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 create destination [ipConvert ipv4 $dest1Addr] create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv4 create destination [ipConvert ipv4 $dest2Addr] create no shutdown"
    
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 create no shutdown" 
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 create destination [ipConvert ipv6 $dest1Addr] create no shutdown"
    lappend cmdList "/configure filter redirect-policy wccp_ipv6 create destination [ipConvert ipv6 $dest2Addr] create no shutdown"
    foreach {cmd} $cmdList {
        log_msg INFO "Dut-$dut3 - $cmd"
        set errMsg [ cookCliData [ Dut-$dut3 sendCliCommand $cmd] ]
        if {$errMsg != ""} { 
            log_msg ERROR "Dut-$dut3: error for CLI-command $cmd - $errMsg" 
            set Result "ERROR"
        }
    }    
    
foreach "filterType family" "IP ipv4 IPv6 Ipv6" {    
    puts "\n\n" 
    log_msg INFO "################################################"
    log_msg INFO " restrictions for $filterType"
    log_msg INFO "################################################"
    
    
    foreach method "SNMP CLI" {
        puts "\n\n"
        log_msg INFO "Verifications of restrictions with method - $method"
        
        if {$filterType == "IP"} {
            log_msg INFO "opening file $testdir/testsuites/filter/tests/wccp_enhanced_CLI_SNMP_params.tcl"
            set readFileName           $testdir/testsuites/filter/tests/wccp_enhanced_CLI_SNMP_params.tcl
        } else {
            log_msg INFO "opening file $testdir/testsuites/filter/tests/wccp_enhanced_CLI_SNMP_params_ipv6.tcl"
            set readFileName           $testdir/testsuites/filter/tests/wccp_enhanced_CLI_SNMP_params_ipv6.tcl
        }
        set readFile [open $readFileName "r"]
                 
                    
                    # set Error_test [lindex $line 3] 
                    # if {[llength $line]==5} {lappend Error_test [lindex $line 4] }
                    # log_msg INFO "unsupported test within \"[lindex $line 1]\": \t $Error_test"
        
        
        while { [gets $readFile line] != -1  } {
            if {[regexp Vrtr $line] == "1"} {
                    log_msg INFO "\n\n#################################################################"
                    set Error_test [lindex $line 3] 
                    if {[llength $line]==5} {lappend Error_test [lindex $line 4] }
                    log_msg INFO "unsupported test within \"[lindex $line 1]\": \t $Error_test"
            } elseif { $line == ""} { 
                    #do nothing and skip the line
            } else {
                puts "#####################################################################################"
                log_msg DEBUG "input parameters:\n"
                puts "Router      dest1           dest2           RP_NaN  RP_Base RP_VRF1 RP_VRF2 10  20  1   ping    url     snmp    unicast"
                puts "$line"
                puts "-----------------------------------------------------------------------------------------------------------------------\n"

 
                 #initial
                RP_setVrtrID [lindex $line 0] wccp_[string tolower $family] $method  
                RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0]]
                RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]
                RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]
                
                if {$filterType == "IPv6"} {
                    if { [regexp [lindex $line 1] $Error_test] == "1"} {
                            RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] [lindex $line 1] $method -result DENY
                            RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected none
                            RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected "none"
                            RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected "none"
                    } else {
                        RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] [lindex $line 1] $method 
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1]]
                    }
                    
                    if {[regexp [lindex $line 2] $Error_test] == "1"} {
                            RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 20.20.20.2] [lindex $line 2] $method -result DENY
                            RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest2Addr] -expected none
                            RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method CLI -expected "none"
                            RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method SNMP -expected "none"
                    } else {
                        RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 20.20.20.2] [lindex $line 2] $method
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest2Addr] -expected [RP_testConvert [lindex $line 2]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method CLI -expected [RP_testConvert [lindex $line 2]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method SNMP -expected [RP_testConvert [lindex $line 2]]    
                    }
                } 
                

                if {$filterType == "IP"} {
                    if {[lindex $line 1] == $Error_test} {
                        if {$Error_test == "URL_SNMP_test"} { 
                            RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] [lindex $line 1] $method -result DENY_3
                        } else {
                            RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] [lindex $line 1] $method -result DENY
                        }
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected none
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected "none"
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected "none"
                    } else {
                        RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] [lindex $line 1] $method
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1]]
                    }
                    if {[lindex $line 2] == $Error_test} {
                        if {$Error_test == "URL_SNMP_test"} { 
                            RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest2Addr] [lindex $line 2] $method -result DENY_3
                        } else {
                            RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest2Addr] [lindex $line 2] $method -result DENY
                        }
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest2Addr] -expected none 
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method CLI -expected "none"
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method SNMP -expected "none"
                    } else { 
                        RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest2Addr] [lindex $line 2] $method
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest2Addr] -expected [RP_testConvert [lindex $line 2]]    
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method CLI -expected [RP_testConvert [lindex $line 2]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method SNMP -expected [RP_testConvert [lindex $line 2]]                
                    }
                } 
                #set VrtrIds
                if {[lindex $line 3] != "NA"} { 
                        RP_setVrtrID no_router wccp_[string tolower $family] $method -result [lindex $line 3]
                        RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0] -router2 no_router -result2 [lindex $line 3]]
                        RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0] -router2 no_router -result2 [lindex $line 3]]
                        RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0] -router2 no_router -result2 [lindex $line 3]]
                    }
                    if {[lindex $line 3] == "noError"} { 
                        RP_setVrtrID [lindex $line 0] wccp_[string tolower $family] $method -result [lindex $line 3]
                        RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0]]
                        RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]
                        RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]] 
                    }
                if {[lindex $line 4] != "NA"} { 
                        RP_setVrtrID Base wccp_[string tolower $family] $method -result [lindex $line 4]
                        RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0] -router2 Base -result2 [lindex $line 4]]
                        RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0] -router2 Base -result2 [lindex $line 4]]
                        RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0] -router2 Base -result2 [lindex $line 4]]
                    }
                    if {[lindex $line 4] == "noError"} { 
                        RP_setVrtrID [lindex $line 0] wccp_[string tolower $family] $method -result [lindex $line 4]
                        RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0]]
                        RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]
                        RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]
                    }
                if {[lindex $line 5] != "NA"} { 
                        RP_setVrtrID VRF1 wccp_[string tolower $family] $method -result [lindex $line 5]
                        RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0] -router2 VRF1 -result2 [lindex $line 5]]
                        RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0] -router2 VRF1 -result2 [lindex $line 5]]
                        RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0] -router2 VRF1 -result2 [lindex $line 5]]
                    }
                    if {[lindex $line 5] == "noError"} {
                        RP_setVrtrID [lindex $line 0] wccp_[string tolower $family] $method -result [lindex $line 5]
                        RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0]]
                        RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]
                        RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]] 
                    }
                if {[lindex $line 6] != "NA"} { 
                        RP_setVrtrID VRF2 wccp_[string tolower $family] $method -result [lindex $line 6]
                        RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0] -router2 VRF2 -result2 [lindex $line 6]]
                        RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0] -router2 VRF2 -result2 [lindex $line 6]]
                        RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0] -router2 VRF2 -result2 [lindex $line 6]]
                    }
                    if {[lindex $line 6] == "noError"} { 
                        RP_setVrtrID [lindex $line 0] wccp_[string tolower $family] $method -result [lindex $line 6]
                        RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0]]
                        RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]
                        RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]      
                    }
                    
                 #lindex 7
                 #lindex 8
                 #lindex 9
                 
                if {[lindex $line 10] != "NA"} { 
                    RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] ping_test $method -add_test true -result [lindex $line 10]
                    RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1] -test2 ping -result2 [lindex $line 10]]
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1] -test2 ping -result2 [lindex $line 10]]
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1] -test2 ping -result2 [lindex $line 10]]
                }
                    if {[lindex $line 10] == "noError"} { 
                        RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] [lindex $line 1] $method -result [lindex $line 10]
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1]]
                    }
                if {[lindex $line 11] != "NA"} { 
                    RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] url_test $method -add_test true -result [lindex $line 11]
                    RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1] -test2 url -result2 [lindex $line 11]]
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1] -test2 url -result2 [lindex $line 11]]
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1] -test2 url -result2 [lindex $line 11]]
                }
                    if {[lindex $line 11] == "noError"} { 
                        RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] [lindex $line 1] $method -result [lindex $line 11]
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1]]
                    }
                if {[lindex $line 12] != "NA"} { 
                    RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] snmp_test $method -add_test true -result [lindex $line 12]
                    RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1] -test2 snmp -result2 [lindex $line 12]]
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1] -test2 snmp -result2 [lindex $line 12]]
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1] -test2 snmp -result2 [lindex $line 12]]
                }
                    if {[lindex $line 12] == "noError"} { 
                        RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] [lindex $line 1] $method -result [lindex $line 12]
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1]]
                    }
                if {[lindex $line 13] != "NA"} { 
                    RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] unicast_test $method -add_test true -result [lindex $line 13]
                    RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1] -test2 unicast -result2 [lindex $line 13]]
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1] -test2 unicast -result2 [lindex $line 13]]
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1] -test2 unicast -result2 [lindex $line 13]]
                }
                    if {[lindex $line 13] == "noError"} { 
                        RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] [lindex $line 1] $method -result [lindex $line 13]
                        RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected [RP_testConvert [lindex $line 1]]
                        RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected [RP_testConvert [lindex $line 1]]
                    }
             
                RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest1Addr] no_test $method
                    RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest1Addr] -expected none
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method CLI -expected none
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest1Addr] -method SNMP -expected none
                RP_setTest wccp_[string tolower $family] [string tolower $family] [ipConvert $family $dest2Addr] no_test $method  
                    RP_infoCheck wccp_[string tolower $family] -dest [ipConvert $family $dest2Addr] -expected none                
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method CLI -expected none
                    RP_testCheckPresence wccp_[string tolower $family] [ipConvert $family $dest2Addr] -method SNMP -expected none
                RP_setVrtrID [lindex $line 0] wccp_[string tolower $family] $method
                    RP_infoCheck wccp_[string tolower $family] -router [RP_routerConvert [lindex $line 0]]
                    RP_showCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]
                    RP_snmpCheck wccp_[string tolower $family] -RP_router [RP_routerConvert [lindex $line 0]]      
                puts "#####################################################################################"
                puts "\n\n"
                
                gash_interpreter
            }
        }
        set op [close $readFile]
    }
}   
   # puts "\n\n" 
   # log_msg INFO "################################################"
   # log_msg INFO " restrictions for IPv6"
   # log_msg INFO "################################################" 
    
   # foreach method "SNMP CLI" {
        # puts "\n\n"
        # log_msg INFO "Verifications of restrictions with method - $method"
        
        # set readFileName $testdir/testsuites/filter/tests/wccp_enhanced_CLI_SNMP_params_ipv6.tcl
        # set readFile [open $readFileName "r"]
        
        # while { [gets $readFile line] != -1  } {
            
            # if {[regexp Vrtr $line] == "1"} {
                    # log_msg INFO "\n\n#################################################################"
                    
                    # set Error_test [lindex $line 3] 
                    # if {[llength $line]==5} {lappend Error_test [lindex $line 4] }
                    # log_msg INFO "unsupported test within \"[lindex $line 1]\": \t $Error_test"
            # } elseif { $line == ""} { 
                    # #do nothing
            # } else {
                # puts "#####################################################################################"
                # log_msg DEBUG "input parameters:\n"
                # puts "Router      dest1           dest2           RP_NaN  RP_Base RP_VRF1 RP_VRF2 10  20  1   ping    url     snmp    unicast"
                # puts "$line"
                # puts "-----------------------------------------------------------------------------------------------------------------------\n"
                
                # #initial
                # RP_setVrtrID [lindex $line 0] wccp_ipv6 $method
                # if { [regexp [lindex $line 1] $Error_test] == "1"} {
                        # RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] [lindex $line 1] $method -result DENY
                # } else {RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] [lindex $line 1] $method }
                
                # if {[regexp [lindex $line 2] $Error_test] == "1"} {
                        # RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 20.20.20.2] [lindex $line 2] $method -result DENY
                # } else {RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 20.20.20.2] [lindex $line 2] $method}
                
                
                # #set VrtrIds
                # if {[lindex $line 3] != "NA"} { RP_setVrtrID no_router wccp_ipv6 $method -result [lindex $line 3]}
                    # if {[lindex $line 3] == "noError"} { RP_setVrtrID [lindex $line 0] wccp_ipv6 $method -result [lindex $line 3]}
                # if {[lindex $line 4] != "NA"} { RP_setVrtrID Base wccp_ipv6 $method -result [lindex $line 4]}
                    # if {[lindex $line 4] == "noError"} { RP_setVrtrID [lindex $line 0] wccp_ipv6 $method -result [lindex $line 4]}
                # if {[lindex $line 5] != "NA"} { RP_setVrtrID VRF1 wccp_ipv6 $method -result [lindex $line 5]}
                    # if {[lindex $line 5] == "noError"} { RP_setVrtrID [lindex $line 0] wccp_ipv6 $method -result [lindex $line 5]}
                # if {[lindex $line 6] != "NA"} { RP_setVrtrID VRF2 wccp_ipv6 $method -result [lindex $line 6]}
                    # if {[lindex $line 6] == "noError"} { RP_setVrtrID [lindex $line 0] wccp_ipv6 $method -result [lindex $line 6]}
                    
                 # #lindex 7
                 # #lindex 8
                 # #lindex 9
                 
                # if {[lindex $line 10] != "NA"} { RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] ping_test $method -add_test true -result [lindex $line 10]}
                    # if {[lindex $line 10] == "noError"} { RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] [lindex $line 1] $method -result [lindex $line 10]}
                # if {[lindex $line 11] != "NA"} { RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] url_test $method -add_test true -result [lindex $line 11]}
                    # if {[lindex $line 11] == "noError"} { RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] [lindex $line 1] $method -result [lindex $line 11]}
                # if {[lindex $line 12] != "NA"} { RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] snmp_test $method -add_test true -result [lindex $line 12]}
                    # if {[lindex $line 12] == "noError"} { RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] [lindex $line 1] $method -result [lindex $line 12]}
                # if {[lindex $line 13] != "NA"} { RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] unicast_test $method -add_test true -result [lindex $line 13]}
                    # if {[lindex $line 13] == "noError"} { RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] [lindex $line 1] $method -result [lindex $line 13]}
             
                # RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 10.10.10.2] no_test $method
                # RP_setTest wccp_ipv6 ipv6 [ipConvert ipv6 20.20.20.2] no_test $method
                # RP_setVrtrID [lindex $line 0] wccp_ipv6 $method
                
                # gash_interpreter
            # }
        # }
        # set op [close $readFile] 
    # }
    
    log_msg INFO "Deleting configuration"
        saveOrRestore delete
        
        log_msg INFO "[exec date]"
        # ---- Common end for regression
        if { $Result == "PASSED" } {
            log_result PASSED "Test Case $testID PASSED"
        } else {
            log_result FAILED "Test Case $testID FAILED"
        }
        return $Result  

}


proc filterWccpEnhancedQPPB { args } {

  global masterlog testdir ixia_port logdir Result testResultFlag
  global portA dataip rollbackLocation

  source $testdir/testsuites/flowspec/flowspec_vprnParams.tcl
  source $testdir/testsuites/flowspec/flowspec_Procs.tcl
  source $testdir/testsuites/bgp/qppb/qppb_params.tcl
  source $testdir/testsuites/filter/tests/wccp_procs.tcl
  source $testdir/testsuites/filter/filter_actionFwdRtr_procs.tcl

  set option(config) true
  set option(test) true
  set option(deconfig) true
  set option(debug) false
  set option(verbose) false
  set option(bugxxxxx) false
  set option(returnResult) false
  set option(sbgpDebug) false
  set option(dumpDebugLog) false
  set option(cliTimeout) 600
  set option(maxRetryCnt) 6
  set option(interRetryTimeSec) 30
  set option(addDefFilterInFirstVprnBeforeFlowroutesAreInjected) true
  set option(addDefFilterInLastVprnAfterFlowroutesAreInjected) true
  set option(nbrVprns) 3
  set option(nbrFlowroutesPerVprn) 1
  set option(actionListPerVprn) [list redirectVrf]
  set option(enableFilterTrace) false
  set option(enableBgpFlowspecTrace) false
  set option(sendBgpPrefixUpd_v4) false
  set option(sendBgpPrefixUpd_v6) false
  set option(sendBgpFlowrouteUpd_v4) true
  set option(sendBgpFlowrouteUpd_v6) true
  set option(family)         "ipv4"
  set option(sendTraffic_v4) true
  set option(sendTraffic_v6) true
  set option(enableIngressFlowspec_v4) false
  set option(enableIngressFlowspec_v6) false
  set option(flowspecInteraction) false
  set option(vrfTargetDirectUnderVprn_noImportPolicy) true
  set option(enableFlowspecBeforeFlowroutesAreInjected) false
  # spoke (flowroute vprn)
  set option(itfType_dut1dut2) ""
  set option(addFlowroutesInBase) true

  # maxNbrIterations | maxDuration [hours] | ifFileExists
  set option(iterationMethod) maxNbrIterations
  set option(maxNbrIterations) 1
  set option(maxDurationHrs) 5
  set option(fileExistsName) "/tmp/fwdRtrVprn_running.txt"

  # vrfToVrf | grtToVrf | vrfToGrt
  set option(redirectType)     "vrfToVrf"
  set option(verifySwo)     "false"
  set option(ecmpEnabled)     "false"
  # there are 4 combinations
  #   autobind - ldp (default)
  #   autobind - gre
  #   sdp - rsvp
  #   sdp - gre
  set option(redirectVprnTunnelMethod) autobind
  set option(redirectVprnTunnelEncap) ldp

  set option(grtLookupEnableGrt) false
  getopt option      $args

  if {$option(family) == "ipv4"} {
      set option(sendTraffic_v4) true
      set option(sendTraffic_v6) false
  }  else {
      set option(sendTraffic_v4) false
      set option(sendTraffic_v6) true
  }

  set testID $::TestDB::currentTestCase
  set Result OK
  set testResultFlag OK

  testcaseHeader

  ##### Testcase GGV paramerters (begin)
  if {[GGV fspecNbrVprns] != "ERROR"} {
    set nbrVprns [GGV fspecNbrVprns]
  } else {
    set nbrVprns $option(nbrVprns)
  }
  if {[GGV fspecNbrFlowroutesPerVprn] != "ERROR"} {
    set nbrFlowroutesPerVprn [GGV fspecNbrFlowroutesPerVprn]
  } else {
    set nbrFlowroutesPerVprn $option(nbrFlowroutesPerVprn)
  }
  if {[GGV fspecEnableFilterTrace] != "ERROR"} {
    set enableFilterTrace [GGV fspecEnableFilterTrace]
  } else {
    set enableFilterTrace $option(enableFilterTrace)
  }
  if {[GGV fspecEnableBgpFlowspecTrace] != "ERROR"} {
    set enableBgpFlowspecTrace [GGV fspecEnableBgpFlowspecTrace]
  } else {
    set enableBgpFlowspecTrace $option(enableBgpFlowspecTrace)
  }
  if {[GGV fspecSendBgpPrefixUpd_v4] != "ERROR"} {
    set sendBgpPrefixUpd_v4 [GGV fspecSendBgpPrefixUpd_v4]
  } else {
    set sendBgpPrefixUpd_v4 $option(sendBgpPrefixUpd_v4)
  }
  if {[GGV fspecSendBgpPrefixUpd_v6] != "ERROR"} {
    set sendBgpPrefixUpd_v6 [GGV fspecSendBgpPrefixUpd_v6]
  } else {
    set sendBgpPrefixUpd_v6 $option(sendBgpPrefixUpd_v6)
  }
  if {[GGV fspecSendBgpFlowrouteUpd_v4] != "ERROR"} {
    set sendBgpFlowrouteUpd_v4 [GGV fspecSendBgpFlowrouteUpd_v4]
  } else {
    set sendBgpFlowrouteUpd_v4 $option(sendBgpFlowrouteUpd_v4)
  }
  if {[GGV fspecSendBgpFlowrouteUpd_v6] != "ERROR"} {
    set sendBgpFlowrouteUpd_v6 [GGV fspecSendBgpFlowrouteUpd_v6]
  } else {
    set sendBgpFlowrouteUpd_v6 $option(sendBgpFlowrouteUpd_v6)
  }
  if {[GGV fspecActionListPerVprn] != "ERROR"} {
    set actionListPerVprn [GGV fspecActionListPerVprn]
  } else {
    set actionListPerVprn $option(actionListPerVprn)
  }
  if {[GGV fspecDumpDebugLog] != "ERROR"} {
    set dumpDebugLog [GGV fspecDumpDebugLog]
  } else {
    set dumpDebugLog $option(dumpDebugLog)
  }
  if {[GGV fspecSendTraffic_v4] != "ERROR"} {
    set sendTraffic_v4 [GGV fspecSendTraffic_v4]
  } else {
    set sendTraffic_v4 $option(sendTraffic_v4)
  }
  if {[GGV fspecSendTraffic_v6] != "ERROR"} {
    set sendTraffic_v6 [GGV fspecSendTraffic_v6]
  } else {
    set sendTraffic_v6 $option(sendTraffic_v6)
  }
  if {[GGV fspecEnableIngressFlowspec_v4] != "ERROR"} {
    set enableIngressFlowspec_v4 [GGV fspecEnableIngressFlowspec_v4]
  } else {
    set enableIngressFlowspec_v4 $option(enableIngressFlowspec_v4)
  }
  if {[GGV fspecEnableIngressFlowspec_v6] != "ERROR"} {
    set enableIngressFlowspec_v6 [GGV fspecEnableIngressFlowspec_v6]
  } else {
    set enableIngressFlowspec_v6 $option(enableIngressFlowspec_v6)
  }
  if {[GGV fspecVrfTargetDirectUnderVprn_noImportPolicy] != "ERROR"} {
    set vrfTargetDirectUnderVprn_noImportPolicy [GGV fspecVrfTargetDirectUnderVprn_noImportPolicy]
  } else {
    set vrfTargetDirectUnderVprn_noImportPolicy $option(vrfTargetDirectUnderVprn_noImportPolicy)
  }
  if {[GGV fspecItfType_dut1dut2] != "ERROR"} {
    set itfType_dut1dut2 [GGV fspecItfType_dut1dut2]
  } else {
    set itfType_dut1dut2 $option(itfType_dut1dut2)
  }
  if {[GGV fspecAddDefFilterInFirstVprnBeforeFlowroutesAreInjected] != "ERROR"} {
    set addDefFilterInFirstVprnBeforeFlowroutesAreInjected [GGV fspecAddDefFilterInFirstVprnBeforeFlowroutesAreInjected]
  } else {
    set addDefFilterInFirstVprnBeforeFlowroutesAreInjected $option(addDefFilterInFirstVprnBeforeFlowroutesAreInjected)
  }
  if {[GGV fspecAddDefFilterInLastVprnAfterFlowroutesAreInjected] != "ERROR"} {
    set addDefFilterInLastVprnAfterFlowroutesAreInjected [GGV fspecAddDefFilterInLastVprnAfterFlowroutesAreInjected]
  } else {
    set addDefFilterInLastVprnAfterFlowroutesAreInjected $option(addDefFilterInLastVprnAfterFlowroutesAreInjected)
  }
  if {[GGV fspecAddFlowroutesInBase] != "ERROR"} {
    set addFlowroutesInBase [GGV fspecAddFlowroutesInBase]
  } else {
    set addFlowroutesInBase $option(addFlowroutesInBase)
  }
  if {[GGV fspecIterationMethod] != "ERROR"} {
    set iterationMethod [GGV fspecIterationMethod]
  } else {
    set iterationMethod $option(iterationMethod)
  }
  if {[GGV fspecMaxNbrIterations] != "ERROR"} {
    set maxNbrIterations [GGV fspecMaxNbrIterations]
  } else {
    set maxNbrIterations $option(maxNbrIterations)
  }
  if {[GGV fspecMaxDurationHrs] != "ERROR"} {
    set maxDurationHrs [GGV fspecMaxDurationHrs]
  } else {
    set maxDurationHrs $option(maxDurationHrs)
  }
  if {[GGV fspecEnableFlowspecBeforeFlowroutesAreInjected] != "ERROR"} {
    set enableFlowspecBeforeFlowroutesAreInjected [GGV fspecEnableFlowspecBeforeFlowroutesAreInjected]
  } else {
    set enableFlowspecBeforeFlowroutesAreInjected $option(enableFlowspecBeforeFlowroutesAreInjected)
  }
  if {[GGV fspecRedirectVprnTunnelMethod] != "ERROR"} {
    set redirectVprnTunnelMethod [GGV fspecRedirectVprnTunnelMethod]
  } else {
    set redirectVprnTunnelMethod $option(redirectVprnTunnelMethod)
  }
  if {[GGV fspecRedirectVprnTunnelEncap] != "ERROR"} {
    set redirectVprnTunnelEncap [GGV fspecRedirectVprnTunnelEncap]
  } else {
    set redirectVprnTunnelEncap $option(redirectVprnTunnelEncap)
  }
  if {[GGV fspecGrtLookupEnableGrt] != "ERROR"} {
    set grtLookupEnableGrt [GGV fspecGrtLookupEnableGrt]
  } else {
    set grtLookupEnableGrt $option(grtLookupEnableGrt)
  }
  ##### Testcase GGV paramerters (end)

  set dut1 Dut-A ; set dut2 Dut-B ; set dut3 Dut-C ; set dut4 Dut-D ; set dut5 Dut-E ; set dut6 Dut-F
  set dutList [list $dut1 $dut2 $dut3 $dut4 $dut5 $dut6]

  # vprnIdList => thisVprnId | thisNbrFlowroutesPerVprn | thisActionListPerVprn
  # vprnIdOnlyList => has only the vprnId's
  set vprnIdList "" ; set vprnIdOnlyList ""
  for {set vprnId 1} {$vprnId <= $nbrVprns} {incr vprnId} {
    lappend vprnIdList [expr $minVprnId - 1 + $vprnId] ; lappend vprnIdOnlyList [expr $minVprnId - 1 + $vprnId]
    lappend vprnIdList $nbrFlowroutesPerVprn
    lappend vprnIdList $actionListPerVprn
  }
  # Use the next dot1q tag for the Base
  set baseDot1qTag [expr [lindex $vprnIdOnlyList end] + 1]

  set nbrStreamsFamilies 0 ; if {$sendTraffic_v4} {incr nbrStreamsFamilies} ; if {$sendTraffic_v6} {incr nbrStreamsFamilies}
  if {$addFlowroutesInBase} {
    set nbrStreamsUsed [expr [expr $nbrVprns + 1] * [llength $actionListPerVprn] * $nbrStreamsFamilies]
  } else {
    set nbrStreamsUsed [expr $nbrVprns * [llength $actionListPerVprn] * $nbrStreamsFamilies]
  }

  set pktRatePerStream 2 ; set pktSize 128 ; set streamData_ISATMS "49 53 41 54 4D 53" ; set rawProtocol 253
  set trafficDurationSecsDuringPrecondition 30

  # used in redirectToVrf
  set redirectVprnId 400 ; set customerId 1 ; set nbrRedirectVprn 4
  set firstRedirectVprnId $redirectVprnId
  set maxRedirectVprnId [expr $firstRedirectVprnId + $nbrRedirectVprn - 1]
  set minRedirectVprnId $redirectVprnId
  # the vprn (to redirect) is between dut2/dut4
  set thisRT "target:42:1"

  set enableTraceDutList [list $dut2 $dut3]
  # spokeSdp case
  set spokeIesId 5000 ; set spokeSdpId 1 ; set spokeSdpVcId 1

  if {$sendBgpFlowrouteUpd_v4 && $sendBgpFlowrouteUpd_v6} {
    set thisFilterFamilyList [list ipv4 ipv6]
  } elseif {$sendBgpFlowrouteUpd_v6} {
    set thisFilterFamilyList [list ipv6]
  } else {
    set thisFilterFamilyList [list ipv4]
  }
  set groupName "onegroup"

  # 101..199 => always 101 for flowspec
  set filterLogId 101

  set rollbackLocation "ftp://$::TestDB::thisTestBed:tigris@$::TestDB::thisHostIpAddr/$logdir/device_logs/saved_configs"

  log_msg INFO "########################################################################"
  log_msg INFO "# Test : $testID"
  log_msg INFO "# Descr : Cover RFE158878: When PBR to VRF is applied (filter or flow-spec) uRPF should be done in source routing instance"
  log_msg INFO "#         - verify interaction between source-based QPPB and the 'redirect to router' action so that source address lookup is always"
  log_msg INFO "#           done in the original/source routing instance  "
  log_msg INFO "#   "
  log_msg INFO "# Setup:"
  log_msg INFO "# "
  log_msg INFO "#                              PE($dut4)----------> scrubber (Ixia)"
  log_msg INFO "#                               dut4 (dest for redirect actions)"
  log_msg INFO "#                                |"
  log_msg INFO "#                                |"
  log_msg INFO "#                                |"
  log_msg INFO "#                                |"
  log_msg INFO "#                                |"
  log_msg INFO "#                                |"
  log_msg INFO "#                                |"
  log_msg INFO "#   Ixia----------dut1----------dut2----------dut3----------dut6"
  log_msg INFO "#                CE1($dut1)    PE($dut2)     PE($dut3)     CE2($dut6)"
  log_msg INFO "#                                              |"
  log_msg INFO "#                                              |"
  log_msg INFO "#                                              |"
  log_msg INFO "#                                             Linux"
  log_msg INFO "# "
  log_msg INFO "# Important testcase parameters:"
  log_msg INFO "#   vprnIdOnlyList: $vprnIdOnlyList"
  log_msg INFO "#   redirectType: $option(redirectType)"
  log_msg INFO "#   redirectVprn => vrpnId: $firstRedirectVprnId till $maxRedirectVprnId (#$nbrRedirectVprn) ; redirectVprnTunnelMethod: $redirectVprnTunnelMethod ; redirectVprnTunnelEncap: $redirectVprnTunnelEncap"
  log_msg INFO "#   ECMP enabled: $option(ecmpEnabled)"

  if {$addFlowroutesInBase} {set fTxt "(baseDot1qTag: $baseDot1qTag)"} else {set fTxt ""}
  log_msg INFO "#   addFilterWithFwdRtrInBase: $addFlowroutesInBase $fTxt"
  log_msg INFO "#   sendTraffic_v4: $sendTraffic_v4 sendTraffic_v6: $sendTraffic_v6 "
  log_msg INFO "#   vrfTargetDirectUnderVprn_noImportPolicy: $vrfTargetDirectUnderVprn_noImportPolicy"
  log_msg INFO "#   itfType_dut1dut2: $itfType_dut1dut2"
  switch $iterationMethod {
    "maxNbrIterations" {set iMethTxt "maxNbrIterations: $maxNbrIterations"}
    "maxDuration" {set iMethTxt "maxDurationHrs: $maxDurationHrs"}
    "ifFileExists" {set iMethTxt "fileExistsName: $option(fileExistsName)"}
  }
  log_msg INFO "# "
  log_msg INFO "########################################################################"

  set dutLoggingDisabled false

  # handlePacket -action reset -portList all
  CLN.reset
  set cliTimeoutOrig [$dut2 cget -cli_timeout]
  $dut2 configure -cli_timeout $option(cliTimeout)

  if {$option(config) && ! [testFailed] && $Result == "OK"} {
    CLN.reset
    CLN "dut $dut1 systemip [set [set dut1]_ifsystem_ip] isisarea $isisAreaId as [set [set dut1]_AS]"
    CLN "dut $dut2 systemip [set [set dut2]_ifsystem_ip] isisarea $isisAreaId as [set [set dut2]_AS]"
    CLN "dut $dut3 systemip [set [set dut3]_ifsystem_ip] isisarea $isisAreaId as [set [set dut3]_AS]"
    CLN "dut $dut4 systemip [set [set dut4]_ifsystem_ip] isisarea $isisAreaId as [set [set dut4]_AS]"
    CLN "dut $dut5 systemip [set [set dut5]_ifsystem_ip] isisarea $isisAreaId as [set [set dut5]_AS]"
    CLN "dut $dut6 systemip [set [set dut6]_ifsystem_ip] isisarea $isisAreaId as [set [set dut6]_AS]"

    set a 30 ; set b [expr 20 + [lindex $vprnIdOnlyList 0]] ; set c 1
    foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn } $vprnIdList {
      CLN "dut $dut2 vprnid $thisVprnId systemip $a.$b.$c.2 as [set [set dut2]_AS]"
      CLN "dut $dut3 vprnid $thisVprnId systemip $a.$b.$c.3 as [set [set dut3]_AS]"
      incr b ; if {$b > 255} {set b 0 ; incr a}
    }

    # used for spokes dut1/dut2
    if { [GGV subTopology] == "ess6MixedMode" } {
        CLN "dut $dut1 tonode $dut2 porttype network dot1q 1 ip 1.1.1.1 ldp true mpls true"
    } else {
        CLN "dut $dut1 tonode $dut2 porttype hybrid dot1q 1 ip 1.1.1.1 ldp true mpls true"
    }
    CLN "dut $dut2 tonode $dut1 porttype hybrid dot1q 1 ip 1.1.1.2 ldp true mpls true"

    # In the CE's, bgp routes are learned from different peers (the neighbor end point is in different vprn).
    # The learned bgp routes are installed in the Base routing-table and exported again to all neighbors (default ebgp behavior).
    # To avoid that the neigbor end points (in different vprn's) receive the exported bgp routes (CE's Base instance) a reject policy should be installed.
    CLN "dut $dut1 policy rejectBgpExport entry 1 action reject descr avoidExportFromBaseToNeighborVprns"
    CLN "dut $dut6 policy rejectBgpExport entry 1 action reject descr avoidExportFromBaseToNeighborVprns"

    # Exchange flowroutes via BGP peer in the VPRN, because SAFI=134 (exchange flowroutes via L3-VPN) is not supported
    foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
      CLN "dut $dut3 tonode $dut2 porttype hybrid vprnid $thisVprnId dot1q $thisVprnId as [set [set dut3]_AS] bgpneighbor interface4 bgppeeras [set [set dut2]_AS] bgpfamily 'flow-ipv4 flow-ipv6' "
      CLN "dut $dut2 tonode $dut3 porttype hybrid vprnid $thisVprnId dot1q $thisVprnId as [set [set dut2]_AS] bgpneighbor interface4 bgppeeras [set [set dut3]_AS] bgpfamily 'flow-ipv4 flow-ipv6' "
    }

    # redistribute bgp-vpn in ospf
    CLN "dut $dut2 policy fromBgpVpnToOspf_v4 entry 1 from 'protocol bgp-vpn' action accept"
    CLN "dut $dut2 policy fromBgpVpnToOspf_v4 entry 1 to 'protocol ospf' action accept"
    CLN "dut $dut2 policy fromBgpVpnToOspf_v6 entry 1 from 'protocol bgp-vpn' action accept"
    CLN "dut $dut2 policy fromBgpVpnToOspf_v6 entry 1 to 'protocol ospf3' action accept"

    foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
      #
      if {$itfType_dut1dut2 == "spoke"} {
        if { [GGV subTopology] == "ess6MixedMode" } {
            CLN "dut $dut1 tonode $dut2 porttype network iesid $spokeIesId iftype spoke sdpid '$spokeSdpId gre [set [set dut2]_ifsystem_ip]' dot1q $thisVprnId ip $thisVprnId.$dataip(id.$dut1).$dataip(id.$dut2).$dataip(id.$dut1) ospfarea $ospfAreaId ospf3area $ospfAreaId routerid [set [set dut1]_ifsystem_ip] ospfasbr true ospf3asbr true as [set [set dut1]_AS] bgpneighbor interface4 bgppeeras [set [set dut2]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' bgpexport rejectBgpExport"
        } else {
            CLN "dut $dut1 tonode $dut2 porttype hybrid iesid $spokeIesId iftype spoke sdpid '$spokeSdpId gre [set [set dut2]_ifsystem_ip]' dot1q $thisVprnId ip $thisVprnId.$dataip(id.$dut1).$dataip(id.$dut2).$dataip(id.$dut1) ospfarea $ospfAreaId ospf3area $ospfAreaId routerid [set [set dut1]_ifsystem_ip] ospfasbr true ospf3asbr true as [set [set dut1]_AS] bgpneighbor interface4 bgppeeras [set [set dut2]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' bgpexport rejectBgpExport"
        }
        CLN "dut $dut2 tonode $dut1 porttype hybrid iftype spoke sdpid '$spokeSdpId gre [set [set dut1]_ifsystem_ip]' vprnid $thisVprnId dot1q $thisVprnId ospfarea $ospfAreaId ospf3area $ospfAreaId ospfexport fromBgpVpnToOspf_v4 ospf3export fromBgpVpnToOspf_v6 as [set [set dut2]_AS] bgpneighbor interface4 bgppeeras [set [set dut1]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
      } else {
        if { [GGV subTopology] == "ess6MixedMode" } {
            CLN "dut $dut1 tonode $dut2 porttype network dot1q $thisVprnId ospfarea $ospfAreaId ospf3area $ospfAreaId routerid [set [set dut1]_ifsystem_ip] ospfasbr true ospf3asbr true as [set [set dut1]_AS] bgpneighbor interface4 bgppeeras [set [set dut2]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' bgpexport rejectBgpExport"
        } else {
            CLN "dut $dut1 tonode $dut2 porttype hybrid dot1q $thisVprnId ospfarea $ospfAreaId ospf3area $ospfAreaId routerid [set [set dut1]_ifsystem_ip] ospfasbr true ospf3asbr true as [set [set dut1]_AS] bgpneighbor interface4 bgppeeras [set [set dut2]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' bgpexport rejectBgpExport"
        }
        CLN "dut $dut2 tonode $dut1 porttype hybrid vprnid $thisVprnId dot1q $thisVprnId ospfarea $ospfAreaId ospf3area $ospfAreaId ospfexport fromBgpVpnToOspf_v4 ospf3export fromBgpVpnToOspf_v6 as [set [set dut2]_AS] bgpneighbor interface4 bgppeeras [set [set dut1]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
      }

      if { [GGV subTopology] == "ess6MixedMode" } {
          CLN "dut $dut6 tonode $dut3 porttype network dot1q $thisVprnId ospfarea $ospfAreaId ospf3area $ospfAreaId routerid [set [set dut6]_ifsystem_ip] ospfasbr true ospf3asbr true as [set [set dut6]_AS] bgpneighbor interface4 bgppeeras [set [set dut3]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' bgpexport rejectBgpExport"
      } else {
          CLN "dut $dut6 tonode $dut3 porttype hybrid dot1q $thisVprnId ospfarea $ospfAreaId ospf3area $ospfAreaId routerid [set [set dut6]_ifsystem_ip] ospfasbr true ospf3asbr true as [set [set dut6]_AS] bgpneighbor interface4 bgppeeras [set [set dut3]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' bgpexport rejectBgpExport"
      }
      CLN "dut $dut3 tonode $dut6 porttype hybrid vprnid $thisVprnId dot1q $thisVprnId ospfarea $ospfAreaId ospf3area $ospfAreaId routerid [set [set dut3]_ifsystem_ip] as [set [set dut3]_AS] bgpneighbor interface4 bgppeeras [set [set dut6]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "

      CLN "dut $dut3 link Linux porttype hybrid vprnid $thisVprnId dot1q $thisVprnId ospfarea $ospfAreaId ospf3area $ospfAreaId passive true as [set [set dut3]_AS] bgpneighbor interface4 bgppeeras [set Linux_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
    }

    foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
      CLN "dut $dut2 logid $debugLog from debug to 'memory 3000' debug {router $thisVprnId bgp update}"
      CLN "dut $dut3 logid $debugLog from debug to 'memory 3000' debug {router $thisVprnId bgp update}"
    }

    if {$addFlowroutesInBase} {
      CLN "dut $dut3 tonode $dut2 porttype hybrid dot1q $baseDot1qTag isisarea $isisAreaId bgpneighbor [set [set dut2]_ifsystem_ip]  bgppeeras [set [set dut2]_AS] bgpfamily 'ipv4 ipv6 vpn-ipv4 vpn-ipv6 flow-ipv4 flow-ipv6' ldp true"
      CLN "dut $dut2 tonode $dut3 porttype hybrid dot1q $baseDot1qTag isisarea $isisAreaId bgpneighbor [set [set dut3]_ifsystem_ip] bgppeeras [set [set dut3]_AS] bgpfamily 'ipv4 ipv6 vpn-ipv4 vpn-ipv6 flow-ipv4 flow-ipv6' ldp true"
      #
      CLN "dut $dut3 tonode $dut6 porttype hybrid dot1q $baseDot1qTag isisarea $isisAreaId bgpneighbor interface4 bgppeeras [set [set dut6]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
      if { [GGV subTopology] == "ess6MixedMode" } {
          CLN "dut $dut6 tonode $dut3 porttype network dot1q $baseDot1qTag isisarea $isisAreaId bgpneighbor interface4 bgppeeras [set [set dut3]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
          CLN "dut $dut1 tonode $dut2 porttype network dot1q $baseDot1qTag isisarea $isisAreaId bgpneighbor interface4 bgppeeras [set [set dut2]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
      } else {
          CLN "dut $dut6 tonode $dut3 porttype hybrid dot1q $baseDot1qTag isisarea $isisAreaId bgpneighbor interface4 bgppeeras [set [set dut3]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
          CLN "dut $dut1 tonode $dut2 porttype hybrid dot1q $baseDot1qTag isisarea $isisAreaId bgpneighbor interface4 bgppeeras [set [set dut2]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
      }
      #
      CLN "dut $dut2 tonode $dut1 porttype hybrid dot1q $baseDot1qTag isisarea $isisAreaId bgpneighbor interface4 bgppeeras [set [set dut1]_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
      #
      CLN "dut $dut3 link Linux porttype hybrid dot1q $baseDot1qTag isisarea $isisAreaId passive true as [set [set dut3]_AS] bgpneighbor interface4 bgppeeras [set Linux_AS] bgpfamily 'ipv4 ipv6 flow-ipv4 flow-ipv6' "
    }

    # Ixia connections
    set filterEntryId 1
    set filterEntryId2 123
    set filterEntryId3 2139
    set filterEntryId4 65535
    if { $option(redirectType) == "grtToVrf" } {
        set host_ip 5.1.2.0
        set loose_ip 1.2.4.0
    } else {
        set host_ip 2.1.2.0
        set loose_ip 85.1.2.0
    }
    set spoofed_ip 1.1.9.0
    foreach thisAction $actionListPerVprn {
      CLN "dut $dut1 filter $cntPktsViaFilter_filterId entry $filterEntryId dstip [set a_[set thisAction]].0.0.0/$cntPktsViaFilter_mask_v4"
      CLN "dut $dut2 filter $cntPktsViaFilter_filterId entry $filterEntryId dstip [set a_[set thisAction]].1.2.0/24"
      CLN "dut $dut2 filter $cntPktsViaFilter_filterId entry $filterEntryId2 dstip [set a_[set thisAction]].1.3.0/24"
      CLN "dut $dut2 filter $cntPktsViaFilter_filterId entry $filterEntryId3 dstip [set a_[set thisAction]].1.4.0/24"
      CLN "dut $dut2 filter $cntPktsViaFilter_filterId entry $filterEntryId4 dstip [set a_[set thisAction]].1.5.0/24"
      CLN "dut $dut6 filter $cntPktsViaFilter_filterId entry $filterEntryId srcip $host_ip/24"
      CLN "dut $dut6 filter $cntPktsViaFilter_filterId entry [expr $filterEntryId + 1] srcip $loose_ip/24"
      CLN "dut $dut6 filter $cntPktsViaFilter_filterId entry [expr $filterEntryId + 2] srcip $spoofed_ip/24"
      CLN "dut $dut4 filter $cntPktsViaFilter_filterId entry $filterEntryId srcip $host_ip/24"
      CLN "dut $dut4 filter $cntPktsViaFilter_filterId entry [expr $filterEntryId + 1] srcip $loose_ip/24"
      CLN "dut $dut4 filter $cntPktsViaFilter_filterId entry [expr $filterEntryId + 2] srcip $spoofed_ip/24"

      CLN "dut $dut1 filterv6 $cntPktsViaFilter_filterId entry $filterEntryId dstip [ipv4ToIpv6  [set a_[set thisAction]].0.0.0]/$cntPktsViaFilter_mask_v6"
      CLN "dut $dut2 filterv6 $cntPktsViaFilter_filterId entry $filterEntryId dstip [ipv4ToIpv6  [set a_[set thisAction]].1.2.0]/120"
      CLN "dut $dut2 filterv6 $cntPktsViaFilter_filterId entry $filterEntryId2 dstip [ipv4ToIpv6  [set a_[set thisAction]].1.3.0]/120"
      CLN "dut $dut2 filterv6 $cntPktsViaFilter_filterId entry $filterEntryId3 dstip [ipv4ToIpv6  [set a_[set thisAction]].1.4.0]/120"
      CLN "dut $dut2 filterv6 $cntPktsViaFilter_filterId entry $filterEntryId4 dstip [ipv4ToIpv6  [set a_[set thisAction]].1.5.0]/120"

      CLN "dut $dut6 filterv6 $cntPktsViaFilter_filterId entry $filterEntryId srcip [ipv4ToIpv6 $host_ip]/120"
      CLN "dut $dut6 filterv6 $cntPktsViaFilter_filterId entry [expr $filterEntryId + 1] srcip [ipv4ToIpv6 $loose_ip]/120"
      CLN "dut $dut6 filterv6 $cntPktsViaFilter_filterId entry [expr $filterEntryId + 2] srcip [ipv4ToIpv6 $spoofed_ip]/120"
      CLN "dut $dut4 filterv6 $cntPktsViaFilter_filterId entry $filterEntryId srcip [ipv4ToIpv6 $host_ip]/120"
      CLN "dut $dut4 filterv6 $cntPktsViaFilter_filterId entry [expr $filterEntryId + 1] srcip [ipv4ToIpv6 $loose_ip]/120"
      CLN "dut $dut4 filterv6 $cntPktsViaFilter_filterId entry [expr $filterEntryId + 2] srcip [ipv4ToIpv6 $spoofed_ip]/120"

    }
    CLN "dut $dut1 tonode Ixia inegfilter $cntPktsViaFilter_filterId inegfilterv6 $cntPktsViaFilter_filterId"
    CLN "dut $dut6 tonode Ixia inegfilter $cntPktsViaFilter_filterId inegfilterv6 $cntPktsViaFilter_filterId"
    CLN "dut Ixia tonode $dut1"
    CLN "dut Ixia tonode $dut6"

    # CE2: static routes and policies to destine traffic from different vprn's to Ixia
    set b 1 ; set c [lindex $vprnIdOnlyList 0] ; set d 0
    foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
      foreach thisAction $thisActionListPerVprn {
        set a [set a_[set thisAction]]
        set thisDstPrefix_v4 $a.$b.$c.$d ; set thisDstPrefix_v6 [ipv4ToIpv6 $thisDstPrefix_v4]
        set thisDstPrefixMask_v4 $thisDstPrefix_v4/$clnItfMask_v4 ; set thisDstPrefixMask_v6 $thisDstPrefix_v6/$clnItfMask_v6
        CLN "dut $dut6 staticroute '$thisDstPrefixMask_v4 next-hop $dataip(ip.1.Ixia.$dut6)'"
        CLN "dut $dut6 staticroute '$thisDstPrefixMask_v6 next-hop [ipv4ToIpv6 $dataip(ip.1.Ixia.$dut6)]'"
        CLN "dut $dut6 policy fromStaticToVprns_v4 entry 1 from 'protocol static' action accept"
        CLN "dut $dut6 policy fromStaticToVprns_v4 entry 1 to 'protocol ospf' action accept"
        CLN "dut $dut6 policy fromStaticToVprns_v6 entry 1 from 'protocol static' action accept"
        CLN "dut $dut6 policy fromStaticToVprns_v6 entry 1 to 'protocol ospf3' action accept"
        CLN "dut $dut6 ospf 'export fromStaticToVprns_v4' "
        CLN "dut $dut6 ospf3 'export fromStaticToVprns_v6' "
      }
      incr c ; if {$c > 255} {set c 0 ; incr b}
    }

    # policies to destine traffic from different vprn's to Ixia
    set b 1 ; set c [lindex $vprnIdOnlyList 0] ; set d 0
    foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
      foreach thisAction $thisActionListPerVprn {
        set a [set a_[set thisAction]]
        set thisDstPrefix_v4 $a.$b.$c.$d ; set thisDstPrefix_v6 [ipv4ToIpv6 $thisDstPrefix_v4]
        set thisDstPrefixMask_v4 $thisDstPrefix_v4/$clnItfMask_v4 ; set thisDstPrefixMask_v6 $thisDstPrefix_v6/$clnItfMask_v6
        CLN "dut $dut3 prefixlist 'pfxListVprn[set thisVprnId]_v4 prefix $thisDstPrefixMask_v4 longer' "
        CLN "dut $dut3 prefixlist 'pfxListVprn[set thisVprnId]_v6 prefix $thisDstPrefixMask_v6 longer' "
        CLN "dut $dut3 policy fromStaticToVprn[set thisVprnId]_v4 defaultaction reject entry 1 from 'prefix-list pfxListVprn[set thisVprnId]_v4' action accept"
        CLN "dut $dut3 policy fromStaticToVprn[set thisVprnId]_v6 defaultaction reject entry 1 from 'prefix-list pfxListVprn[set thisVprnId]_v6' action accept"
        CLN "dut $dut3 vprnid $thisVprnId ospf 'import fromStaticToVprn[set thisVprnId]_v4' "
        CLN "dut $dut3 vprnid $thisVprnId ospf3 'import fromStaticToVprn[set thisVprnId]_v6' "
      }
      incr c ; if {$c > 255} {set c 0 ; incr b}
    }

    if {$addFlowroutesInBase} {
      # - Use isis in the Base instance
      # - Use mask16 to have a route in the Base for all grt-leak's (2nd lookup in Base) of all vprn's
      set c 0 ; set d 0
      foreach thisAction $thisActionListPerVprn {
        set a [set a_[set thisAction]]
        set thisDstPrefix_v4 $a.$b.$c.$d ; set thisDstPrefix_v6 [ipv4ToIpv6 $thisDstPrefix_v4]
        set thisDstPrefixMask_v4 $thisDstPrefix_v4/$srMask16_v4 ; set thisDstPrefixMask_v6 $thisDstPrefix_v6/$srMask16_v6
        CLN "dut $dut6 staticroute '$thisDstPrefixMask_v4 next-hop $dataip(ip.1.Ixia.$dut6)'"
        CLN "dut $dut6 staticroute '$thisDstPrefixMask_v6 next-hop [ipv4ToIpv6 $dataip(ip.1.Ixia.$dut6)]'"
        CLN "dut $dut6 prefixlist 'pfxListBase[set baseDot1qTag]_v4 prefix $thisDstPrefixMask_v4 exact' "
        CLN "dut $dut6 prefixlist 'pfxListBase[set baseDot1qTag]_v6 prefix $thisDstPrefixMask_v6 exact' "
        CLN "dut $dut6 policy fromStaticToBase[set baseDot1qTag]_v4 entry 1 from 'prefix-list pfxListBase[set baseDot1qTag]_v4' action accept"
        CLN "dut $dut6 policy fromStaticToBase[set baseDot1qTag]_v4 entry 1 to 'protocol isis' action accept"
        CLN "dut $dut6 policy fromStaticToBase[set baseDot1qTag]_v6 entry 1 from 'prefix-list pfxListBase[set baseDot1qTag]_v6' action accept"
        CLN "dut $dut6 policy fromStaticToBase[set baseDot1qTag]_v6 entry 1 to 'protocol isis' action accept"
        CLN "dut $dut6 isis 'export fromStaticToBase[set baseDot1qTag]_v4 fromStaticToBase[set baseDot1qTag]_v6'"
      }
    }

    # used in redirectToVrf
    if {$redirectVprnTunnelMethod == "autobind" && $redirectVprnTunnelEncap == "gre" || \
         $redirectVprnTunnelMethod == "sdp" && $redirectVprnTunnelEncap == "rsvp"} {
      CLN "dut $dut2 tonode $dut4 mpls true isisarea $isisAreaId"
      CLN "dut $dut4 tonode $dut2 mpls true isisarea $isisAreaId"
    } else {
      CLN "dut $dut2 tonode $dut4 ldp true mpls true isisarea $isisAreaId"
      CLN "dut $dut4 tonode $dut2 ldp true mpls true isisarea $isisAreaId"
    }
    CLN "dut $dut2 bgpneighbor [set [set dut4]_ifsystem_ip] bgppeeras [set [set dut4]_AS] bgpfamily 'vpn-ipv4 vpn-ipv6'"
    CLN "dut $dut4 bgpneighbor [set [set dut2]_ifsystem_ip] bgppeeras [set [set dut2]_AS] bgpfamily 'vpn-ipv4 vpn-ipv6'"

    CLN.exec
    CLN.reset

    set thisPePeList [list $dut2 $dut3 $dut3 $dut2]
    foreach {dut ngbDut} $thisPePeList {
      foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
        set thisExportRT [expr ($thisVprnId * 100) + ($dataip(id.$dut) * 10) + $dataip(id.$ngbDut)]
        set thisImportRT [expr ($thisVprnId * 100) + ($dataip(id.$ngbDut) * 10) + $dataip(id.$dut)]
        docli $dut "configure router"
        docli $dut "         policy-options"
        docli $dut "            begin"
        docli $dut "            community vprn_[set thisVprnId]_exportRouteTarget members target:1982:$thisExportRT"
        docli $dut "            community vprn_[set thisVprnId]_importRouteTarget members target:1982:$thisImportRT"
        docli $dut "            policy-statement vprn_[set thisVprnId]_exportPol"
        docli $dut "                entry 1"
        docli $dut "                    from"
        docli $dut "                        protocol ospf"
        docli $dut "                    exit"
        docli $dut "                    to"
        docli $dut "                        protocol bgp-vpn"
        docli $dut "                    exit"
        docli $dut "                    action accept"
        docli $dut "                        community add vprn_[set thisVprnId]_exportRouteTarget"
        docli $dut "                    exit"
        docli $dut "                exit"
        docli $dut "                entry 2"
        docli $dut "                    from"
        docli $dut "                        protocol ospf3"
        docli $dut "                    exit"
        docli $dut "                    to"
        docli $dut "                        protocol bgp-vpn"
        docli $dut "                    exit"
        docli $dut "                    action accept"
        docli $dut "                        community add vprn_[set thisVprnId]_exportRouteTarget"
        docli $dut "                    exit"
        docli $dut "                exit"
        docli $dut "            exit"
        docli $dut "            policy-statement vprn_[set thisVprnId]_importPol"
        docli $dut "                entry 1"
        docli $dut "                    from"
        docli $dut "                        protocol bgp-vpn"
        docli $dut "                        community vprn_[set thisVprnId]_importRouteTarget"
        docli $dut "                    exit"
        docli $dut "                    action accept"
        docli $dut "                    exit"
        docli $dut "                exit"
        docli $dut "            exit"
        docli $dut "            commit"
        docli $dut "        exit all"
      }
    }
    foreach {dut ngbDut} $thisPePeList {
      foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
        docli $dut "configure service vprn $thisVprnId"
        docli $dut "no vrf-target"
        docli $dut "vrf-import vprn_[set thisVprnId]_importPol"
        docli $dut "vrf-export vprn_[set thisVprnId]_exportPol"
        docli $dut "exit all"
      }
    }

    # used in redirectToVrf
    #                                        dut     thisDutId            ngbrDut  ngbrDutId       itfToNgbr
    set redirectVprnDutList [list $dut2 $dataip(id.$dut2) $dut4 $dataip(id.$dut4) $dataip(ip.1.$dut2.$dut4) \
                                              $dut4 $dataip(id.$dut4) $dut2 $dataip(id.$dut2) $dataip(ip.1.$dut4.$dut2)]
    #
    # Also needed is a path from Dut-D to Ixia2 (scrubber).
    #   - In Dut-D: add port to Dut-E in vprn
    #   - In Dut-E: epipe between port to Dut-D and port to Dut-C
    #   - In Dut-C: epipe between port to Dut-E and port to Ixia2
    #                                         dut  epipeId fromPort toPort
    set epipeListToScrubber [list $dut5 666 $portA($dut5.$dut4) $portA($dut5.$dut3) \
                                                $dut3 667 $portA($dut3.$dut5) $portA($dut3.Ixia)]
    # Redirect is done in Dut-B
    set checkIpFilterDutList [list $dut2]

    foreach {dut thisDutId ngbrDut ngbrDutId itfToNgbr} $redirectVprnDutList {
      docli $dut "configure router"
      docli $dut "         policy-options"
      docli $dut "            begin"
      docli $dut "            community \"vprn1_exportRouteTarget\" members \"target:[set thisDutId][set ngbrDutId]:1\" "
      docli $dut "            community \"vprn1_importRouteTarget_[set ngbrDutId]\" members \"target:[set ngbrDutId][set thisDutId]:1\" "
      docli $dut "            policy-statement vprn_exportPol_[set thisDutId]"
      docli $dut "                entry 1"
      docli $dut "                    from"
      docli $dut "                        protocol direct"
      docli $dut "                    exit"
      docli $dut "                    to"
      docli $dut "                        protocol bgp-vpn"
      docli $dut "                    exit"
      docli $dut "                    action accept"
      docli $dut "                        community add vprn1_exportRouteTarget"
      docli $dut "                    exit"
      docli $dut "                exit"
      docli $dut "                entry 2"
      docli $dut "                    from"
      docli $dut "                        protocol static"
      docli $dut "                    exit"
      docli $dut "                    to"
      docli $dut "                        protocol bgp-vpn"
      docli $dut "                    exit"
      docli $dut "                    action accept"
      docli $dut "                        community add vprn1_exportRouteTarget"
      docli $dut "                    exit"
      docli $dut "                exit"
      docli $dut "            exit"
      docli $dut "            policy-statement vprn_importPol_[set thisDutId]_[set ngbrDutId]"
      docli $dut "                entry 1"
      docli $dut "                    from"
      docli $dut "                        protocol bgp-vpn"
      docli $dut "                        community vprn1_importRouteTarget_[set ngbrDutId]"
      docli $dut "                    exit"
      docli $dut "                    action accept"
      docli $dut "                    exit"
      docli $dut "                exit"
      docli $dut "            exit"
      docli $dut "            commit"
      docli $dut "        exit all"
    }
    foreach {dut thisDutId ngbrDut ngbrDutId itfToNgbr} $redirectVprnDutList {
      # redirect rsvp part
      docli $dut "exit all"
      docli $dut "configure router"
      docli $dut "mpls"
      docli $dut "    path pathTo_[set ngbrDut]"
      docli $dut "        hop 1 [set [set ngbrDut]_ifsystem_ip] loose"
      docli $dut "        no shutdown"
      docli $dut "    exit"
      docli $dut "    lsp to_[set ngbrDut]"
      docli $dut "        to [set [set ngbrDut]_ifsystem_ip]"
      docli $dut "        primary pathTo_[set ngbrDut]"
      docli $dut "        exit"
      docli $dut "        no shutdown"
      docli $dut "    exit"
      docli $dut "    no shutdown"
      docli $dut "exit"
      docli $dut "exit all"
      # redirect service part
      docli $dut "configure service" -verbose $option(verbose)
      for {set vCnt 0} {$vCnt < $nbrRedirectVprn} {incr vCnt} {
        # add here the sdp's if needed
        if {$redirectVprnTunnelMethod == "sdp"} {
            switch $redirectVprnTunnelEncap {
              "gre" {
                docli $dut "" -verbose $option(verbose)
                docli $dut "sdp [set thisDutId][set ngbrDutId] gre create"
                docli $dut "    far-end [set [set ngbrDut]_ifsystem_ip]"
                docli $dut "    signaling off"
                docli $dut "    keep-alive"
                docli $dut "        shutdown"
                docli $dut "    exit"
                docli $dut "    no shutdown"
                docli $dut "exit"
              }
              "rsvp" {
                docli $dut "sdp [set thisDutId][set ngbrDutId] mpls create" -verbose $option(verbose)
                docli $dut "    far-end [set [set ngbrDut]_ifsystem_ip]"
                docli $dut "    lsp to_[set ngbrDut]"
                docli $dut "    signaling off"
                docli $dut "    keep-alive"
                docli $dut "        shutdown"
                docli $dut "    exit"
                docli $dut "    no shutdown"
                docli $dut "exit"
              }
              default {
                log_msg ERROR "Invalid redirectVprnTunnelEncap: $redirectVprnTunnelEncap (should be gre | rsvp)" ; set Result FAIL ; break
              }
            }
        }
        # add here the vprn's
        set thisRedirectVprnId [expr $redirectVprnId + $vCnt]
        docli $dut "        vprn $thisRedirectVprnId customer 1 create" -verbose $option(verbose)
        docli $dut "            no shutdown" -verbose $option(verbose)
        if {$vCnt == [expr $nbrRedirectVprn - 1] && $vrfTargetDirectUnderVprn_noImportPolicy} {
          log_msg INFO "Don't use vrf-import policy for the last vprn $thisRedirectVprnId"
          docli $dut "            vrf-target target:[set ngbrDutId][set thisDutId]:1" -verbose $option(verbose)
        } else {
          docli $dut "            vrf-import vprn_importPol_[set thisDutId]_[set ngbrDutId]" -verbose $option(verbose)
        }
        docli $dut "            vrf-export vprn_exportPol_[set thisDutId]" -verbose $option(verbose)
        docli $dut "            route-distinguisher $thisRedirectVprnId:1" -verbose $option(verbose)
        #
        switch $redirectVprnTunnelMethod {
          "autobind" {
            switch $redirectVprnTunnelEncap {
              "gre" {
                # ldp between dut2/dut4 is disabled
                docli $dut "            auto-bind gre" -verbose $option(verbose)
              }
              "ldp" {
                docli $dut "            auto-bind ldp" -verbose $option(verbose)
              }
              default {
                log_msg ERROR "Invalid redirectVprnTunnelEncap: $redirectVprnTunnelEncap (should be gre | ldp)" ; set Result FAIL ; break
              }
            }
          }
          "sdp" {
            switch $redirectVprnTunnelEncap {
              "gre" {
                # ldp between dut2/dut4 is disabled ??? to be checked
                docli $dut "spoke-sdp [set thisDutId][set ngbrDutId] create" -verbose $option(verbose)
                docli $dut "no shutdown"
                docli $dut "exit"
              }
              "rsvp" {
                # ldp between dut2/dut4 is disabled
                docli $dut "spoke-sdp [set thisDutId][set ngbrDutId] create" -verbose $option(verbose)
                docli $dut "no shutdown"
                docli $dut "exit"
              }
              default {
                log_msg ERROR "Invalid redirectVprnTunnelEncap: $redirectVprnTunnelEncap (should be gre | rsvp)" ; set Result FAIL ; break
              }
            }
          }
          default {
            log_msg ERROR "Invalid redirectVprnTunnelMethod: $redirectVprnTunnelMethod (should be autobind | sdp)" ; set Result FAIL ; break
          }
        }
        if {$grtLookupEnableGrt} {
          docli $dut "            grt-lookup enable-grt" -verbose $option(verbose)
          docli $dut "            exit" -verbose $option(verbose)
        }
        docli $dut "        exit"  -verbose $option(verbose)
      }
      docli $dut "exit all" -verbose $option(verbose)
    }
    if {$epipeListToScrubber != ""} {
      foreach {epipeDut epipeId epipeFromPort epipeToPort} $epipeListToScrubber {
        for {set vCnt 0} {$vCnt < $nbrRedirectVprn} {incr vCnt} {
          set thisVlanId [expr $vCnt + 1] ; set thisEpipeId [expr $epipeId + $vCnt]
          flowspec_createEpipe $epipeDut $thisEpipeId $epipeFromPort $epipeToPort -fromEncapType dot1q -fromSap "$epipeFromPort:$thisVlanId" -toEncapType dot1q -toSap "$epipeToPort:$thisVlanId"
        }
      }
    }
    log_msg INFO "$dut4: Create dot1q itfs (#$nbrRedirectVprn) via $portA($dut4.$dut5) and default-route (in vprn) to scrubber (Ixia $portA(Ixia.$dut3))"
    # create itf to scrubber (Ixia2)
    set rCli [$dut4 sendCliCommand "configure port $portA($dut4.$dut5) shut"] ; log_msg INFO "$rCli"
    set rCli [$dut4 sendCliCommand "configure port $portA($dut4.$dut5) ethernet mode access"] ; log_msg INFO "$rCli"
    set rCli [$dut4 sendCliCommand "configure port $portA($dut4.$dut5) ethernet encap-type dot1q"] ; log_msg INFO "$rCli"
    set rCli [$dut4 sendCliCommand "configure port $portA($dut4.$dut5) no shut"] ; log_msg INFO "$rCli"
    set rCli [$dut4 sendCliCommand "environment no create"]
    for {set vCnt 0} {$vCnt < $nbrRedirectVprn} {incr vCnt} {
      set thisRedirectVprnId [expr $redirectVprnId + $vCnt]
      set thisVlanId [expr $vCnt + 1]
      set rCli [$dut4 sendCliCommand "exit all"]
      set rCli [$dut4 sendCliCommand "configure service vprn $thisRedirectVprnId customer 1"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "interface toScrubber_[set thisVlanId] create"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "sap $portA($dut4.$dut5):$thisVlanId create"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "egress filter ip $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "egress filter ipv6 $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "exit"] ; log_msg INFO "$rCli"
      foreach {thisA thisB thisC thisD} [split "1.66.9.$dataip(id.$dut3)" "."] {break} ; set thisB [expr $thisB + $vCnt]
      set rCli [$dut4 sendCliCommand "address $thisA.$thisB.$thisC.$thisD/$clnItfMask_v4"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "ipv6 address [ipv4ToIpv6 $thisA.$thisB.$thisC.$thisD]/$clnItfMask_v6"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "exit"] ; log_msg INFO "$rCli"
      foreach {thisA thisB thisC thisD} [split "1.66.9.9" "."] {break} ; set thisB [expr $thisB + $vCnt]
      # Add here static-routes for the redirectToVrf vprn
      set b 1 ; set c [lindex $vprnIdOnlyList 0] ; set d 1
      foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
        foreach thisAction $thisActionListPerVprn {
          if {$thisAction == "redirectVrf"} {
            set a [set a_[set thisAction]]
            set thisDstPrefix_v4 $a.$b.$c.$d ; set thisDstPrefix_v6 [ipv4ToIpv6 $thisDstPrefix_v4]
            set thisDstPrefixMask_v4 $thisDstPrefix_v4/$srMask_v4 ; set thisDstPrefixMask_v6 $thisDstPrefix_v6/$srMask_v6
            set rCli [$dut4 sendCliCommand "static-route $thisDstPrefixMask_v4 next-hop $thisA.$thisB.$thisC.$thisD"] ; log_msg INFO "$rCli"
            set rCli [$dut4 sendCliCommand "static-route $thisDstPrefixMask_v6 next-hop [ipv4ToIpv6 $thisA.$thisB.$thisC.$thisD]"] ; log_msg INFO "$rCli"
          }
        }
        incr c ; if {$c > 255} {set c 0 ; incr b}
      }
      if {$addFlowroutesInBase} {
        # - Don't reset b, c and d because they point to the next values to be used
        # - Use isis in the Base instance
        foreach thisAction $thisActionListPerVprn {
          if {$thisAction == "redirectVrf"} {
            set a [set a_[set thisAction]]
            set thisDstPrefix_v4 $a.$b.$c.$d ; set thisDstPrefix_v6 [ipv4ToIpv6 $thisDstPrefix_v4]
            set thisDstPrefixMask_v4 $thisDstPrefix_v4/$srMask_v4 ; set thisDstPrefixMask_v6 $thisDstPrefix_v6/$srMask_v6
            set rCli [$dut4 sendCliCommand "static-route $thisDstPrefixMask_v4 next-hop $thisA.$thisB.$thisC.$thisD"] ; log_msg INFO "$rCli"
            set rCli [$dut4 sendCliCommand "static-route $thisDstPrefixMask_v6 next-hop [ipv4ToIpv6 $thisA.$thisB.$thisC.$thisD]"] ; log_msg INFO "$rCli"
          }
        }
      }
      #
      set rCli [$dut4 sendCliCommand "interface toScrubber_[set thisVlanId] create"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "static-arp $thisA.$thisB.$thisC.$thisD 00:00:00:00:00:99"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "ipv6 neighbor [ipv4ToIpv6 $thisA.$thisB.$thisC.$thisD] 00:00:00:00:00:99"] ; log_msg INFO "$rCli"
      set rCli [$dut4 sendCliCommand "exit"] ; log_msg INFO "$rCli"
    }

    if {$enableFilterTrace} {
      foreach dut $enableTraceDutList {
        docli $dut "debug trace trace-point module \"FILTER\" " -verbose $option(verbose)
        docli $dut "debug trace enable" -verbose $option(verbose)
        docli $dut "shell traceLimitDisable" -verbose $option(verbose)
      }
    }
    if {$enableBgpFlowspecTrace} {
      foreach dut $enableTraceDutList {
        docli $dut "debug trace trace-point module \"BGP\" " -verbose $option(verbose)
        docli $dut "debug trace trace-point module \"BGP_VPRN\" " -verbose $option(verbose)
        docli $dut "debug trace enable" -verbose $option(verbose)
        docli $dut "shell traceLimitDisable" -verbose $option(verbose)
        # enableBgpFlowspecTrace $dut
        # foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
        #  enableBgpFlowspecTrace $dut2 -vprnId $thisVprnId
        # }
      }
    }
    foreach dut $dutList {
      $dut sendCliCommand "exit all"
    }

  } ; # config

    # Ixia part
    handlePacket -port $portA(Ixia.$dut1) -action stop
    set thisDA 00:00:00:00:00:[int2Hex1 $dataip(id.$dut1)]
    set totalNbrOfFlowroutes 0
    if { $option(redirectType) == "vrfToVrf" } {
        set thisDstPrefix_v4 85.1.2.1
        set thisDstPrefix_v6 [ipv4ToIpv6 $thisDstPrefix_v4]
    } elseif { $option(redirectType) == "grtToVrf" } {
        set thisDstPrefix_v4 85.1.5.1
        set thisDstPrefix_v6 [ipv4ToIpv6 $thisDstPrefix_v4]
    } elseif { $option(redirectType) == "vrfToGrt" } {
        set thisDstPrefix_v4 85.1.2.1
        set thisDstPrefix_v6 [ipv4ToIpv6 $thisDstPrefix_v4]
    }
    set thisDstPrefixMask_v4 $thisDstPrefix_v4/$clnItfMask_v4 ; set thisDstPrefixMask_v6 $thisDstPrefix_v6/$clnItfMask_v6
    set thisHandlePacketAction create

    if {$sendTraffic_v4} {
        if { $option(redirectType) == "vrfToVrf" } {
          log_msg INFO "=> handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p \"2 0\" -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
        } elseif { $option(redirectType) == "grtToVrf" } {
          log_msg INFO "=> handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p \"2 0\" -dst $thisDstPrefix_v4 -numDest 1 -src 5.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v4 -numDest 1 -src 5.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v4 -numDest 1 -src 5.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
        } elseif { $option(redirectType) == "vrfToGrt" } {
          log_msg INFO "=> handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p \"2 0\" -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
        }
    }
    if {$sendTraffic_v6} {
        if { $option(redirectType) == "vrfToVrf" } {
          log_msg INFO "=> handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p \"2 0\" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
        } elseif { $option(redirectType) == "grtToVrf" } {
         log_msg INFO "=> handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p \"2 0\" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  5.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  5.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  5.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
        } elseif { $option(redirectType) == "vrfToGrt" } {
          log_msg INFO "=> handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p \"2 0\" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
          handlePacket -port $portA(Ixia.$dut1) -dot1q 2 -dot1p "2 0" -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
        }
    }

    # scrubber
    handlePacket -port $portA(Ixia.$dut3) -action capture

    log_msg INFO "Wait till all vprn's are operational before installed action forward router"
    set nbrRedirectVprnOperStateUp 0
    foreach {dut} $checkIpFilterDutList {break}
    for {set rCnt 1} {$rCnt <= $option(maxRetryCnt)} {incr rCnt} {
      for {set vCnt 0} {$vCnt < $nbrRedirectVprn} {incr vCnt} {
        set thisRedirectVprnId [expr $redirectVprnId + $vCnt]
        set rCli [$dut sendCliCommand "show service id $thisRedirectVprnId base | match \"Oper State\" "]
        # Admin State       : Up                  Oper State        : Up
        if {[regexp {.*Oper State[ ]+:[ ]+([A-Za-z]+).*} $rCli match vprnOperState]} {
          if {$vprnOperState == "Up"} {
            incr nbrRedirectVprnOperStateUp
          }
        }
      }
      if {$nbrRedirectVprnOperStateUp == $nbrRedirectVprn} {
        log_msg INFO "All redirectVprn are Up ($nbrRedirectVprnOperStateUp / $nbrRedirectVprn)"
        log_msg INFO "" ; log_msg INFO "Display some interesting info for the redirect vprn's" ; log_msg INFO ""
        for {set vCnt 0} {$vCnt < $nbrRedirectVprn} {incr vCnt} {
          set thisRedirectVprnId [expr $redirectVprnId + $vCnt]
          set rCli [$dut sendCliCommand "show service id $thisRedirectVprnId all"] ; log_msg INFO "$rCli"
        }
        set rCli [$dut sendCliCommand "show router tunnel-table"] ; log_msg INFO "$rCli"
        if {$redirectVprnTunnelEncap == "rsvp"} {
          set rCli [$dut sendCliCommand "show router mpls lsp"] ; log_msg INFO "$rCli"
        }
        if {$redirectVprnTunnelMethod == "sdp"} {
          set rCli [$dut sendCliCommand "show service sdp detail"] ; log_msg INFO "$rCli"
        }
        break
      } else {
        if {$rCnt == $option(maxRetryCnt)} {
          log_msg ERROR "Not all redirectVprn ($nbrRedirectVprnOperStateUp / $nbrRedirectVprn) are Up after $option(maxRetryCnt) retries" ; set Result FAIL
        } else {
          log_msg INFO "Waiting $option(interRetryTimeSec) sec ($rCnt/$option(maxRetryCnt)) till all redirectVprn ($nbrRedirectVprnOperStateUp / $nbrRedirectVprn) are Up ..." ; after [expr $option(interRetryTimeSec) * 100]
        }
      }
    }
#    if {! [testFailed] && $Result == "OK"} {
#      set mySubtest "Precondition: Waiting 5 secs and check that traffic flows from $dut1 to $dut6" ; after 5000
#      log_msg INFO "$mySubtest"
#      if {[checkTrafficFlows $dut1 $dut6 $cntPktsViaFilter_filterId -trafficDurationSecs 5]} {
#        log_msg INFO "Traffic from $dut1 to $dut6 ok"
#      } else {
#        log_msg ERROR "Traffic from $dut1 to $dut6 nok" ; set Result FAIL
#      }
#      subtest "$mySubtest"
#    }


    gash_interpreter
     
     
     set opt(HT) unicast
     set cmdList ""    
        if {$option(redirectType) != "vrfToGrt"} {
            lappend cmdList "/configure filter redirect-policy wccp_ipv4 create router 400"
            lappend cmdList "/configure filter redirect-policy wccp_ipv4 no shutdown"
            if {$opt(HT)== "ping"} {
                lappend cmdList "/configure filter redirect-policy wccp_ipv4 create destination 1.66.9.3 create ping-test"
            } else { 
                lappend cmdList "/configure filter redirect-policy wccp_ipv4 create destination 1.66.9.3 create unicast-rt-test"

            }
            lappend cmdList "/configure filter redirect-policy wccp_ipv4 router 400"        
            lappend cmdList "/configure filter redirect-policy wccp_ipv4 create destination 1.66.9.3 no shutdown" 

            lappend cmdList "/configure filter redirect-policy wccp_ipv6 create router 400"
            lappend cmdList "/configure filter redirect-policy wccp_ipv6 no shutdown"
            if {$opt(HT)== "ping"} {
                lappend cmdList "/configure filter redirect-policy wccp_ipv6 create destination 3ffe::142:903 create ping-test"
            } else { 
                lappend cmdList "/configure filter redirect-policy wccp_ipv6 create destination 3ffe::142:903 create unicast-rt-test"

            }
            lappend cmdList "/configure filter redirect-policy wccp_ipv6 router 400"        
            lappend cmdList "/configure filter redirect-policy wccp_ipv6 create destination 3ffe::142:903 no shutdown" 
        } else {
        
            lappend cmdList "/configure filter redirect-policy wccp_ipv4 create router Base"
            lappend cmdList "/configure filter redirect-policy wccp_ipv4 no shutdown"
            if {$opt(HT)== "ping"} {
                lappend cmdList "/configure filter redirect-policy wccp_ipv4 create destination 85.1.0.0 create ping-test"
            } else { 
                lappend cmdList "/configure filter redirect-policy wccp_ipv4 create destination 85.1.0.0 create unicast-rt-test"

            }       
            lappend cmdList "/configure filter redirect-policy wccp_ipv4 create destination 85.1.0.0 no shutdown" 

             lappend cmdList "/configure filter redirect-policy wccp_ipv6 create router Base"
            lappend cmdList "/configure filter redirect-policy wccp_ipv6 no shutdown"
            if {$opt(HT)== "ping"} {
                lappend cmdList "/configure filter redirect-policy wccp_ipv6 create destination 3ffe::5501:0 create ping-test"
            } else { 
                lappend cmdList "/configure filter redirect-policy wccp_ipv6 create destination 3ffe::5501:0 create unicast-rt-test"

            }       
            lappend cmdList "/configure filter redirect-policy wccp_ipv6 create destination 3ffe::5501:0 no shutdown" 
        }
        
        
        foreach {cmd} $cmdList {
            log_msg INFO "$dut2 - $cmd"
            set errMsg [ cookCliData [ $dut2 sendCliCommand $cmd] ]
            if {$errMsg != ""} { 
                log_msg ERROR "$dut2: error for CLI-command $cmd - $errMsg" 
                set Result "ERROR"
            }
        }

    # apply filters on $dut2
    cliCne $dut2 "/environment no create"
    foreach filterIpType "ip ipv6" {
        if {$filterIpType == "ip"} {set family ipv4} else {set family ipv6}
        set rCli [cliCne $dut2 "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId action forward"]; log_msg INFO $rCli
        set rCli [cliCne $dut2 "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId2 action forward"]; log_msg INFO $rCli
        set rCli [cliCne $dut2 "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId3 action forward"]; log_msg INFO $rCli
        set rCli [cliCne $dut2 "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId4 action forward"]; log_msg INFO $rCli
    }

    log_msg INFO "$dut2: Apply ingress filter (ip/ipv6) $cntPktsViaFilter_filterId (on itf $dut1 => $dut2)"
    set vprnCnt 1
    foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
        if {$itfType_dut1dut2 == "spoke"} {
          set rCli [$dut2 sendCliCommand "configure service vprn $thisVprnId interface to_[set dut1][set thisVprnId] spoke-sdp $dataip(sap.$thisVprnId.$dut2.$dataip(id.$dut1)) ingress filter ip $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
          set rCli [$dut2 sendCliCommand "configure service vprn $thisVprnId interface to_[set dut1][set thisVprnId] spoke-sdp $dataip(sap.$thisVprnId.$dut2.$dataip(id.$dut1)) ingress filter ipv6 $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
        } else {
          set rCli [$dut2 sendCliCommand "configure service vprn $thisVprnId interface to_[set dut1][set thisVprnId] sap $dataip(sap.$thisVprnId.$dut2.$dut1) ingress filter ip $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
          set rCli [$dut2 sendCliCommand "configure service vprn $thisVprnId interface to_[set dut1][set thisVprnId] sap $dataip(sap.$thisVprnId.$dut2.$dut1) ingress filter ipv6 $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
        }
    }

#    if {! [testFailed] && $Result == "OK"} {
#      if {$enableFlowspecBeforeFlowroutesAreInjected} {
        # skip traffic check
#      } else {
#        set mySubtest "Check that traffic still flows from $dut1 to $dut6, because ingress action forward router is not yet applied"
#        log_msg INFO "$mySubtest"
#        if {[checkTrafficFlows $dut1 $dut6 $cntPktsViaFilter_filterId -trafficDurationSecs 5]} {
#          log_msg INFO "Traffic from $dut1 to $dut6 ok"
#        } else {
#          log_msg ERROR "Traffic from $dut1 to $dut6 nok" ; set Result FAIL
#        }
#        subtest "$mySubtest"
#      }
#    }
    if {! [testFailed] && $Result == "OK"} {
      if {$addDefFilterInLastVprnAfterFlowroutesAreInjected} {
        log_msg INFO "$dut2: Apply ingress filter (ip/ipv6) $cntPktsViaFilter_filterId (on itf $dut1 => $dut2)"
        set vprnCnt 1
        foreach {thisVprnId thisNbrFlowroutesPerVprn thisActionListPerVprn} $vprnIdList {
          if {$vprnCnt == $nbrVprns} {
            if {$itfType_dut1dut2 == "spoke"} {
              set rCli [$dut2 sendCliCommand "configure service vprn $thisVprnId interface to_[set dut1][set thisVprnId] spoke-sdp $dataip(sap.$thisVprnId.$dut2.$dataip(id.$dut1)) ingress filter ip $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
              set rCli [$dut2 sendCliCommand "configure service vprn $thisVprnId interface to_[set dut1][set thisVprnId] spoke-sdp $dataip(sap.$thisVprnId.$dut2.$dataip(id.$dut1)) ingress filter ipv6 $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
            } else {
              set rCli [$dut2 sendCliCommand "configure service vprn $thisVprnId interface to_[set dut1][set thisVprnId] sap $dataip(sap.$thisVprnId.$dut2.$dut1) ingress filter ip $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
              set rCli [$dut2 sendCliCommand "configure service vprn $thisVprnId interface to_[set dut1][set thisVprnId] sap $dataip(sap.$thisVprnId.$dut2.$dut1) ingress filter ipv6 $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
            }
          }
          incr vprnCnt
        }
      }
    }
    # configure filter $cntPktsViaFilter_filterId in Base router
    if {$addFlowroutesInBase} {
        set rCli [$dut2 sendCliCommand "configure router interface to_[set dut1][set baseDot1qTag] ingress filter ip $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "configure router interface to_[set dut1][set baseDot1qTag] ingress filter ipv6 $cntPktsViaFilter_filterId"] ; log_msg INFO $rCli
    }

    # configure service name for target VPRN
    log_msg INFO "Configure service name for target VPRN: $firstRedirectVprnId"
    set rCli [$dut2 sendCliCommand "/configure service vprn $firstRedirectVprnId service-name \"Target VPRN 400\""]; log_msg INFO $rCli

    
    gash_interpreter
    # Configure action forward router for filters on $dut2
    foreach filterIpType "ip ipv6" {
        if {$filterIpType == "ip"} {set family ipv4} else {set family ipv6}
        if { $option(redirectType) == "vrfToGrt" } {
            set rCli [cliCne $dut2 "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId action forward redirect-policy wccp_$family"]; log_msg INFO $rCli
        } else {
            set rCli [cliCne $dut2 "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId action forward redirect-policy wccp_$family"]; log_msg INFO $rCli
        }
        set rCli [$dut2 sendCliCommand "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId2 action forward redirect-policy wccp_$family"]; log_msg INFO $rCli
        set rCli [cliCne $dut2 "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId3 action forward redirect-policy wccp_$family"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure filter [getVar4 $filterIpType]-filter $cntPktsViaFilter_filterId entry $filterEntryId4 action forward redirect-policy wccp_$family"]; log_msg INFO $rCli
    }

    set rCli [$dut2 sendCliCommand "show filter ip $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
    set rCli [$dut2 sendCliCommand "show filter ipv6 $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"


    if { $option(redirectType) == "grtToVrf" } {
        log_msg INFO "Configure QoS policy and bind it to $dut2 IES SAP"
    } else {
        log_msg INFO "Configure QoS policy and bind it to $dut2 VPRN 2 SAP"
    }
    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "configure qos"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "        sap-ingress 2 create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            queue 1 create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            queue 2 profile-mode create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            queue 3 profile-mode create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           queue 4 profile-mode create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           queue 5 profile-mode create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            queue 6 profile-mode create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            queue 7 profile-mode create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           queue 8 profile-mode create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           queue 9 profile-mode create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           queue 11 multipoint create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           fc af create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "               queue 4"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           fc be create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "               queue 2"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           fc ef create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "               queue 7"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           fc h1 create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "               queue 8"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           fc h2 create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "               queue 6"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           fc l1 create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "               queue 5"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           fc l2 create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "               queue 3"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           fc nc create"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "                queue 9"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "           exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "       exit"]; log_msg INFO $rCli
    set rCli [$dut2 sendCliCommand "   exit"]; log_msg INFO $rCli

    # modify port to IXIA on $dut1 to encap-type dot1q
    set rCli [$dut1 sendCliCommand "exit all"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure port $topoMap(Dut-A,1/1/3) shutdown"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia ingress no filter ip $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia ingress no filter ipv6 $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia egress no filter ip $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia egress no filter ipv6 $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia no port"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure port $topoMap(Dut-A,1/1/3) ethernet encap-type dot1q"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia port $topoMap(Dut-A,1/1/3):2"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia ingress filter ip $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia ingress filter ipv6 $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia egress filter ip $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure router interface to_Ixia egress filter ipv6 $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
    set rCli [$dut1 sendCliCommand "/configure port $topoMap(Dut-A,1/1/3) no shutdown"]; log_msg INFO $rCli

#interpreter

    # create IES service on $dut2 and $dut1 in case GRT to VRF redirect
    if { $option(redirectType) == "grtToVrf" } {
        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "configure router interface to_Dut-A5 ingress no filter ip $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "configure router interface to_Dut-A5 ingress no filter ipv6 $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "configure router interface to_Dut-A5 no port"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "configure router interface to_Dut-A5 shutdown"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "configure router no interface to_Dut-A5"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "    configure service"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        ies 300 customer 1 create"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "            interface to_Dut-A5 create"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                address 5.1.2.2/24"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                mac 00:00:00:00:00:02"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                ipv6"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                    address 3FFE::501:202/120"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                sap $topoMap(Dut-B,1/1/1):5 create"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                    ingress"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                        filter ip $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                        filter ipv6 $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                        qos 2"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                    exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "            no shutdown"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        no shutdown"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "    exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "configure router interface to_Dut-B5 no port"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "configure router interface to_Dut-B5 shutdown"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "configure router no interface to_Dut-B5"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "configure port $topoMap(Dut-A,1/1/1) ethernet mode access"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "    configure service"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "        ies 300 customer 1 create"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "            interface to_Dut-B5 create"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "                address 5.1.2.1/24"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "                mac 00:00:00:00:00:01"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "                ipv6"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "                    address 3FFE::501:201/120"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "                exit"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "                sap $topoMap(Dut-A,1/1/1):5 create"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "                exit"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "            no shutdown"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "            exit"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "        no shutdown"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "        exit"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "    exit"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "/configure router static-route 85.1.5.0/24 next-hop 5.1.2.2"]; log_msg INFO $rCli
        set rCli [$dut1 sendCliCommand "/configure router static-route 3FFE::5501:500/120 next-hop 3FFE::501:202"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure router static-route 5.1.2.50/32 next-hop 5.1.2.1 fc h2 priority high"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure router static-route 3FFE::501:232/128 next-hop 3FFE::501:201 fc h2 priority high"]; log_msg INFO $rCli
  
        # add to VPRN import policy FCs and priority - in order to distribute them via BGP IPv4/v6
#        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "    configure router"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "        policy-options"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "        begin"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "            policy-statement vprn_importPol_2_4"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                entry 1"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                    action accept"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                        fc ef priority high"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                    exit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "        commit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "        exit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "    exit"]; log_msg INFO $rCli
    } elseif { $option(redirectType) == "vrfToVrf" } {
        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface to_Dut-A2 sap $topoMap(Dut-B,1/1/1):2 ingress qos 2"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 static-route 2.1.2.50/32 next-hop 2.1.2.1 fc h2 priority high"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 static-route 3FFE::201:232/128 next-hop 3FFE::201:201 fc h2 priority high"]; log_msg INFO $rCli

        # add to VPRN import policy FCs and priority - in order to distribute them via BGP IPv4/v6
#        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "    configure router"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "        policy-options"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "        begin"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "            policy-statement vprn_importPol_2_4"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                entry 1"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                    action accept"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                        fc ef priority high"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                    exit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "        commit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "        exit"]; log_msg INFO $rCli
#        set rCli [$dut2 sendCliCommand "    exit"]; log_msg INFO $rCli
    } elseif { $option(redirectType) == "vrfToGrt" } {
        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface to_Dut-A2 sap $topoMap(Dut-B,1/1/1):2 ingress qos 2"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 static-route 2.1.2.50/32 next-hop 2.1.2.1 fc h2 priority high"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 static-route 3FFE::201:232/128 next-hop 3FFE::201:201 fc h2 priority high"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure router static-route 85.1.0.0/16 next-hop 5.2.3.3 fc ef priority high"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure router static-route 3FFE::5501:0/112 next-hop 3FFE::502:303 fc ef priority high"]; log_msg INFO $rCli
    }
    after 2000
    # reconfigure FC and priority for routes, in order to test random combinations
    set configuredFc_src [lindex $possibleFcTypes [random [llength $possibleFcTypes]]]
    set configuredPriority_src [lindex $possiblePriorities [random [llength $possiblePriorities]]]
    set configuredFc_dst [lindex $possibleFcTypes [random [llength $possibleFcTypes]]]
    set configuredPriority_dst [lindex $possiblePriorities [random [llength $possiblePriorities]]]

    if { $configuredPriority_src == "undefined" } {
        set cmd "fc $configuredFc_src"
    } else {
        set cmd "fc $configuredFc_src priority $configuredPriority_src"
    }
    if { $configuredPriority_dst == "undefined" } {
        set cmd2 "fc $configuredFc_dst"
    } else {
        set cmd2 "fc $configuredFc_dst priority $configuredPriority_dst"
    }
    log_msg INFO "New values for source-based QPPB - FC: $configuredFc_src and priority: $configuredPriority_src"
    log_msg INFO "New values for destination-based QPPB - FC: $configuredFc_dst and priority: $configuredPriority_dst"

    if { $option(redirectType) == "grtToVrf" } {
        set rCli [$dut2 sendCliCommand "/configure router static-route 5.1.2.50/32 next-hop 5.1.2.1 $cmd"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure router static-route 3FFE::501:232/128 next-hop 3FFE::501:201 $cmd"]; log_msg INFO $rCli
        after 2000
        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "    configure router"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        policy-options"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        begin"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "            policy-statement vprn_importPol_2_4"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                entry 1"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                    action accept"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                        $cmd2"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                    exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        commit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "    exit"]; log_msg INFO $rCli
        after 3000
        if { $option(family) == "ipv4"} {
            set srcIp 5.1.2.50; set srcMask 32; set dstIp 85.1.5.1; set dstMask 32
        } else {
            set srcIp 3FFE::501:232; set srcMask 128; set dstIp 3FFE::5501:501; set dstMask 128
        }

        # verify source
        log_msg INFO "Verify configured FC and priority for source route lookup"
        set rCli [$dut2 sendCliCommand "show router route-table qos $option(family)"]; log_msg INFO $rCli
        verifyConfiguredQos $dut2 $option(family) false $srcIp $srcMask $configuredFc_src $configuredPriority_src 
        # verify destination
        log_msg INFO "Verify configured FC and priority for destination route lookup"
        set rCli [$dut2 sendCliCommand "show router 400 route-table qos $option(family)"]; log_msg INFO $rCli
        verifyConfiguredQos $dut2 $option(family) true $dstIp $dstMask $configuredFc_dst $configuredPriority_dst -serviceId 400

    } elseif { $option(redirectType) == "vrfToVrf" } {
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 static-route 2.1.2.50/32 next-hop 2.1.2.1 $cmd"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 static-route 3FFE::201:232/128 next-hop 3FFE::201:201 $cmd"]; log_msg INFO $rCli
        after 2000
        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "    configure router"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        policy-options"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        begin"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "            policy-statement vprn_importPol_2_4"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                entry 1"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                    action accept"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                        $cmd2"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                    exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        commit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "        exit"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "    exit"]; log_msg INFO $rCli
        after 3000
        if { $option(family) == "ipv4"} {
            set srcIp 2.1.2.50; set srcMask 32; set dstIp 85.1.2.1; set dstMask 32
        } else {
            set srcIp 3FFE::201:232; set srcMask 128; set dstIp 3FFE::5501:201; set dstMask 128
        }

        # verify source
        log_msg INFO "Verify configured FC and priority for source route lookup"
        set rCli [$dut2 sendCliCommand "show router 2 route-table qos $option(family)"]; log_msg INFO $rCli
        verifyConfiguredQos $dut2 $option(family) true $srcIp $srcMask $configuredFc_src $configuredPriority_src -serviceId 2
        # verify destination
        log_msg INFO "Verify configured FC and priority for destination route lookup"
        set rCli [$dut2 sendCliCommand "show router 400 route-table qos $option(family)"]; log_msg INFO $rCli
        verifyConfiguredQos $dut2 $option(family) true $dstIp $dstMask $configuredFc_dst $configuredPriority_dst -serviceId 400

    } elseif { $option(redirectType) == "vrfToGrt" } {
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 static-route 2.1.2.50/32 next-hop 2.1.2.1 $cmd"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure service vprn 2 static-route 3FFE::201:232/128 next-hop 3FFE::201:201 $cmd"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure router static-route 85.1.0.0/16 next-hop 5.2.3.3 $cmd2"]; log_msg INFO $rCli
        set rCli [$dut2 sendCliCommand "/configure router static-route 3FFE::5501:0/112 next-hop 3FFE::502:303 $cmd2"]; log_msg INFO $rCli
        after 3000
        if { $option(family) == "ipv4"} {
            set srcIp 2.1.2.50; set srcMask 32; set dstIp 85.1.0.0; set dstMask 16
        } else {
            set srcIp 3FFE::201:232; set srcMask 128; set dstIp 3FFE::5501:0; set dstMask 112
        }

        # verify source
        log_msg INFO "Verify configured FC and priority for source route lookup"
        set rCli [$dut2 sendCliCommand "show router 2 route-table qos $option(family)"]; log_msg INFO $rCli
        verifyConfiguredQos $dut2 $option(family) true $srcIp $srcMask $configuredFc_src $configuredPriority_src -serviceId 2
        # verify destination
        log_msg INFO "Verify configured FC and priority for destination route lookup"
        set rCli [$dut2 sendCliCommand "show router route-table qos $option(family)"]; log_msg INFO $rCli
        verifyConfiguredQos $dut2 $option(family) false $dstIp $dstMask $configuredFc_dst $configuredPriority_dst
    }

    # enable the qos-route-lookup
    log_msg INFO "Enable the qos-route-lookup"
    foreach lookup "source destination" {

#        set queueTypeList "policer priority profile"
        set queueTypeList "priority profile"
        set profileList "in-profile out-profile undefined"
        set deiFlagList "true false"
        set trueFalseList "true false"
        set priorityList "high low"
        set queueTypeOriginal [lindex $queueTypeList [random [llength $queueTypeList]]]
        set queueTypeNew [lindex $queueTypeList [random [llength $queueTypeList]]]
        set profileOriginal [lindex $profileList [random [llength $profileList]]]
        set profileNew [lindex $profileList [random [llength $profileList]]]
        set deiFlagOriginal [lindex $deiFlagList [random [llength $deiFlagList]]]
        set deiFlagNew [lindex $deiFlagList [random [llength $deiFlagList]]]
        set vlanDE [lindex $trueFalseList [random [llength $trueFalseList]]]
        set priorityFirstStage [lindex $priorityList [random [llength $priorityList]]]

        if { $lookup == "source" } {
            set configPriority $configuredPriority_src
            set configFc $configuredFc_src
        } else {
            set configPriority $configuredPriority_dst
            set configFc $configuredFc_dst
        }

        set dot1pMappedFc $configFc
        while { $dot1pMappedFc == $configFc } {
            set dot1pMappedFc [ lindex $possibleFcTypes [random [llength $possibleFcTypes]] ]
        }
        if { $configFc == "" } {
           set configFcQueue $dot1pMappedFc
        } else {
           set configFcQueue $configFc
        }
        
        set action "-useDifferentFC true -queueTypeOriginal $queueTypeOriginal -queueTypeNew $queueTypeNew -profileOriginal $profileOriginal -profileNew $profileNew -deiFlagOriginal $deiFlagOriginal -deiFlagNew $deiFlagNew -vlanDE $vlanDE -priorityFirstStage $priorityFirstStage -qppbPriority \"$configPriority\""
        set cmdln "-dut $dut2 -sapIngressPolicyId 2 -networkPolicyId 2 -networkQueuePolicyName networkQueue -itfType sap -fcOriginal $dot1pMappedFc -fcNew \"$configFc\" -dot1p 2"

        array set actionArr $action

        log_msg DEBUG "Debug info: $action $cmdln"
        parray actionArr        

        set expectedChangeInQueueNumberIdx [getListIndex $fcToQueueMap(sap) $configFcQueue]
        set expectedChangeInQueueNumber [lindex $fcToQueueMap(sap) [expr $expectedChangeInQueueNumberIdx +1]]
        # config of qos policy parameters
        eval qppb_config_qos_parameters config $cmdln $action
        set rCli [videoCli $dut2 "/configure qos"]
        set qosConfig [videoCli $dut2 "info"]
   
        log_msg INFO "$qosConfig"
        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli

        set packetProfileAndPriority [eval qppb_calculatePacketProfileAndPriorityAtSap $action -fcNew [list $configFc]]

        log_msg INFO "The packet should show following behaviour $packetProfileAndPriority"
        log_msg INFO "We should only see changes in queue/policer $expectedChangeInQueueNumber"
        # collecting reference stats
        set queueNumbersForCollectingStats [eval qppb_createQueueNumbersForCollectingStats -majorItfType sap $cmdln $action]
        if { $actionArr(-vlanDE) == "true" } { set vlanDE 1 } else { set vlanDE 0 }

        if { $vlanDE == 1 } {
            if { $option(redirectType) == "vrfToVrf" || $option(redirectType) == "vrfToGrt" } {
                # configure SAP under VPRN to Ixia port 4
                set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "/configure port $topoMap(Dut-B,1/1/8) ethernet mode hybrid"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "/configure port $topoMap(Dut-B,1/1/8) no shutdown"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "    configure service vprn 2"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "        interface to_Ixia_4 create"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            address 2.1.9.1/24"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            mac 00:00:00:00:09:01"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            ipv6"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                address 3FFE::201:901/120"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            sap $topoMap(Dut-B,1/1/8):2 create"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            no shutdown"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                ingress"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                    qos 2"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                    filter ip $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                    filter ipv6 $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "        no shutdown"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "      exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                set thisDA 00:00:00:00:09:01
            } else {
                set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "/configure port $topoMap(Dut-B,1/1/8) ethernet mode hybrid"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "/configure port $topoMap(Dut-B,1/1/8) no shutdown"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "    configure service"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "        ies 300 customer 1 create"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            interface to_Ixia_4 create"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                address 2.1.9.1/24"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                mac 00:00:00:00:09:01"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                ipv6"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                    address 3FFE::201:901/120"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                sap $topoMap(Dut-B,1/1/8):5 create"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                no shutdown"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                    ingress"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                        filter ip $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                        filter ipv6 $cntPktsViaFilter_filterId"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                        qos 2"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                    exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "                exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            no shutdown"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "            exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "        no shutdown"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "        exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "    exit"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                set thisDA 00:00:00:00:09:01
            }    
            if {$sendTraffic_v4} {
                if { $option(redirectType) == "vrfToVrf" } {
                  log_msg INFO "=> handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p \"2 0\" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
                } elseif { $option(redirectType) == "grtToVrf" } {
                  log_msg INFO "=> handlePacket -port $portA(Ixia.$dut2) -dot1q 5 -dot1p \"2 0\" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 5.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 5 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 5.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 5 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 5.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
                } elseif { $option(redirectType) == "vrfToGrt" } {
                  log_msg INFO "=> handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p \"2 0\" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v4 -numDest 1 -src 2.1.2.50 -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
                }
            }
            if {$sendTraffic_v6} {
                if { $option(redirectType) == "vrfToVrf" } {
                  log_msg INFO "=> handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p \"2 0\" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
                } elseif { $option(redirectType) == "grtToVrf" } {
                 log_msg INFO "=> handlePacket -port $portA(Ixia.$dut2) -dot1q 5 -dot1p \"2 0\" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  5.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 5 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  5.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 5 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  5.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
                } elseif { $option(redirectType) == "vrfToGrt" } {
                  log_msg INFO "=> handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p \"2 0\" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action $thisHandlePacketAction"
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action create
                  handlePacket -port $portA(Ixia.$dut2) -dot1q 2 -dot1p "2 0" -vlanDE 1 -dst $thisDstPrefix_v6 -numDest 1 -src [ipv4ToIpv6  2.1.2.50] -numSource 1 -damac $thisDA -stream 1 -rate $pktRatePerStream -data $streamData_ISATMS -framesize $pktSize -rawProtocol $rawProtocol -action
                }
            }
        }
        if { $vlanDE == 1 } {
            set lookupInterface "to_Ixia_4"
            set ixiaPort $portA(Ixia.$dut2)
            set sap $topoMap(Dut-B,1/1/8)
        } else {
            if { $option(redirectType) == "grtToVrf" } {
                set lookupInterface "to_Dut-A5"
            } else {
                set lookupInterface "to_Dut-A2"
            }
            set ixiaPort $portA(Ixia.$dut1)
            set sap $topoMap(Dut-B,1/1/1)
        }

        if { $option(redirectType) == "grtToVrf" } {
            log_msg INFO "Enable the qos-route-lookup $lookup on ies interface"
            if { $option(family) == "ipv4"} {
                set rCli [$dut2 sendCliCommand "/configure service ies 300 interface $lookupInterface qos-route-lookup $lookup"]; log_msg INFO $rCli
            } else {
                set rCli [$dut2 sendCliCommand "/configure service ies 300 interface $lookupInterface ipv6 qos-route-lookup $lookup"]; log_msg INFO $rCli
            }
            log_msg INFO "--------------------------------------"
            log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
            log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
            log_msg INFO "--------------------------------------"

        } elseif { $option(redirectType) == "vrfToVrf" } {
            log_msg INFO "Enable the qos-route-lookup $lookup on vprn interface"
            if { $option(family) == "ipv4"} {
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface qos-route-lookup $lookup"]; log_msg INFO $rCli
            } else {
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface ipv6 qos-route-lookup $lookup"]; log_msg INFO $rCli
            }
            log_msg INFO "--------------------------------------"
            log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
            log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
            log_msg INFO "--------------------------------------"

        } elseif { $option(redirectType) == "vrfToGrt" } {
            log_msg INFO "Enable the qos-route-lookup $lookup on vprn interface"
            if { $option(family) == "ipv4"} {
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface qos-route-lookup $lookup"]; log_msg INFO $rCli
            } else {
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface ipv6 qos-route-lookup $lookup"]; log_msg INFO $rCli
            }
            log_msg INFO "--------------------------------------"
            log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
            log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
            log_msg INFO "--------------------------------------"
        }

        if { $option(redirectType) == "grtToVrf" } {
            set vlan 5
            set serviceId 300
        } else {
            set vlan 2
            set serviceId 2
        }

# interpreter

        switch -- [lindex $packetProfileAndPriority 0] {
            profile - priority - network {
                set expectedNumberOfDifferences 2
                set rCli [$dut2 sendCliCommand "/clear service statistics sap $sap:$vlan all"]; log_msg INFO $rCli
                set originalStatistics [qppb_collectIngressQueueStats -dut $dut2 -type sap -serviceId $serviceId -port $sap:$vlan -captureIngressQueues "$queueNumbersForCollectingStats"]
                log_msg DEBUG "Original statistics: $originalStatistics"
                log_msg INFO "Clear filter counters"
                if {$option(family) == "ipv4"} {
                    set fTxt "ip"
                } else {
                    set fTxt "ipv6"
                }
                set rCli [$dut2 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut4 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut6 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                after 1000
                handlePacket -port $ixiaPort -action start ; after 5000
                handlePacket -port $ixiaPort -action stop ; after 2000
                # verify
                set difference [qppb_waitForTwoChangesInStats -dut $dut2 -type sap -serviceId $serviceId -port $sap:$vlan -captureIngressQueues "$queueNumbersForCollectingStats" -originalStatistics $originalStatistics -expectedNumberOfDifferences $expectedNumberOfDifferences -expectedChangeInQueueNumber $expectedChangeInQueueNumber]
                log_msg INFO "Stats difference: $difference"
                # verify redirected traffic
                if { $option(redirectType) == "grtToVrf" } {
                    getFilter -print true -dut $dut2 -match "entry 65535 dir ingress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut2 -match "entry 1 dir ingress version $option(family) count !=0" -errorIfNotFound true
                }
                if { $option(redirectType) == "vrfToGrt" } {
                    getFilter -print true -dut $dut6 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut4 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                }
                set subtestError [evaluateStatisticsBasedOnPacketBehaviour -difference $difference -queueNumber $expectedChangeInQueueNumber -behaviour "$packetProfileAndPriority" -totalNumberOfQueuesShowingChanges 1]
                if { $subtestError == "ERROR"} {
                    log_msg ERROR "Evaluation of statistics FAILED"
                    log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
                    log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
                    set rCli [$dut2 sendCliCommand "show service id $serviceId sap $sap:$vlan detail"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "configure qos"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "info"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                }
                # perform rollback
                
                
                log_msg INFO "--------------------------------------"
                log_msg INFO "Perform rollback"
                log_msg INFO "--------------------------------------"
                gash_interpreter
                
                log_msg INFO "Create rollback checkpoint, remove configuration and restore via rollback revert"
                set rCli [$dut2 sendCliCommand "configure system rollback rollback-location $rollbackLocation/fwdRtrVprnTesting"] ; log_msg INFO "$rCli"
                set rCli [$dut2 sendCliCommand "admin rollback save"] ; log_msg INFO "$rCli"
                #
                after 1000
                saveOrRestore delete -dut $dut2
                after 1000
                # configure rollback-location again because it was removed during saveOrRestore delete
                set rCli [$dut2 sendCliCommand "configure system rollback rollback-location $rollbackLocation/fwdRtrVprnTesting"] ; log_msg INFO "$rCli"
                set rCli [$dut2 sendCliCommand "admin rollback revert latest-rb now"] ; log_msg INFO "$rCli"
                set rCli [$dut2 sendCliCommand "admin rollback delete latest-rb"] ; log_msg INFO "$rCli"
                set rCli [$dut2 sendCliCommand "configure system rollback no rollback-location"] ; log_msg INFO "$rCli"
                log_msg INFO "Waiting 20secs ...." ; after 20000
                if { $option(redirectType) == "grtToVrf" } {
                    log_msg INFO "Verify configured FC and priority for source route lookup"
                    verifyConfiguredQos $dut2 $option(family) false $srcIp $srcMask $configuredFc_src $configuredPriority_src
                    log_msg INFO "Verify configured FC and priority for destination route lookup"
                    verifyConfiguredQos $dut2 $option(family) true $dstIp $dstMask $configuredFc_dst $configuredPriority_dst -serviceId 400
                } elseif { $option(redirectType) == "vrfToVrf" } {
                    log_msg INFO "Verify configured FC and priority for source route lookup"
                    verifyConfiguredQos $dut2 $option(family) true $srcIp $srcMask $configuredFc_src $configuredPriority_src -serviceId 2
                    log_msg INFO "Verify configured FC and priority for destination route lookup"
                    verifyConfiguredQos $dut2 $option(family) true $dstIp $dstMask $configuredFc_dst $configuredPriority_dst -serviceId 400
                } elseif { $option(redirectType) == "vrfToGrt" } {
                    log_msg INFO "Verify configured FC and priority for source route lookup"
                    verifyConfiguredQos $dut2 $option(family) true $srcIp $srcMask $configuredFc_src $configuredPriority_src -serviceId 2
                    log_msg INFO "Verify configured FC and priority for destination route lookup"
                    verifyConfiguredQos $dut2 $option(family) false $dstIp $dstMask $configuredFc_dst $configuredPriority_dst
                }
                log_msg INFO "Clear filter counters"
                if {$option(family) == "ipv4"} {
                    set fTxt "ip"
                } else {
                    set fTxt "ipv6"
                }
                set rCli [$dut2 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut4 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut6 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                after 1000
                handlePacket -port $ixiaPort -action start ; after 5000
                handlePacket -port $ixiaPort -action stop ; after 2000
                # verify
                set difference [qppb_waitForTwoChangesInStats -dut $dut2 -type sap -serviceId $serviceId -port $sap:$vlan -captureIngressQueues "$queueNumbersForCollectingStats" -originalStatistics $originalStatistics -expectedNumberOfDifferences $expectedNumberOfDifferences -expectedChangeInQueueNumber $expectedChangeInQueueNumber]
                log_msg INFO "Stats difference: $difference"
                # verify redirected traffic
                if { $option(redirectType) == "grtToVrf" } {
                    getFilter -print true -dut $dut2 -match "entry 65535 dir ingress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut2 -match "entry 1 dir ingress version $option(family) count !=0" -errorIfNotFound true
                }
                if { $option(redirectType) == "vrfToGrt" } {
                    getFilter -print true -dut $dut6 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut4 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                }
                set subtestError [evaluateStatisticsBasedOnPacketBehaviour -difference $difference -queueNumber $expectedChangeInQueueNumber -behaviour "$packetProfileAndPriority" -totalNumberOfQueuesShowingChanges 1]
                if { $subtestError == "ERROR"} {
                    log_msg ERROR "Evaluation of statistics FAILED"
                    log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
                    log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
                    set rCli [$dut2 sendCliCommand "show service id $serviceId sap $sap:$vlan detail"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "configure qos"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "info"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                }
                # verify QPPB interaction with GRT leak
                if {$lookup == "destination" && $option(redirectType) != "grtToVrf"} {
                    log_msg INFO "--------------------------------------"
                    log_msg INFO "Verify QPPB interaction with GRT leak (only in case qos-route-lookup destination is enabled)"
                    log_msg INFO "--------------------------------------"
                    gash_interpreter
                    
                    set rCli [$dut2 sendCliCommand "/configure service vprn 2 grt-lookup enable-grt"] ; log_msg INFO "$rCli"
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "/clear service statistics sap $sap:$vlan all"]; log_msg INFO $rCli
                    log_msg INFO "Clear filter counters"
                    if {$option(family) == "ipv4"} {
                        set fTxt "ip"
                    } else {
                        set fTxt "ipv6"
                    }
                    set rCli [$dut2 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                    set rCli [$dut4 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                    set rCli [$dut6 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                    after 1000
                    handlePacket -port $ixiaPort -action start ; after 5000
                    handlePacket -port $ixiaPort -action stop ; after 2000
                    # verify
                    set difference [qppb_waitForTwoChangesInStats -dut $dut2 -type sap -serviceId $serviceId -port $sap:$vlan -captureIngressQueues "$queueNumbersForCollectingStats" -originalStatistics $originalStatistics -expectedNumberOfDifferences $expectedNumberOfDifferences -expectedChangeInQueueNumber $expectedChangeInQueueNumber]
                    log_msg INFO "Stats difference: $difference"
                    # verify redirected traffic
                    if { $option(redirectType) == "grtToVrf" } {
                        getFilter -print true -dut $dut2 -match "entry 65535 dir ingress version $option(family) count !=0" -errorIfNotFound true
                    } else {
                        getFilter -print true -dut $dut2 -match "entry 1 dir ingress version $option(family) count !=0" -errorIfNotFound true
                    }
                    if { $option(redirectType) == "vrfToGrt" } {
                        getFilter -print true -dut $dut6 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                    } else {
                        getFilter -print true -dut $dut4 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                    }
                    set subtestError [evaluateStatisticsBasedOnPacketBehaviour -difference $difference -queueNumber $expectedChangeInQueueNumber -behaviour "$packetProfileAndPriority" -totalNumberOfQueuesShowingChanges 1]
                    if { $subtestError == "ERROR"} {
                        log_msg ERROR "Evaluation of statistics FAILED"
                        log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
                        log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
                        set rCli [$dut2 sendCliCommand "show service id $serviceId sap $sap:$vlan detail"]; log_msg INFO $rCli
                        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                        set rCli [$dut2 sendCliCommand "configure qos"]; log_msg INFO $rCli
                        set rCli [$dut2 sendCliCommand "info"]; log_msg INFO $rCli
                        set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                    }
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 grt-lookup no enable-grt"] ; log_msg INFO "$rCli"
                set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                }
                # verify QPPB interaction with uRPF-check strict|loose|strict-no-ecmp
                set urpfList {strict loose strict-no-ecmp}
                set urpf [lindex $urpfList [random [llength $urpfList]]]
                if { $vlanDE == 1 } {
                    set urpf loose
                }
                log_msg INFO "--------------------------------------"
                log_msg INFO "Verify QPPB interaction with uRPF-check in mode $urpf"
                log_msg INFO "--------------------------------------"
                gash_interpreter
                
                if {$option(family) == "ipv4"} {
                    set cmd ""
                } else {
                    set cmd "ipv6"
                }
                if {$option(redirectType) == "grtToVrf"} {
                    set rCli [$dut2 sendCliCommand "/configure service ies 300 interface $lookupInterface $cmd urpf-check mode $urpf"] ; log_msg INFO "$rCli"
                } else {
                    set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface $cmd urpf-check mode $urpf"] ; log_msg INFO "$rCli"
                }
                set rCli [$dut2 sendCliCommand "/clear service statistics sap $sap:$vlan all"]; log_msg INFO $rCli
                log_msg INFO "Clear filter counters"
                if {$option(family) == "ipv4"} {
                    set fTxt "ip"
                } else {
                    set fTxt "ipv6"
                }
                set rCli [$dut2 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut4 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut6 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                after 1000
                handlePacket -port $ixiaPort -action start ; after 5000
                handlePacket -port $ixiaPort -action stop ; after 2000
                # verify
                set difference [qppb_waitForTwoChangesInStats -dut $dut2 -type sap -serviceId $serviceId -port $sap:$vlan -captureIngressQueues "$queueNumbersForCollectingStats" -originalStatistics $originalStatistics -expectedNumberOfDifferences $expectedNumberOfDifferences -expectedChangeInQueueNumber $expectedChangeInQueueNumber]
                log_msg INFO "Stats difference: $difference"
                # verify redirected traffic
                if { $option(redirectType) == "grtToVrf" } {
                    getFilter -print true -dut $dut2 -match "entry 65535 dir ingress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut2 -match "entry 1 dir ingress version $option(family) count !=0" -errorIfNotFound true
                }
                if { $option(redirectType) == "vrfToGrt" } {
                    getFilter -print true -dut $dut6 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut4 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                }
                set subtestError [evaluateStatisticsBasedOnPacketBehaviour -difference $difference -queueNumber $expectedChangeInQueueNumber -behaviour "$packetProfileAndPriority" -totalNumberOfQueuesShowingChanges 1]
                if { $subtestError == "ERROR"} {
                    log_msg ERROR "Evaluation of statistics FAILED"
                    log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
                    log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
                    set rCli [$dut2 sendCliCommand "show service id $serviceId sap $sap:$vlan detail"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "configure qos"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "info"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                }
                if {$option(redirectType) == "grtToVrf"} {
                    set rCli [$dut2 sendCliCommand "/configure service ies 300 interface $lookupInterface $cmd no urpf-check"] ; log_msg INFO "$rCli"
                } else {
                    set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface $cmd no urpf-check"] ; log_msg INFO "$rCli"
                }

            }
            policer {
                set policerIdIdx [getListIndex $fcToQueueMap(sap) "$configFcQueue"]
                set policerId [lindex $fcToQueueMap(sap) [expr $policerIdIdx + 1]]
                # stage 1: offered-priority-no-cir
                set rCli [$dut2 sendCliCommand "/configure qos sap-ingress 2 policer $policerId stat-mode offered-priority-no-cir"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "/clear service statistics sap $topoMap(Dut-B,1/1/1):$vlan all"]; log_msg INFO $rCli
                set originalStatistics [qppb_collectIngressQueueStats -dut $dut2 -type sap -serviceId $serviceId -port $topoMap(Dut-B,1/1/1):$vlan -captureIngressQueues "$queueNumbersForCollectingStats"]
                log_msg DEBUG "Original statistics: $originalStatistics"
                log_msg INFO "Clear filter counters"
                if {$option(family) == "ipv4"} {
                    set fTxt "ip"
                } else {
                    set fTxt "ipv6"
                }
                set rCli [$dut2 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut4 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut6 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                after 1000
                handlePacket -port $portA(Ixia.$dut1) -action start ; after 5000
                handlePacket -port $portA(Ixia.$dut1) -action stop ; after 2000
                # verify
                set difference [qppb_waitForTwoChangesInStats -dut $dut2 -type sap -serviceId $serviceId -port $topoMap(Dut-B,1/1/1):$vlan -captureIngressQueues "$queueNumbersForCollectingStats" -originalStatistics $originalStatistics]
                log_msg INFO "Stats difference: $difference"
                # verify redirected traffic
                if { $option(redirectType) == "grtToVrf" } {
                    getFilter -print true -dut $dut2 -match "entry 65535 dir ingress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut2 -match "entry 1 dir ingress version $option(family) count !=0" -errorIfNotFound true
                }
                if { $option(redirectType) == "vrfToGrt" } {
                    getFilter -print true -dut $dut6 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut4 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                }
                set subtestErrorVal1 [evaluateStatisticsBasedOnPacketBehaviour -difference $difference -queueNumber $expectedChangeInQueueNumber -behaviour "$packetProfileAndPriority" -totalNumberOfQueuesShowingChanges 1]
                if { $subtestErrorVal1 == "ERROR"} {
                    log_msg ERROR "Evaluation of statistics FAILED"
                    log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
                    log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
                    set rCli [$dut2 sendCliCommand "show service id $serviceId sap $topoMap(Dut-B,1/1/1):$vlan detail"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "configure qos"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "info"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                }
                # stage 2: offered-profile-cir stats mode
                set rCli [$dut2 sendCliCommand "/configure qos sap-ingress 2 policer $policerId stat-mode offered-profile-cir"]; log_msg INFO $rCli
                set rCli [$dut2 sendCliCommand "/clear service statistics sap $topoMap(Dut-B,1/1/1):$vlan all"]; log_msg INFO $rCli
                set originalStatistics [qppb_collectIngressQueueStats -dut $dut2 -type sap -serviceId $serviceId -port $topoMap(Dut-B,1/1/1):$vlan -captureIngressQueues "$queueNumbersForCollectingStats"]
                log_msg DEBUG "Original statistics: $originalStatistics"
                log_msg INFO "Clear filter counters"
                if {$option(family) == "ipv4"} {
                    set fTxt "ip"
                } else {
                    set fTxt "ipv6"
                }
                set rCli [$dut2 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut4 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                set rCli [$dut6 sendCliCommand "clear filter $fTxt $cntPktsViaFilter_filterId"] ; log_msg INFO "$rCli"
                after 1000
                handlePacket -port $portA(Ixia.$dut1) -action start ; after 5000
                handlePacket -port $portA(Ixia.$dut1) -action stop ; after 2000
                # verify
                set difference [qppb_waitForTwoChangesInStats -dut $dut2 -type sap -serviceId $serviceId -port $topoMap(Dut-B,1/1/1):$vlan -captureIngressQueues "$queueNumbersForCollectingStats" -originalStatistics $originalStatistics]
                log_msg INFO "Stats difference: $difference"
                # verify redirected traffic
                if { $option(redirectType) == "grtToVrf" } {
                    getFilter -print true -dut $dut2 -match "entry 65535 dir ingress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut2 -match "entry 1 dir ingress version $option(family) count !=0" -errorIfNotFound true
                }
                if { $option(redirectType) == "vrfToGrt" } {
                    getFilter -print true -dut $dut6 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                } else {
                    getFilter -print true -dut $dut4 -match "entry 1 dir egress version $option(family) count !=0" -errorIfNotFound true
                }
                set subtestErrorVal2  [evaluateStatisticsBasedOnPacketBehaviour -difference $difference -queueNumber $expectedChangeInQueueNumber -behaviour "$packetProfileAndPriority" -totalNumberOfQueuesShowingChanges 1]
                if { $subtestErrorVal2 == "ERROR"} {
                    log_msg ERROR "Evaluation of statistics FAILED"
                    log_msg INFO "Testing redirect: $option(redirectType); lookup: $lookup"
                    log_msg INFO "Dot1p mapped FC: $dot1pMappedFc <-> Qppb mapped FC \"$configFc\" (with prio: \"$configPriority\")"
                    set rCli [$dut2 sendCliCommand "show service id $serviceId sap $topoMap(Dut-B,1/1/1):$vlan detail"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "configure qos"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "info"]; log_msg INFO $rCli
                    set rCli [$dut2 sendCliCommand "exit all"]; log_msg INFO $rCli
                }
                if { $subtestErrorVal1 != "noError" || $subtestErrorVal2 != "noError" } { set subtestError ERROR }    
            }
        }
        if { $option(redirectType) == "grtToVrf" } {
            log_msg INFO "Disable the qos-route-lookup $lookup on ies interface"
            if { $option(family) == "ipv4"} {
                set rCli [$dut2 sendCliCommand "/configure service ies 300 interface $lookupInterface no qos-route-lookup"]; log_msg INFO $rCli
            } else {
                set rCli [$dut2 sendCliCommand "/configure service ies 300 interface $lookupInterface ipv6 no qos-route-lookup"]; log_msg INFO $rCli
            }
        } elseif { $option(redirectType) == "vrfToVrf" } {
            log_msg INFO "Disable the qos-route-lookup $lookup on vprn interface"
            if { $option(family) == "ipv4"} {
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface no qos-route-lookup"]; log_msg INFO $rCli
            } else {
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface ipv6 no qos-route-lookup"]; log_msg INFO $rCli
            }
        } elseif { $option(redirectType) == "vrfToGrt" } {
            log_msg INFO "Disable the qos-route-lookup $lookup on vprn interface"
            if { $option(family) == "ipv4"} {
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface no qos-route-lookup"]; log_msg INFO $rCli
            } else {
                set rCli [$dut2 sendCliCommand "/configure service vprn 2 interface $lookupInterface ipv6 no qos-route-lookup"]; log_msg INFO $rCli
            }
        }
    }

    if { ($subtestError == "noError") && ($Result == "OK") } {
        log_result PASSED "Test Case $testID PASSED"
    } else {
        log_result FAILED "Test Case $testID FAILED"
    }

    if {$option(deconfig)} {
      saveOrRestore delete
    }




}




proc filterWccpEnhancedSNMP {args} {

    global testdir logdir ixia_port
    global dutList sdpList svcListList family
    global itfType svcType itfBind itfMode filterType 
    global dut1 dut2 dut3 dut4 dut5 ixport1 ixport3
    global port_1_1 port_1_3 port_2_1 port_2_2 port_3_2 port_3_3 port_3_4 port_4_1 port_5_1 port_5_2
    global portType_2_2 portType_3_2 portName_2_2 portName_3_2 sapName_3_2 itfDot1q userTag encapName
    global vprnId vprn2Id vprn3Id vprn4Id static_routes_list testResultFlag
  
    source $testdir/testsuites/filter/params_file_filter_tcam.tcl
    source $testdir/testsuites/filter/tests/wccp_procs.tcl
    source $testdir/testsuites/qos/params.tcl
    #source $testdir/testsuites/filter/tests/wccp.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_procs.tcl
    #source $testdir/testsuites/filter/tests/wccp_enhanced_params.tcl
        
    #source /home/jstefanc/ws_TiMOS_0_0/gash/testsuites/filter/tests/wccp_enhanced.tcl
    source /home/jstefanc/ws_TiMOS_0_0/gash/testsuites/filter/tests/wccp_enhanced_procs.tcl
    source /home/jstefanc/ws_TiMOS_0_0/gash/testsuites/filter/tests/wccp_enhanced_params.tcl   
       
       
    setGlobalVar logMsgTimestamps true  
    set opt(debug)       false
    set opt(mode)        regular
    set opt(testOptions) "" 
    set opt(hostType)    ""
    set opt(deconfig)   true
    set opt(svcType)    ""
    set opt(debugPrint) true
    set opt(filterType) "IP"
    set opt(dual)       false
    set opt(snmp)       true
    set opt(setupType)  ""
    set opt(issu)       "false"
    set opt(iteration)  1
   
    set Result PASSED
    set testResultFlag OK 
    getopt opt $args
    
    
    # start memory leak checks
    set CliTim [ Dut-$dut3 cget -cli_timeout ]
    set Tim [ Dut-$dut3 cget -timeout ]
    Dut-$dut3 configure -cli_timeout 200
    Dut-$dut3 configure -timeout 200
   
    filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findActiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}

    if {[Dut-$dut3 cget -redundantSystem] != "false"} {
        # start memory leak checks on standby CPM
        filterScale_memLeakChecks $dut3 start -card [Dut-$dut3 findInactiveCpm] -mPools {"Services" "FltrLOG" "TLS MFIB" "DHCPS" "PIP" "MFIB" "Management"}
    }

    
    log_msg INFO "--------------------------------------"
    log_msg INFO "1. Verify objects of tFilterRedirectPolicyTable"
    log_msg INFO "--------------------------------------"
    
    log_msg INFO "Verify mib walk of tFilterRedirectPolicyTable - 0 entries expected"
    wccpMibWalk $dut3 tFilterRedirectPolicyTable 0
    puts "\n"
    
     log_msg INFO "Create and activate policy - wccp"
     set r [Dut-$dut3 setTFilterRPRowStatus wccp createAndGo]
     set testResultFlag [RP_CompareOutputString "noError" $r]
     
     log_msg INFO "Delete existing policy - wccp"
     set r [Dut-$dut3 setTFilterRPRowStatus wccp destroy]
     set testResultFlag [RP_CompareOutputString "noError" $r]

     set r [Dut-$dut3 getTFilterRPRowStatus wccp]
     set testResultFlag [RP_CompareOutputString "ERROR" $r]
     
     log_msg INFO "Delete non-existing policy - wccp"
     set r [Dut-$dut3 setTFilterRPRowStatus wccp destroy]
     set testResultFlag [RP_CompareOutputString "inconsistentValue" $r -ExtraString "The policy-id does not exist"]

     
     set r [Dut-$dut3 getTFilterRPRowStatus wccp]
     set testResultFlag [RP_CompareOutputString "ERROR" $r]
     
     # out of range  
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 0]
     set testResultFlag [RP_CompareOutputString "wrongValue" $r]
     
     #active
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 1]
     set testResultFlag [RP_CompareOutputString "inconsistentValue" $r]
     
     
     #notInService
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 2]
     set testResultFlag [RP_CompareOutputString "wrongValue" $r]
     #notReady
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 3]
     set testResultFlag [RP_CompareOutputString "wrongValue" $r]
      
     #createAndWait 
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 5]
     set testResultFlag [RP_CompareOutputString "wrongValue" $r]
     
     #Destroy
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 6]
     set testResultFlag [RP_CompareOutputString "inconsistentValue" $r]
     
     #outOfRange
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 57]
     set testResultFlag [RP_CompareOutputString "wrongValue" $r]
     
     #createAndGo
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 4]
     set testResultFlag [RP_CompareOutputString "noError" $r]
     set r [Dut-$dut3 getTFilterRPRowStatus wccp]
     set testResultFlag [RP_CompareOutputString "active" $r]
     
     #Destroy
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 6]
     set testResultFlag [RP_CompareOutputString "noError" $r]
     
     #createAndGo 2
     set r [Dut-$dut3 setTFilterRPRowStatus wccp 4]
     set testResultFlag [RP_CompareOutputString "noError" $r]
     set r [Dut-$dut3 getTFilterRPRowStatus wccp]
     set testResultFlag [RP_CompareOutputString "active" $r]

                if { [RP_CompareOutputString "$opt(dropCount)" $r -mode silent] != "OK"} {set testResultFlag "FAILED"}    


}
